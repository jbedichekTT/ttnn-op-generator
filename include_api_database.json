{
  "api_to_header": {
    "classes::Algorithm": "tt_metal/impl/allocator/algorithms/allocator_algorithm.hpp",
    "classes::Alignment": "ttnn/api/ttnn/tensor/layout/alignment.hpp",
    "classes::Allocator": "tt_metal/api/tt-metalium/allocator.hpp",
    "classes::AnyBuffer": "tt_metal/api/tt-metalium/mesh_buffer.hpp",
    "classes::BankManager": "tt_metal/impl/allocator/bank_manager.hpp",
    "classes::Buffer": "tt_metal/api/tt-metalium/buffer.hpp",
    "classes::BufferDistributionSpec": "tt_metal/api/tt-metalium/buffer_distribution_spec.hpp",
    "classes::Builder": "tt_metal/api/tt-metalium/circular_buffer_config.hpp",
    "classes::CircularBuffer": "tt_metal/api/tt-metalium/circular_buffer.hpp",
    "classes::CircularBufferConfig": "tt_metal/api/tt-metalium/circular_buffer_config.hpp",
    "classes::Command": "tt_metal/impl/dispatch/host_runtime_commands.hpp",
    "classes::CommandQueue": "tt_metal/api/tt-metalium/command_queue.hpp",
    "classes::ConstIterator": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "classes::ControlPlane": "tt_metal/api/tt-metalium/control_plane.hpp",
    "classes::CoreIDs": "ttnn/api/ttnn/core.hpp",
    "classes::CoreIterator": "tt_metal/api/tt-metalium/core_coord.hpp",
    "classes::CoreRange": "tt_metal/api/tt-metalium/core_coord.hpp",
    "classes::CoreRangeSet": "tt_metal/api/tt-metalium/core_coord.hpp",
    "classes::DemuxKernel": "tt_metal/impl/dispatch/kernel_config/demux.hpp",
    "classes::Device": "tt_metal/impl/device/device_impl.hpp",
    "classes::DeviceCommand": "tt_metal/impl/dispatch/device_command.hpp",
    "classes::DeviceCommandCalculator": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "classes::DeviceOperation": "ttnn/api/ttnn/operation.hpp",
    "classes::DevicePool": "tt_metal/api/tt-metalium/device_pool.hpp",
    "classes::DeviceProfiler": "tt_metal/impl/profiler/profiler.hpp",
    "classes::DispatchCoreConfig": "tt_metal/api/tt-metalium/dispatch_core_common.hpp",
    "classes::DispatchKernel": "tt_metal/impl/dispatch/kernel_config/dispatch.hpp",
    "classes::DispatchMemMap": "tt_metal/impl/dispatch/dispatch_mem_map.hpp",
    "classes::DispatchQueryManager": "tt_metal/impl/dispatch/dispatch_query_manager.hpp",
    "classes::DispatchSKernel": "tt_metal/impl/dispatch/kernel_config/dispatch_s.hpp",
    "classes::DispatchSettings": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "classes::DistributedContext": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "classes::DistributedException": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "classes::DistributedHostBuffer": "tt_metal/api/tt-metalium/distributed_host_buffer.hpp",
    "classes::EnqueueProgramCommand": "tt_metal/impl/dispatch/host_runtime_commands.hpp",
    "classes::EnqueueTerminateCommand": "tt_metal/impl/dispatch/host_runtime_commands.hpp",
    "classes::EthRouterKernel": "tt_metal/impl/dispatch/kernel_config/eth_router.hpp",
    "classes::EthTunnelerKernel": "tt_metal/impl/dispatch/kernel_config/eth_tunneler.hpp",
    "classes::FDKernel": "tt_metal/impl/dispatch/kernel_config/fd_kernel.hpp",
    "classes::FabricEriscDatamoverBuilder": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "classes::FabricNodeId": "tt_metal/api/tt-metalium/routing_table_generator.hpp",
    "classes::FreeList": "tt_metal/impl/allocator/algorithms/free_list.hpp",
    "classes::FreeListOpt": "tt_metal/impl/allocator/algorithms/free_list_opt.hpp",
    "classes::GlobalCircularBuffer": "tt_metal/api/tt-metalium/global_circular_buffer.hpp",
    "classes::GlobalControlPlane": "tt_metal/api/tt-metalium/control_plane.hpp",
    "classes::GlobalSemaphore": "tt_metal/api/tt-metalium/global_semaphore.hpp",
    "classes::GraphArgumentSerializer": "ttnn/api/ttnn/graph/graph_argument_serializer.hpp",
    "classes::GraphProcessor": "ttnn/api/ttnn/graph/graph_processor.hpp",
    "classes::GraphTracker": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "classes::HWCommandQueue": "tt_metal/impl/dispatch/hardware_command_queue.hpp",
    "classes::HostBuffer": "tt_metal/api/tt-metalium/host_buffer.hpp",
    "classes::IDevice": "tt_metal/api/tt-metalium/device.hpp",
    "classes::IGraphHooks": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "classes::IGraphProcessor": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "classes::Iterator": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "classes::Kernel": "tt_metal/api/tt-metalium/kernel.hpp",
    "classes::L1BankingAllocator": "tt_metal/impl/allocator/l1_banking_allocator.hpp",
    "classes::LaunchMessageRingBufferState": "tt_metal/impl/dispatch/launch_message_ring_buffer_state.hpp",
    "classes::LightMetalBinary": "tt_metal/api/tt-metalium/lightmetal_binary.hpp",
    "classes::LightMetalCaptureContext": "tt_metal/impl/lightmetal/lightmetal_capture.hpp",
    "classes::LightMetalReplay": "tt_metal/api/tt-metalium/lightmetal_replay.hpp",
    "classes::LightMetalReplayImpl": "tt_metal/impl/lightmetal/lightmetal_replay_impl.hpp",
    "classes::Logger": "tt_metal/api/tt-metalium/logger.hpp",
    "classes::MemoryConfig": "ttnn/api/ttnn/tensor/types.hpp",
    "classes::MemoryPin": "tt_metal/api/tt-metalium/memory_pin.hpp",
    "classes::MemoryReporter": "tt_metal/api/tt-metalium/memory_reporter.hpp",
    "classes::MeshBuffer": "tt_metal/api/tt-metalium/mesh_buffer.hpp",
    "classes::MeshCommandQueue": "tt_metal/api/tt-metalium/mesh_command_queue.hpp",
    "classes::MeshContainer": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "classes::MeshCoordinate": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "classes::MeshCoordinateRange": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "classes::MeshCoordinateRangeSet": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "classes::MeshCoordinateValueProxy": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "classes::MeshDevice": "tt_metal/api/tt-metalium/mesh_device.hpp",
    "classes::MeshDeviceConfig": "tt_metal/api/tt-metalium/mesh_config.hpp",
    "classes::MeshDeviceView": "tt_metal/api/tt-metalium/mesh_device_view.hpp",
    "classes::MeshEvent": "tt_metal/api/tt-metalium/mesh_event.hpp",
    "classes::MeshGraph": "tt_metal/api/tt-metalium/mesh_graph.hpp",
    "classes::MeshShape": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "classes::MeshSocket": "tt_metal/api/tt-metalium/mesh_socket.hpp",
    "classes::MeshToTensor": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "classes::MeshWorkload": "tt_metal/api/tt-metalium/mesh_workload.hpp",
    "classes::MetalContext": "tt_metal/impl/context/metal_context.hpp",
    "classes::MultiDeviceHostStorage": "ttnn/api/ttnn/tensor/storage.hpp",
    "classes::MuxKernel": "tt_metal/impl/dispatch/kernel_config/mux.hpp",
    "classes::NotImplemented": "ttnn/api/ttnn/operation.hpp",
    "classes::OLP": "tt_metal/hw/inc/wormhole/noc/noc_overlay_parameters.hpp",
    "classes::PageConfig": "ttnn/api/ttnn/tensor/layout/page_config.hpp",
    "classes::PrefetchKernel": "tt_metal/impl/dispatch/kernel_config/prefetch.hpp",
    "classes::ProcessorHooks": "ttnn/api/ttnn/graph/graph_processor.hpp",
    "classes::ProfilerOptionalMetadata": "tt_metal/api/tt-metalium/profiler_optional_metadata.hpp",
    "classes::Program": "tt_metal/api/tt-metalium/program.hpp",
    "classes::ProgramImpl": "tt_metal/impl/program/program_impl.hpp",
    "classes::RelayMux": "tt_metal/impl/dispatch/kernel_config/relay_mux.hpp",
    "classes::Request": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "classes::RoutingTableGenerator": "tt_metal/api/tt-metalium/routing_table_generator.hpp",
    "classes::RowMajorPageConfig": "ttnn/api/ttnn/tensor/layout/page_config.hpp",
    "classes::ScopedDevices": "tt_metal/api/tt-metalium/mesh_device.hpp",
    "classes::ScopedGraphCapture": "ttnn/api/ttnn/graph/graph_processor.hpp",
    "classes::Semaphore": "tt_metal/api/tt-metalium/semaphore.hpp",
    "classes::Shape": "tt_metal/api/tt-metalium/shape.hpp",
    "classes::Shape2D": "tt_metal/api/tt-metalium/shape2d.hpp",
    "classes::ShapeBase": "tt_metal/api/tt-metalium/shape_base.hpp",
    "classes::SubDevice": "tt_metal/api/tt-metalium/sub_device.hpp",
    "classes::SubDeviceManager": "tt_metal/impl/sub_device/sub_device_manager.hpp",
    "classes::SubDeviceManagerTracker": "tt_metal/impl/sub_device/sub_device_manager_tracker.hpp",
    "classes::SystemMemoryManager": "tt_metal/impl/dispatch/system_memory_manager.hpp",
    "classes::SystemMesh": "tt_metal/api/tt-metalium/system_mesh.hpp",
    "classes::Tensor": "ttnn/api/ttnn/tensor/tensor.hpp",
    "classes::TensorAttributes": "ttnn/api/ttnn/tensor/tensor_attributes.hpp",
    "classes::TensorLayout": "ttnn/api/ttnn/tensor/layout/tensor_layout.hpp",
    "classes::TensorSpec": "ttnn/api/ttnn/tensor/tensor_spec.hpp",
    "classes::TensorToMesh": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "classes::TilePageConfig": "ttnn/api/ttnn/tensor/layout/page_config.hpp",
    "classes::Trace": "tt_metal/impl/trace/trace.hpp",
    "classes::WatcherDeviceReader": "tt_metal/impl/debug/watcher_device_reader.hpp",
    "classes::WorkerConfigBufferMgr": "tt_metal/impl/dispatch/worker_config_buffer.hpp",
    "classes::atomic_rwptr": "tt_metal/hw/inc/atomic_rwptr.h",
    "classes::bfloat16": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "classes::c_tensix_core": "tt_metal/hw/inc/wormhole/c_tensix_core.h",
    "classes::dispatch_core_manager": "tt_metal/impl/dispatch/dispatch_core_manager.hpp",
    "classes::tt_hlk_desc": "tt_metal/api/tt-metalium/hlk_desc.hpp",
    "constants::ALIGNMENT": "tt_metal/api/tt-metalium/program_cache.hpp",
    "constants::ARRAY_LEN": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "constants::AT_CMD_BUF": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::BASE_PARTIAL_PAGE_SIZE_DISPATCH": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::BFLOAT4_B_TILE_HW": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::BFLOAT8_B_TILE_HW": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::BRISC_AT_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::BRISC_RD_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::BRISC_WR_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::BRISC_WR_REG_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::CachedStallSequenceIdx": "tt_metal/impl/program/program_command_sequence.hpp",
    "constants::DEBUG_SANITIZE_NOC_SENTINEL_OK_16": "tt_metal/impl/debug/watcher_device_reader.hpp",
    "constants::DEBUG_SANITIZE_NOC_SENTINEL_OK_32": "tt_metal/impl/debug/watcher_device_reader.hpp",
    "constants::DEBUG_SANITIZE_NOC_SENTINEL_OK_64": "tt_metal/impl/debug/watcher_device_reader.hpp",
    "constants::DEBUG_SANITIZE_NOC_SENTINEL_OK_8": "tt_metal/impl/debug/watcher_device_reader.hpp",
    "constants::DEFAULT_ATOL": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::DEFAULT_NOC_VC": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::DEFAULT_NUM_SUB_DEVICES": "tt_metal/impl/device/device_impl.hpp",
    "constants::DEFAULT_PCC_THRESH": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::DEFAULT_PCT_MATCHED": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::DEFAULT_RECEIVER_FORWARDING_NOC": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::DEFAULT_RECEIVER_LOCAL_WRITE_NOC": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::DEFAULT_RTOL": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::DEFAULT_SENDER_ACK_NOC": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::DEVICES_PER_UMD_CHANNEL": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::DEVICE_STORAGE_TYPE": "ttnn/api/ttnn/types.hpp",
    "constants::DISPATCH_BUFFER_LOG_PAGE_SIZE": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::DISPATCH_BUFFER_SIZE_BLOCKS": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::DISPATCH_GO_SIGNAL_NOC_DATA_ENTRIES": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::DISPATCH_MESSAGES_MAX_OFFSET": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::DISPATCH_MESSAGE_ENTRIES": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::DISPATCH_S_BUFFER_LOG_PAGE_SIZE": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::DRAM_MEMORY_CONFIG": "ttnn/api/ttnn/types.hpp",
    "constants::DYNAMIC_NOC_BRISC_AT_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::DYNAMIC_NOC_BRISC_RD_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::DYNAMIC_NOC_BRISC_WR_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::DYNAMIC_NOC_BRISC_WR_REG_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::DYNAMIC_NOC_NCRISC_AT_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::DYNAMIC_NOC_NCRISC_RD_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::DYNAMIC_NOC_NCRISC_WR_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::DYNAMIC_NOC_NCRISC_WR_REG_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::DefaultQueueId": "ttnn/api/ttnn/common/queue_id.hpp",
    "constants::EVENT_PADDED_SIZE": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::FABRIC_HEADER_RB_ENTRIES": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::FACE_HEIGHT": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::FACE_HW": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::FACE_WIDTH": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::FIELD_MASK": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::FIELD_WIDTH": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::FORWARD_EAST": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::FORWARD_NORTH": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::FORWARD_ONLY": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::FORWARD_SOUTH": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::FORWARD_WEST": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::FP16B_MAN_PREC": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::FP16_MAN_PREC": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::FWD_ONLY_FIELD": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::GO_SIGNAL_BITS_PER_TXN_TYPE": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::HOP_DISTANCE_MASK": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::L1_BLOCK_SHARDED_MEMORY_CONFIG": "ttnn/api/ttnn/types.hpp",
    "constants::L1_HEIGHT_SHARDED_MEMORY_CONFIG": "ttnn/api/ttnn/types.hpp",
    "constants::L1_MEMORY_CONFIG": "ttnn/api/ttnn/types.hpp",
    "constants::L1_WIDTH_SHARDED_MEMORY_CONFIG": "ttnn/api/ttnn/types.hpp",
    "constants::LAST_CHIP_IN_MCAST_VAL": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::LAST_HOP_DISTANCE_VAL": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::LAST_MCAST_VAL": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::LF_MAN_PREC": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::LOG2_PROGRAM_PAGE_SIZE": "tt_metal/impl/dispatch/device_command.hpp",
    "constants::LOG_TRANSFER_PAGE_SIZE": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::MAX_DEV_CHANNEL_SIZE": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::MAX_DST_SIZE": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::MAX_EDM_NOC_VC": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::MAX_HUGEPAGE_SIZE": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::MAX_NUM_ENCODINGS": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::MAX_NUM_HW_CQS": "tt_metal/impl/dispatch/dispatch_core_manager.hpp",
    "constants::MAX_NUM_PACKS": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "constants::MAX_SIZE": "tt_metal/api/tt-metalium/program_cache.hpp",
    "constants::MAX_TILES_PER_PHASE": "tt_metal/hw/inc/risc_common.h",
    "constants::MEMCPY_ALIGNMENT": "tt_metal/api/tt-metalium/vector_aligned.hpp",
    "constants::MaxDMProcessorsPerCoreType": "tt_metal/hw/inc/wormhole/core_config.h",
    "constants::MaxProcessorsPerCoreType": "tt_metal/hw/inc/wormhole/core_config.h",
    "constants::NAN_BFLOAT16": "tt_metal/hw/inc/utils/bfloat16.h",
    "constants::NCRISC_AT_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::NCRISC_RD_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::NCRISC_WR_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::NCRISC_WR_REG_CMD_BUF": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::NEG_INF_BFLOAT16": "tt_metal/hw/inc/utils/bfloat16.h",
    "constants::NOC_ADDR_COORD_SHIFT": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::NOC_COORDINATE_MASK": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::NOC_RET_ADDR_COORDINATE": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::NOC_TARG_ADDR_COORDINATE": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::NOOP": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::NUM_BARRIER_TYPES": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::NUM_FACES_PER_TILE": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "constants::NUM_PROCESSORS_PER_CORE_TYPE": "tt_metal/hw/inc/dev_msgs.h",
    "constants::NUM_PROGRAMMABLE_CORE_TYPES": "tt_metal/hw/inc/dev_msgs.h",
    "constants::NUM_ROWS_PER_FACE": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "constants::NUM_ROWS_PER_TILE": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "constants::NUM_TRACE_EXECUTIONS": "ttnn/api/ttnn/graph/graph_query_op_runtime.hpp",
    "constants::NumDramDispatchClasses": "tt_metal/hw/inc/blackhole/core_config.h",
    "constants::NumEthDispatchClasses": "tt_metal/hw/inc/wormhole/core_config.h",
    "constants::NumHalProgrammableCoreTypes": "tt_metal/api/tt-metalium/hal_types.hpp",
    "constants::NumTensixDispatchClasses": "tt_metal/hw/inc/wormhole/core_config.h",
    "constants::OPERAND_START_STREAM": "tt_metal/hw/inc/wormhole/stream_io_map.h",
    "constants::POS_INF_BFLOAT16": "tt_metal/hw/inc/utils/bfloat16.h",
    "constants::PRECISION": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "constants::PREFETCH_D_BUFFER_BLOCKS": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::PREFETCH_D_BUFFER_LOG_PAGE_SIZE": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::PREFETCH_Q_LOG_MINSIZE": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::PROFILER_NOC_ALIGNMENT_PAD_COUNT": "tt_metal/hw/inc/dev_msgs.h",
    "constants::PROFILER_RISC_COUNT": "tt_metal/hw/inc/dev_msgs.h",
    "constants::PROGRAM_PAGE_SIZE": "tt_metal/impl/dispatch/device_command.hpp",
    "constants::RANGE_HOPS_FIELD_BIT_WIDTH": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::RANGE_MASK": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::RD_CMD_BUF": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::ROW_MAJOR_LAYOUT": "ttnn/api/ttnn/types.hpp",
    "constants::RUN_MSG_DONE": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_MSG_GO": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_MSG_INIT": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_MSG_RESET_READ_PTR": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_MSG_RESET_READ_PTR_FROM_HOST": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_SYNC_MSG_ALL_GO": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_SYNC_MSG_ALL_SUBORDINATES_DONE": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_SYNC_MSG_DONE": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_SYNC_MSG_GO": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_SYNC_MSG_INIT": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_SYNC_MSG_INIT_SYNC_REGISTERS": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_SYNC_MSG_LOAD": "tt_metal/hw/inc/dev_msgs.h",
    "constants::RUN_SYNC_MSG_WAITING_FOR_RESET": "tt_metal/hw/inc/dev_msgs.h",
    "constants::SIZEOF": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "constants::SMALL_VECTOR_SIZE": "tt_metal/api/tt-metalium/small_vector.hpp",
    "constants::START_DISTANCE_FIELD_BIT_WIDTH": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::TILE_HEIGHT": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::TILE_HW": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::TILE_LAYOUT": "ttnn/api/ttnn/types.hpp",
    "constants::TILE_SIZE": "ttnn/api/ttnn/types.hpp",
    "constants::TILE_WIDTH": "tt_metal/api/tt-metalium/constants.hpp",
    "constants::TRANSFER_PAGE_SIZE": "tt_metal/impl/dispatch/dispatch_settings.hpp",
    "constants::TT_ARCH_MAX_NOC_WRITE_ALIGNMENT": "tt_metal/hw/inc/dev_msgs.h",
    "constants::USE_FAST_DISPATCH": "ttnn/api/ttnn/device_operation.hpp",
    "constants::UncachedStallSequenceIdx": "tt_metal/impl/program/program_command_sequence.hpp",
    "constants::UnidentifiedZoneDetails": "tt_metal/impl/profiler/profiler.hpp",
    "constants::WIDTH": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "constants::WRITE_AND_FORWARD": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::WRITE_AND_FORWARD_EW": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::WRITE_AND_FORWARD_NS": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::WRITE_ONLY": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::WR_CMD_BUF": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::WR_ONLY_FIELD": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::WR_REG_CMD_BUF": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::_cResult": "tt_metal/hw/inc/wormhole/eth_l1_address_map.h",
    "constants::aligned_log_base_2_of_page_size": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "constants::aligned_page_size": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "constants::allocator_scheme_": "tt_metal/api/tt-metalium/device.hpp",
    "constants::always_false": "tt_metal/hw/inc/socket_api.h",
    "constants::arch": "ttnn/api/ttnn/operation.hpp",
    "constants::attribute_names": "ttnn/api/ttnn/global_semaphore.hpp",
    "constants::cb_addr_shift": "tt_metal/hw/inc/circular_buffer.h",
    "constants::code_sz": "tt_metal/hw/inc/debug/dprint.h",
    "constants::command_completion_region_size": "tt_metal/impl/dispatch/system_memory_cq_interface.hpp",
    "constants::command_issue_region_size": "tt_metal/impl/dispatch/system_memory_cq_interface.hpp",
    "constants::compile_time_args_skip": "tt_metal/hw/inc/accessor/sharded_accessor.h",
    "constants::compute_flat_input_index": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "constants::core_to_kernel_group_invalid_index": "tt_metal/impl/program/program_impl.hpp",
    "constants::cq_start": "tt_metal/impl/dispatch/system_memory_cq_interface.hpp",
    "constants::curr_payload_size": "tt_metal/hw/inc/debug/dprint.h",
    "constants::data_source": "tt_metal/impl/profiler/profiler.hpp",
    "constants::datum_shift": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "constants::default_cmd_buf": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "constants::default_firmware_context_switch_interval": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::default_high_vc_distance": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "constants::default_issue_queue_split": "tt_metal/impl/dispatch/system_memory_cq_interface.hpp",
    "constants::default_iterations_between_ctx_switch_and_teardown_checks": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::default_mesh_packet_payload_size_bytes": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::default_noc_mode": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "constants::default_packet_payload_size_bytes": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::dm0": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::dm1": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "constants::dtype_of_v": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "constants::enable_fabric_counters": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::enable_fabric_pkt_header_recording": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::enable_unpack_to_dest": "compute_kernel_api/bcast.h",
    "constants::exp_shift": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "constants::id": "tt_metal/impl/dispatch/system_memory_cq_interface.hpp",
    "constants::inner_blk_size": "tt_metal/impl/dispatch/memcpy.hpp",
    "constants::inner_loop": "tt_metal/impl/dispatch/memcpy.hpp",
    "constants::is_emulated": "tt_metal/hw/inc/wormhole/c_tensix_core.h",
    "constants::is_mesh_device_operation_adapter_v": "ttnn/api/ttnn/mesh_device_operation_adapter.hpp",
    "constants::is_multicast": "tt_metal/impl/program/program_command_sequence.hpp",
    "constants::is_pow_2": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "constants::is_primitive": "ttnn/api/ttnn/decorators.hpp",
    "constants::is_sender": "tt_metal/hw/inc/circular_buffer_init.h",
    "constants::is_supported_dtype_v": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "constants::kAddress": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kArguments": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kConnections": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kCoreRangeSet": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kCounter": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kDeviceId": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kGloballyAllocated": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kInputs": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kLayout": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kName": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeBuffer": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeBufferAllocate": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeBufferDeallocate": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeCBAllocate": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeCBDeallocateAll": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeCaptureEnd": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeCaptureStart": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeFunctionEnd": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeFunctionStart": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeTensor": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNodeType": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kNumCores": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kPageSize": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kParams": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kShape": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kSize": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kTensorId": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::kType": "ttnn/api/ttnn/graph/graph_consts.hpp",
    "constants::k_dispatch_downstream_noc": "tt_metal/impl/dispatch/topology.hpp",
    "constants::kernel_compile_time_args": "tt_metal/hw/inc/compile_time_args.h",
    "constants::l1_small_size": "tt_metal/api/tt-metalium/host_api.hpp",
    "constants::launch_msg_buffer_num_entries": "tt_metal/hw/inc/dev_msgs.h",
    "constants::level_str": "tt_metal/api/tt-metalium/logger.hpp",
    "constants::level_style": "tt_metal/api/tt-metalium/logger.hpp",
    "constants::log2_page_size": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "constants::log_base_2_of_allocator_alignment": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "constants::max_nodes_in_mesh_": "tt_metal/api/tt-metalium/routing_table_generator.hpp",
    "constants::max_num_meshes_": "tt_metal/api/tt-metalium/routing_table_generator.hpp",
    "constants::max_runtime_args": "tt_metal/api/tt-metalium/kernel.hpp",
    "constants::mem_mailbox_end": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "constants::multicast_path_reserve": "tt_metal/hw/inc/dataflow_api.h",
    "constants::n_alloc_table_buckets": "tt_metal/impl/allocator/algorithms/free_list_opt.hpp",
    "constants::n_alloc_table_init_bucket_size": "tt_metal/impl/allocator/algorithms/free_list_opt.hpp",
    "constants::n_uword_bits": "tt_metal/hw/inc/mod_div_lib.h",
    "constants::namespace_substring": "ttnn/api/ttnn/decorators.hpp",
    "constants::no_stride": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "constants::noc_cmd_field": "tt_metal/hw/inc/dataflow_api.h",
    "constants::noc_index": "tt_metal/hw/inc/dataflow_api_common.h",
    "constants::noc_mode": "tt_metal/hw/inc/dataflow_api_common.h",
    "constants::noc_size_x": "tt_metal/hw/inc/wormhole/core_config.h",
    "constants::noc_size_y": "tt_metal/hw/inc/wormhole/core_config.h",
    "constants::non_posted": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "constants::num_banks": "tt_metal/hw/inc/accessor/detail.h",
    "constants::num_hw_cqs": "tt_metal/api/tt-metalium/host_api.hpp",
    "constants::num_pages_per_bank": "tt_metal/impl/buffers/dispatch.hpp",
    "constants::num_virtual_channels": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "constants::num_waypoint_bytes_per_riscv": "tt_metal/hw/inc/dev_msgs.h",
    "constants::offset": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "constants::offset_idx": "tt_metal/impl/dispatch/device_command.hpp",
    "constants::old_infra_device_operation": "ttnn/api/ttnn/old_infra_device_operation.hpp",
    "constants::old_infra_device_operation_with_optional_output_tensors": "ttnn/api/ttnn/old_infra_device_operation.hpp",
    "constants::operation": "ttnn/api/ttnn/decorators.hpp",
    "constants::operator": "tt_metal/api/tt-metalium/core_coord.hpp",
    "constants::packed_xy_coords": "tt_metal/hw/inc/accessor/detail.h",
    "constants::pad_value": "ttnn/api/ttnn/run_operation.hpp",
    "constants::page_size": "tt_metal/hw/inc/accessor/sharded_accessor.h",
    "constants::posted": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "constants::program_factory": "ttnn/api/ttnn/operation_concepts.hpp",
    "constants::rank": "tt_metal/hw/inc/accessor/detail.h",
    "constants::read_cmd_buf": "tt_metal/hw/inc/dataflow_cmd_bufs.h",
    "constants::receiver_channel_counters_l1_size": "tt_metal/api/tt-metalium/edm_fabric_counters.hpp",
    "constants::row_wise": "tt_metal/api/tt-metalium/core_coord.hpp",
    "constants::sameSize": "ttnn/api/ttnn/tensor/layout/alignment.hpp",
    "constants::sender_channel_counters_l1_size": "tt_metal/api/tt-metalium/edm_fabric_counters.hpp",
    "constants::shard_grid": "tt_metal/hw/inc/accessor/detail.h",
    "constants::shard_grid_strides": "tt_metal/hw/inc/accessor/detail.h",
    "constants::shard_shape": "tt_metal/hw/inc/accessor/detail.h",
    "constants::shard_strides": "tt_metal/hw/inc/accessor/detail.h",
    "constants::shard_volume": "tt_metal/hw/inc/accessor/detail.h",
    "constants::size": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "constants::size_bytes": "tt_metal/api/tt-metalium/host_buffer.hpp",
    "constants::size_segregated_base": "tt_metal/impl/allocator/algorithms/free_list_opt.hpp",
    "constants::src_info_stylized": "tt_metal/api/tt-metalium/logger.hpp",
    "constants::stack_usage_pattern": "tt_metal/hw/inc/debug/stack_usage.h",
    "constants::state": "tt_metal/impl/profiler/profiler.hpp",
    "constants::strides": "tt_metal/hw/inc/accessor/detail.h",
    "constants::sz_sz": "tt_metal/hw/inc/debug/dprint.h",
    "constants::tensix_harvest_axis": "tt_metal/hw/inc/wormhole/core_config.h",
    "constants::tensor_shape": "tt_metal/hw/inc/accessor/detail.h",
    "constants::tensor_strides": "tt_metal/hw/inc/accessor/detail.h",
    "constants::tensor_volume": "tt_metal/hw/inc/accessor/detail.h",
    "constants::trace_region_size": "tt_metal/api/tt-metalium/host_api.hpp",
    "constants::transpose": "compute_kernel_api/matmul.h",
    "constants::type_str": "tt_metal/api/tt-metalium/logger.hpp",
    "constants::type_style": "tt_metal/api/tt-metalium/logger.hpp",
    "constants::use_styles": "tt_metal/api/tt-metalium/logger.hpp",
    "constants::value": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "constants::vc": "tt_metal/hw/inc/dataflow_api.h",
    "constants::volume": "tt_metal/hw/inc/accessor/detail.h",
    "constants::worker_l1_size": "tt_metal/api/tt-metalium/host_api.hpp",
    "constants::write_at_cmd_buf": "tt_metal/hw/inc/dataflow_cmd_bufs.h",
    "constants::write_cmd_buf": "tt_metal/hw/inc/dataflow_cmd_bufs.h",
    "constants::write_reg_cmd_buf": "tt_metal/hw/inc/dataflow_cmd_bufs.h",
    "enums::ARCH": "tt_metal/impl/profiler/profiler.hpp",
    "enums::AddressableCoreType": "tt_metal/hw/inc/dev_msgs.h",
    "enums::AllocCoreType": "tt_metal/api/tt-metalium/allocator_types.hpp",
    "enums::AllocationStatus": "tt_metal/api/tt-metalium/buffer.hpp",
    "enums::BoardType": "tt_metal/api/tt-metalium/metal_soc_descriptor.h",
    "enums::BufferType": "tt_metal/impl/allocator/bank_manager.hpp",
    "enums::ChipSendType": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "enums::CommandQueueDeviceAddrType": "tt_metal/impl/dispatch/dispatch_mem_map.hpp",
    "enums::CommandQueueHostAddrType": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "enums::CoreType": "tt_metal/impl/buffers/dispatch.hpp",
    "enums::DType": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "enums::DataFormat": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "enums::DataMovementProcessor": "tt_metal/api/tt-metalium/kernel.hpp",
    "enums::DataType": "ttnn/api/ttnn/tensor/types.hpp",
    "enums::DispatchCoreAxis": "tt_metal/api/tt-metalium/dispatch_core_common.hpp",
    "enums::DispatchCoreType": "tt_metal/api/tt-metalium/dispatch_core_common.hpp",
    "enums::DispatchWorkerType": "tt_metal/impl/dispatch/topology.hpp",
    "enums::DramProcessorTypes": "tt_metal/hw/inc/blackhole/core_config.h",
    "enums::EDMStatus": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "enums::EnqueueCommandType": "tt_metal/impl/dispatch/host_runtime_commands.hpp",
    "enums::Eth": "tt_metal/api/tt-metalium/data_types.hpp",
    "enums::EthProcessorTypes": "tt_metal/hw/inc/wormhole/core_config.h",
    "enums::ExecutionStatus": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "enums::ExpPrecision": "tt_metal/api/tt-metalium/data_format.hpp",
    "enums::FDKernelType": "tt_metal/impl/dispatch/kernel_config/fd_kernel.hpp",
    "enums::FabricConfig": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "enums::FabricEriscDatamoverType": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "enums::FabricType": "tt_metal/api/tt-metalium/mesh_graph.hpp",
    "enums::HalDramMemAddrType": "tt_metal/api/tt-metalium/hal_types.hpp",
    "enums::HalL1MemAddrType": "tt_metal/api/tt-metalium/hal_types.hpp",
    "enums::HalMemType": "tt_metal/api/tt-metalium/hal_types.hpp",
    "enums::HalProcessorClassType": "tt_metal/api/tt-metalium/hal_types.hpp",
    "enums::HalProgrammableCoreType": "tt_metal/api/tt-metalium/hal_types.hpp",
    "enums::HalTensixHarvestAxis": "tt_metal/api/tt-metalium/hal_types.hpp",
    "enums::KernelBuildOptLevel": "tt_metal/api/tt-metalium/kernel_types.hpp",
    "enums::Layout": "ttnn/api/ttnn/tensor/enum_types.hpp",
    "enums::Level": "tt_metal/api/tt-metalium/logger.hpp",
    "enums::LogType": "tt_metal/api/tt-metalium/logger.hpp",
    "enums::MathFidelity": "tt_metal/api/tt-metalium/base_types.hpp",
    "enums::MemoryAllocator": "tt_metal/api/tt-metalium/allocator_types.hpp",
    "enums::MeshBufferLayout": "tt_metal/api/tt-metalium/mesh_buffer.hpp",
    "enums::NOC": "tt_metal/impl/dispatch/host_runtime_commands.hpp",
    "enums::NOC_MODE": "tt_metal/api/tt-metalium/data_types.hpp",
    "enums::NocBarrierType": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "enums::NocSendType": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "enums::ProfilerDataBufferSource": "tt_metal/api/tt-metalium/profiler_types.hpp",
    "enums::ProfilerDumpState": "tt_metal/api/tt-metalium/profiler_types.hpp",
    "enums::ProfilerSyncState": "tt_metal/api/tt-metalium/profiler_types.hpp",
    "enums::ProgramBinaryStatus": "tt_metal/impl/program/dispatch.hpp",
    "enums::ProgrammableCoreType": "tt_metal/hw/inc/wormhole/core_config.h",
    "enums::RISCV": "tt_metal/api/tt-metalium/tt_backend_api_types.hpp",
    "enums::ReduceOp": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "enums::RoutingDirection": "tt_metal/api/tt-metalium/mesh_graph.hpp",
    "enums::RunMode": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "enums::SearchPolicy": "tt_metal/impl/allocator/algorithms/free_list_opt.hpp",
    "enums::SendStatus": "tt_metal/api/tt-metalium/fabric_edm_types.hpp",
    "enums::ShardMode": "tt_metal/api/tt-metalium/buffer_types.hpp",
    "enums::ShardOrientation": "tt_metal/api/tt-metalium/buffer_types.hpp",
    "enums::SourceType": "tt_metal/api/tt-metalium/kernel.hpp",
    "enums::StorageType": "ttnn/api/ttnn/tensor/types.hpp",
    "enums::SyncCBConfigRegion": "tt_metal/hw/inc/dev_msgs.h",
    "enums::TensixProcessorTypes": "tt_metal/hw/inc/wormhole/core_config.h",
    "enums::TensorLayoutType": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "enums::TensorMemoryLayout": "tt_metal/impl/buffers/dispatch.hpp",
    "enums::TensorPrintProfile": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "enums::TerminationSignal": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "enums::Topology": "tt_metal/api/tt-metalium/fabric_edm_types.hpp",
    "enums::UnpackToDestMode": "tt_metal/api/tt-metalium/base_types.hpp",
    "enums::cmd_code": "tt_metal/hw/inc/cmd_defs.h",
    "enums::cnt_id_t": "tt_metal/hw/inc/wormhole/tensix.h",
    "enums::data_collector_t": "tt_metal/impl/dispatch/data_collection.hpp",
    "enums::debug_assert_type_t": "tt_metal/hw/inc/dev_msgs.h",
    "enums::debug_sanitize_noc_return_code_enum": "tt_metal/hw/inc/dev_msgs.h",
    "enums::debug_transaction_type_t": "tt_metal/hw/inc/dev_msgs.h",
    "enums::dispatch_core_processor_classes": "tt_metal/hw/inc/dev_msgs.h",
    "enums::dispatch_core_processor_masks": "tt_metal/hw/inc/dev_msgs.h",
    "enums::dispatch_enable_flags": "tt_metal/hw/inc/dev_msgs.h",
    "enums::dispatch_mode": "tt_metal/hw/inc/dev_msgs.h",
    "enums::eth_chan_directions": "tt_metal/api/tt-metalium/fabric_host_interface.h",
    "enums::eth_chan_magic_values": "tt_metal/api/tt-metalium/fabric_host_interface.h",
    "enums::eth_mailbox_e": "tt_metal/hw/inc/blackhole/eth_fw_api.h",
    "enums::math_fidelity_t": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "enums::noc_index": "tt_metal/hw/inc/dev_msgs.h",
    "enums::noc_mode": "tt_metal/hw/inc/dev_msgs.h",
    "enums::packet_session_command": "tt_metal/api/tt-metalium/fabric_host_interface.h",
    "enums::relu_mode_t": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "enums::riscv_id_t": "tt_metal/hw/inc/dev_msgs.h",
    "enums::stochastic_round_settings_t": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "enums::tdma_mover_id_t": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "enums::watcher_enable_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "enums::xmov_direction_t": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "functions::AdaptedCachedMeshWorkload": "tt_metal/api/tt-metalium/program_cache.hpp",
    "functions::AddKernel": "tt_metal/impl/program/program_impl.hpp",
    "functions::AddProgramToMeshWorkload": "tt_metal/api/tt-metalium/distributed.hpp",
    "functions::Algorithm": "tt_metal/impl/allocator/algorithms/allocator_algorithm.hpp",
    "functions::Allocator": "tt_metal/api/tt-metalium/allocator.hpp",
    "functions::AnyBuffer": "tt_metal/api/tt-metalium/mesh_buffer.hpp",
    "functions::AssignGlobalBufferToProgram": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::BF16": "tt_metal/hw/inc/debug/dprint.h",
    "functions::BankManager": "tt_metal/impl/allocator/bank_manager.hpp",
    "functions::BeginTraceCapture": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::BinaryOperationParams": "tt_metal/hw/inc/blackhole/cmd_params.h",
    "functions::Block": "tt_metal/impl/allocator/algorithms/free_list.hpp",
    "functions::Buffer": "tt_metal/api/tt-metalium/buffer.hpp",
    "functions::BufferDistributionSpec": "tt_metal/api/tt-metalium/buffer_distribution_spec.hpp",
    "functions::BufferRegion": "tt_metal/api/tt-metalium/buffer.hpp",
    "functions::Builder": "tt_metal/api/tt-metalium/circular_buffer_config.hpp",
    "functions::CachedMeshWorkload": "tt_metal/api/tt-metalium/program_cache.hpp",
    "functions::CachedProgram": "tt_metal/api/tt-metalium/program_cache.hpp",
    "functions::CachedProgramFactory": "tt_metal/api/tt-metalium/program_cache.hpp",
    "functions::CaptureBufferCreate": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureBufferDeallocate": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureBufferDelete": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureCreateCircularBuffer": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureCreateKernel": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureEnqueueProgram": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureEnqueueReadBuffer": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureEnqueueTrace": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureEnqueueWriteBuffer": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureFinish": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureLightMetalCompare": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureLoadTrace": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureProgramConstructor": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureReleaseTrace": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureReplayTrace": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureSetRuntimeArgs": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureSetRuntimeArgsUint32": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CaptureSetRuntimeArgsUint32VecPerCore": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::CircularBuffer": "tt_metal/api/tt-metalium/circular_buffer.hpp",
    "functions::CircularBufferAllocator": "tt_metal/impl/program/program_impl.hpp",
    "functions::CircularBufferConfig": "tt_metal/api/tt-metalium/circular_buffer_config.hpp",
    "functions::ClearNocData": "tt_metal/impl/debug/noc_logging.hpp",
    "functions::ClearProfilerControlBuffer": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::CloseDevice": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::CloseDevices": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::Command": "tt_metal/impl/dispatch/host_runtime_commands.hpp",
    "functions::CompileProgram": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::Config": "ttnn/api/ttnn/config.hpp",
    "functions::ConfigureDeviceWithProgram": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::ConstIterator": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::ControlPlane": "tt_metal/api/tt-metalium/control_plane.hpp",
    "functions::CoreGrid": "ttnn/api/ttnn/types.hpp",
    "functions::CoreIDs": "ttnn/api/ttnn/core.hpp",
    "functions::CoreIterator": "tt_metal/api/tt-metalium/core_coord.hpp",
    "functions::CoreRange": "tt_metal/api/tt-metalium/core_coord.hpp",
    "functions::CoreRangeSet": "tt_metal/api/tt-metalium/core_coord.hpp",
    "functions::CreateBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::CreateCircularBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::CreateDevices": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::CreateGlobalCircularBuffer": "tt_metal/api/tt-metalium/global_circular_buffer.hpp",
    "functions::CreateGlobalSemaphore": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::CreateKernel": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::CreateKernelFromString": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::CreateMeshWorkload": "tt_metal/api/tt-metalium/distributed.hpp",
    "functions::CreateProgram": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::CreateSemaphore": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::DPrintServerClearLogFile": "tt_metal/impl/debug/dprint_server.hpp",
    "functions::DPrintServerClearSignals": "tt_metal/impl/debug/dprint_server.hpp",
    "functions::DPrintServerHangDetected": "tt_metal/impl/debug/dprint_server.hpp",
    "functions::DPrintServerReadsDispatchCores": "tt_metal/impl/debug/dprint_server.hpp",
    "functions::DeallocateBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::DebugPrintStrLen": "tt_metal/hw/inc/debug/dprint.h",
    "functions::DebugPrintTypeToId": "tt_metal/hw/inc/debug/dprint.h",
    "functions::DebugPrintTypeToSize": "tt_metal/hw/inc/debug/dprint.h",
    "functions::DebugPrinter": "tt_metal/hw/inc/debug/dprint.h",
    "functions::DemuxKernel": "tt_metal/impl/dispatch/kernel_config/demux.hpp",
    "functions::Device": "tt_metal/impl/device/device_impl.hpp",
    "functions::DeviceCommand": "tt_metal/impl/dispatch/device_command.hpp",
    "functions::DeviceOperation": "ttnn/api/ttnn/operation.hpp",
    "functions::DevicePool": "tt_metal/api/tt-metalium/device_pool.hpp",
    "functions::DeviceProfiler": "tt_metal/impl/profiler/profiler.hpp",
    "functions::DeviceStorage": "ttnn/api/ttnn/tensor/storage.hpp",
    "functions::DisableMemoryReports": "tt_metal/api/tt-metalium/memory_reporter.hpp",
    "functions::DisablePersistentKernelCache": "tt_metal/api/tt-metalium/persistent_kernel_cache.hpp",
    "functions::DispatchCoreConfig": "tt_metal/api/tt-metalium/dispatch_core_common.hpp",
    "functions::DispatchKernel": "tt_metal/impl/dispatch/kernel_config/dispatch.hpp",
    "functions::DispatchMemMap": "tt_metal/impl/dispatch/dispatch_mem_map.hpp",
    "functions::DispatchQueryManager": "tt_metal/impl/dispatch/dispatch_query_manager.hpp",
    "functions::DispatchSKernel": "tt_metal/impl/dispatch/kernel_config/dispatch_s.hpp",
    "functions::DispatchStateCheck": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::DistributedHostBuffer": "tt_metal/api/tt-metalium/distributed_host_buffer.hpp",
    "functions::DprintServerAttach": "tt_metal/impl/debug/dprint_server.hpp",
    "functions::DprintServerAwait": "tt_metal/impl/debug/dprint_server.hpp",
    "functions::DprintServerDetach": "tt_metal/impl/debug/dprint_server.hpp",
    "functions::DprintServerIsRunning": "tt_metal/impl/debug/dprint_server.hpp",
    "functions::DprintServerSetMute": "tt_metal/impl/debug/dprint_server.hpp",
    "functions::DprintServerSetProfilerState": "tt_metal/impl/debug/dprint_server.hpp",
    "functions::DumpDeviceMemoryState": "tt_metal/api/tt-metalium/memory_reporter.hpp",
    "functions::DumpDeviceProfileResults": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::DumpMeshDeviceProfileResults": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::DumpNocData": "tt_metal/impl/debug/noc_logging.hpp",
    "functions::EdmFabricReceiverChannelCounters": "tt_metal/api/tt-metalium/edm_fabric_counters.hpp",
    "functions::EnableMemoryReports": "tt_metal/api/tt-metalium/memory_reporter.hpp",
    "functions::EnablePersistentKernelCache": "tt_metal/api/tt-metalium/persistent_kernel_cache.hpp",
    "functions::EncodePerDeviceProgramID": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::EndTraceCapture": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::EnqueueMeshWorkload": "tt_metal/api/tt-metalium/distributed.hpp",
    "functions::EnqueueProgram": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::EnqueueProgramCommand": "tt_metal/impl/dispatch/host_runtime_commands.hpp",
    "functions::EnqueueReadBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::EnqueueReadMeshBuffer": "tt_metal/api/tt-metalium/distributed.hpp",
    "functions::EnqueueReadSubBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::EnqueueRecordEvent": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::EnqueueRecordEventToHost": "tt_metal/api/tt-metalium/distributed.hpp",
    "functions::EnqueueTerminateCommand": "tt_metal/impl/dispatch/host_runtime_commands.hpp",
    "functions::EnqueueTrace": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::EnqueueWaitForEvent": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::EnqueueWriteBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::EnqueueWriteMeshBuffer": "tt_metal/api/tt-metalium/distributed.hpp",
    "functions::EnqueueWriteSubBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::EthRouterKernel": "tt_metal/impl/dispatch/kernel_config/eth_router.hpp",
    "functions::EthTunnelerKernel": "tt_metal/impl/dispatch/kernel_config/eth_tunneler.hpp",
    "functions::EventQuery": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::EventSynchronize": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::F32": "tt_metal/hw/inc/debug/dprint.h",
    "functions::FDKernel": "tt_metal/impl/dispatch/kernel_config/fd_kernel.hpp",
    "functions::FabricEriscDatamoverBuilder": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "functions::FabricEriscDatamoverConfig": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "functions::FabricNodeId": "tt_metal/api/tt-metalium/routing_table_generator.hpp",
    "functions::FabricRiscConfig": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "functions::Finish": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::FreeList": "tt_metal/impl/allocator/algorithms/free_list.hpp",
    "functions::FreeListOpt": "tt_metal/impl/allocator/algorithms/free_list_opt.hpp",
    "functions::FreshProfilerDeviceLog": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::GetAllCores": "tt_metal/impl/debug/debug_helpers.hpp",
    "functions::GetCircularBuffer": "tt_metal/impl/program/program_impl.hpp",
    "functions::GetDispatchCores": "tt_metal/impl/debug/debug_helpers.hpp",
    "functions::GetDprintBufAddr": "tt_metal/impl/debug/debug_helpers.hpp",
    "functions::GetKernel": "tt_metal/api/tt-metalium/program.hpp",
    "functions::GetMemoryView": "tt_metal/api/tt-metalium/memory_reporter.hpp",
    "functions::GetNumAvailableDevices": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::GetNumPCIeDevices": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::GetNumRiscs": "tt_metal/impl/debug/debug_helpers.hpp",
    "functions::GetPCIeDeviceID": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::GetPreferredNOCForDRAMRead": "tt_metal/api/tt-metalium/util.hpp",
    "functions::GetPreferredNOCForDRAMWrite": "tt_metal/api/tt-metalium/util.hpp",
    "functions::GlobalCircularBuffer": "tt_metal/api/tt-metalium/global_circular_buffer.hpp",
    "functions::GlobalControlPlane": "tt_metal/api/tt-metalium/control_plane.hpp",
    "functions::GlobalSemaphore": "tt_metal/api/tt-metalium/global_semaphore.hpp",
    "functions::GraphArgumentSerializer": "ttnn/api/ttnn/graph/graph_argument_serializer.hpp",
    "functions::GraphProcessor": "ttnn/api/ttnn/graph/graph_processor.hpp",
    "functions::GraphTracker": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "functions::HWCommandQueue": "tt_metal/impl/dispatch/hardware_command_queue.hpp",
    "functions::HostBuffer": "tt_metal/api/tt-metalium/host_buffer.hpp",
    "functions::HostStorage": "ttnn/api/ttnn/tensor/storage.hpp",
    "functions::IDevice": "tt_metal/api/tt-metalium/device.hpp",
    "functions::IGraphHooks": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "functions::IGraphProcessor": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "functions::InitDeviceProfiler": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::InitializeFabricConfig": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::IsGalaxyCluster": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::Iterator": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::Kernel": "tt_metal/api/tt-metalium/kernel.hpp",
    "functions::KernelGroup": "tt_metal/impl/program/program_impl.hpp",
    "functions::KernelSource": "tt_metal/api/tt-metalium/kernel.hpp",
    "functions::L1BankingAllocator": "tt_metal/impl/allocator/l1_banking_allocator.hpp",
    "functions::LaunchProgram": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::LightMetalBeginCapture": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::LightMetalBinary": "tt_metal/api/tt-metalium/lightmetal_binary.hpp",
    "functions::LightMetalCaptureContext": "tt_metal/impl/lightmetal/lightmetal_capture.hpp",
    "functions::LightMetalCompareToCapture": "tt_metal/api/tt-metalium/lightmetal_capture_utils.hpp",
    "functions::LightMetalCompareToGolden": "tt_metal/api/tt-metalium/lightmetal_capture_utils.hpp",
    "functions::LightMetalEndCapture": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::LightMetalReplay": "tt_metal/api/tt-metalium/lightmetal_replay.hpp",
    "functions::LightMetalReplayImpl": "tt_metal/impl/lightmetal/lightmetal_replay_impl.hpp",
    "functions::LoadTrace": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::Logger": "tt_metal/api/tt-metalium/logger.hpp",
    "functions::MemoryConfig": "ttnn/api/ttnn/tensor/types.hpp",
    "functions::MemoryPin": "tt_metal/api/tt-metalium/memory_pin.hpp",
    "functions::MemoryReporter": "tt_metal/api/tt-metalium/memory_reporter.hpp",
    "functions::MeshBuffer": "tt_metal/api/tt-metalium/mesh_buffer.hpp",
    "functions::MeshCommandQueue": "tt_metal/api/tt-metalium/mesh_command_queue.hpp",
    "functions::MeshContainer": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::MeshCoordinate": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::MeshCoordinateRange": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::MeshCoordinateRangeSet": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::MeshCoordinateValueProxy": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::MeshDevice": "tt_metal/api/tt-metalium/mesh_device.hpp",
    "functions::MeshDeviceConfig": "tt_metal/api/tt-metalium/mesh_config.hpp",
    "functions::MeshDeviceView": "tt_metal/api/tt-metalium/mesh_device_view.hpp",
    "functions::MeshEvent": "tt_metal/api/tt-metalium/mesh_event.hpp",
    "functions::MeshGraph": "tt_metal/api/tt-metalium/mesh_graph.hpp",
    "functions::MeshShape": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::MeshSocket": "tt_metal/api/tt-metalium/mesh_socket.hpp",
    "functions::MeshWorkload": "tt_metal/api/tt-metalium/mesh_workload.hpp",
    "functions::MetalContext": "tt_metal/impl/context/metal_context.hpp",
    "functions::MultiDeviceGlobalSemaphore": "ttnn/api/ttnn/global_semaphore.hpp",
    "functions::MultiDeviceHostStorage": "ttnn/api/ttnn/tensor/storage.hpp",
    "functions::MuxKernel": "tt_metal/impl/dispatch/kernel_config/mux.hpp",
    "functions::NOC1_X_ID": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::NOC1_Y_ID": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::NOC_CFG_READ_REG": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::NOC_CMD_BUF_READ_REG": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::NOC_CMD_BUF_WRITE_REG": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::NOC_STATUS_READ_REG": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::NocUnicastAtomicIncCommandHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "functions::NocUnicastAtomicIncFusedCommandHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "functions::NopClrOperationParams": "tt_metal/hw/inc/blackhole/cmd_params.h",
    "functions::NotImplemented": "ttnn/api/ttnn/operation.hpp",
    "functions::OLP": "tt_metal/hw/inc/wormhole/noc/noc_overlay_parameters.hpp",
    "functions::OStreamJoin": "tt_metal/api/tt-metalium/assert.hpp",
    "functions::OpPerformanceModelGeneral": "ttnn/api/ttnn/operation.hpp",
    "functions::PACK": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::PackParams": "tt_metal/hw/inc/blackhole/cmd_params.h",
    "functions::PageConfig": "ttnn/api/ttnn/tensor/layout/page_config.hpp",
    "functions::PrefetchKernel": "tt_metal/impl/dispatch/kernel_config/prefetch.hpp",
    "functions::Private": "tt_metal/api/tt-metalium/buffer.hpp",
    "functions::ProcessorHooks": "ttnn/api/ttnn/graph/graph_processor.hpp",
    "functions::ProfilerOptionalMetadata": "tt_metal/api/tt-metalium/profiler_optional_metadata.hpp",
    "functions::ProfilerSync": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::Program": "tt_metal/api/tt-metalium/program.hpp",
    "functions::ProgramImpl": "tt_metal/impl/program/program_impl.hpp",
    "functions::RAISE": "tt_metal/hw/inc/debug/dprint.h",
    "functions::READ_REG": "tt_metal/hw/inc/risc_common.h",
    "functions::RISC_POST_HEARTBEAT": "tt_metal/hw/inc/dataflow_api.h",
    "functions::RISC_POST_STATUS": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::ReadBufferDescriptor": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::ReadEventDescriptor": "tt_metal/impl/event/dispatch.hpp",
    "functions::ReadFromBuffer": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::ReadFromDeviceDRAMChannel": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::ReadFromDeviceL1": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::ReadRegFromDevice": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::ReadShard": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::ReaderDataMovementConfig": "tt_metal/api/tt-metalium/kernel_types.hpp",
    "functions::RecordDispatchData": "tt_metal/impl/dispatch/data_collection.hpp",
    "functions::RecordKernelGroups": "tt_metal/impl/dispatch/data_collection.hpp",
    "functions::RecordProgramRun": "tt_metal/impl/dispatch/data_collection.hpp",
    "functions::RelayMux": "tt_metal/impl/dispatch/kernel_config/relay_mux.hpp",
    "functions::ReleaseTrace": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::ReplayTrace": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::ReplicateTensor": "ttnn/api/ttnn/distributed/distributed_tensor_config.hpp",
    "functions::RoutingTableGenerator": "tt_metal/api/tt-metalium/routing_table_generator.hpp",
    "functions::RowMajorPageConfig": "ttnn/api/ttnn/tensor/layout/page_config.hpp",
    "functions::SETPRECISION": "tt_metal/hw/inc/debug/dprint.h",
    "functions::SETW": "tt_metal/hw/inc/debug/dprint.h",
    "functions::ScopedDevices": "tt_metal/api/tt-metalium/mesh_device.hpp",
    "functions::ScopedGraphCapture": "ttnn/api/ttnn/graph/graph_processor.hpp",
    "functions::Semaphore": "tt_metal/api/tt-metalium/semaphore.hpp",
    "functions::SetCommonRuntimeArgs": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::SetDeviceProfilerDir": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::SetRuntimeArgs": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::Shape2D": "tt_metal/api/tt-metalium/shape2d.hpp",
    "functions::ShapeBase": "tt_metal/api/tt-metalium/shape_base.hpp",
    "functions::ShardSpec": "tt_metal/api/tt-metalium/buffer.hpp",
    "functions::ShardSpecBuffer": "tt_metal/api/tt-metalium/buffer.hpp",
    "functions::ShardTensor": "ttnn/api/ttnn/distributed/distributed_tensor_config.hpp",
    "functions::ShardTensor2D": "ttnn/api/ttnn/distributed/distributed_tensor_config.hpp",
    "functions::SizeBytesPerBank": "tt_metal/api/tt-metalium/util.hpp",
    "functions::StreamBinaryParams": "tt_metal/hw/inc/blackhole/cmd_params.h",
    "functions::StreamConvParams": "tt_metal/hw/inc/blackhole/cmd_params.h",
    "functions::StreamPoolParams": "tt_metal/hw/inc/blackhole/cmd_params.h",
    "functions::StreamUnaryBinaryCommonParams": "tt_metal/hw/inc/blackhole/cmd_params.h",
    "functions::SubDevice": "tt_metal/api/tt-metalium/sub_device.hpp",
    "functions::SubDeviceManager": "tt_metal/impl/sub_device/sub_device_manager.hpp",
    "functions::SubDeviceManagerTracker": "tt_metal/impl/sub_device/sub_device_manager_tracker.hpp",
    "functions::Synchronize": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::SystemMemoryCQInterface": "tt_metal/impl/dispatch/system_memory_cq_interface.hpp",
    "functions::SystemMemoryManager": "tt_metal/impl/dispatch/system_memory_manager.hpp",
    "functions::SystemMesh": "tt_metal/api/tt-metalium/system_mesh.hpp",
    "functions::TYPED_U32_ARRAY": "tt_metal/hw/inc/debug/dprint.h",
    "functions::TensAddr": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::Tensor": "ttnn/api/ttnn/tensor/tensor.hpp",
    "functions::TensorAttributes": "ttnn/api/ttnn/tensor/tensor_attributes.hpp",
    "functions::TensorLayout": "ttnn/api/ttnn/tensor/layout/tensor_layout.hpp",
    "functions::TensorSpec": "ttnn/api/ttnn/tensor/tensor_spec.hpp",
    "functions::Tile": "tt_metal/api/tt-metalium/tile.hpp",
    "functions::TileDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "functions::TileHeader": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "functions::TileHeader_u": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "functions::TilePageConfig": "ttnn/api/ttnn/tensor/layout/page_config.hpp",
    "functions::TileSize": "tt_metal/api/tt-metalium/util.hpp",
    "functions::TileSlice": "tt_metal/hw/inc/debug/dprint_tile.h",
    "functions::Trace": "tt_metal/impl/trace/trace.hpp",
    "functions::TraceBuffer": "tt_metal/impl/trace/trace_buffer.hpp",
    "functions::TraceDispatchMetadata": "tt_metal/impl/trace/dispatch.hpp",
    "functions::TraceScope": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "functions::U32": "tt_metal/hw/inc/debug/dprint.h",
    "functions::U32_ARRAY": "tt_metal/hw/inc/debug/dprint.h",
    "functions::UnaryOperationParams": "tt_metal/hw/inc/blackhole/cmd_params.h",
    "functions::UpdateCircularBufferPageSize": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::UpdateCircularBufferTotalSize": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::UpdateDynamicCircularBufferAddress": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::UpdateDynamicCircularBufferAddressAndTotalSize": "tt_metal/api/tt-metalium/host_api.hpp",
    "functions::ValidateCircularBufferRegion": "tt_metal/impl/program/program_impl.hpp",
    "functions::WAIT": "tt_metal/hw/inc/debug/dprint.h",
    "functions::WRITE_REG": "tt_metal/hw/inc/risc_common.h",
    "functions::WaitProgramDone": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::WatcherDeviceReader": "tt_metal/impl/debug/watcher_device_reader.hpp",
    "functions::WorkerConfigBufferMgr": "tt_metal/impl/dispatch/worker_config_buffer.hpp",
    "functions::WorkerXY": "tt_metal/api/tt-metalium/fabric_edm_types.hpp",
    "functions::WriteRegToDevice": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::WriteRuntimeArgsToDevice": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::WriteShard": "tt_metal/api/tt-metalium/distributed.hpp",
    "functions::WriteToBuffer": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::WriteToDeviceDRAMChannel": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::WriteToDeviceL1": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "functions::WriterDataMovementConfig": "tt_metal/api/tt-metalium/kernel_types.hpp",
    "functions::abs_tile": "compute_kernel_api.h",
    "functions::abs_tile_init": "compute_kernel_api.h",
    "functions::abs_tile_int32": "compute_kernel_api.h",
    "functions::acos_tile": "compute_kernel_api.h",
    "functions::acos_tile_init": "compute_kernel_api.h",
    "functions::acquire_dst": "compute_kernel_api/reg_api.h",
    "functions::add_bank_offset_to_address": "tt_metal/impl/device/dispatch.hpp",
    "functions::add_bcast_cols_init_short": "compute_kernel_api/bcast.h",
    "functions::add_bcast_rows_init_short": "compute_kernel_api/bcast.h",
    "functions::add_bcast_scalar_init_short": "compute_kernel_api/bcast.h",
    "functions::add_binary_tile": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::add_binary_tile_init": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::add_dispatch_write_host": "tt_metal/impl/dispatch/device_command.hpp",
    "functions::add_dispatch_write_linear": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "functions::add_dispatch_write_packed": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "functions::add_dispatch_write_paged": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "functions::add_int32_tile": "compute_kernel_api/add_int32_sfpu.h",
    "functions::add_int32_tile_init": "compute_kernel_api/add_int32_sfpu.h",
    "functions::add_tiles": "compute_kernel_api/eltwise_binary.h",
    "functions::add_tiles_bcast": "compute_kernel_api/bcast.h",
    "functions::add_tiles_bcast_cols": "compute_kernel_api/bcast.h",
    "functions::add_tiles_bcast_rows": "compute_kernel_api/bcast.h",
    "functions::add_tiles_bcast_scalar": "compute_kernel_api/bcast.h",
    "functions::add_tiles_init": "compute_kernel_api/eltwise_binary.h",
    "functions::add_uint16_tile": "compute_kernel_api/add_uint16_sfpu.h",
    "functions::add_uint16_tile_init": "compute_kernel_api/add_uint16_sfpu.h",
    "functions::add_uint32_tile": "compute_kernel_api/add_uint32_sfpu.h",
    "functions::add_uint32_tile_init": "compute_kernel_api/add_uint32_sfpu.h",
    "functions::add_unary_tile": "compute_kernel_api/eltwise_unary/binop_with_scalar.h",
    "functions::aggregate_as_tensor": "ttnn/api/ttnn/distributed/api.hpp",
    "functions::aggregate_tensor": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "functions::align": "tt_metal/hw/inc/utils/utils.h",
    "functions::align_local_cbs_to_remote_cb": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::align_power_of_2": "tt_metal/hw/inc/utils/utils.h",
    "functions::all_reduce": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "functions::all_tensors_have_uniform_storage": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "functions::allocate_buffer_on_device": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::allocate_mesh_buffer_on_device": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::allocate_tensor_on_mesh": "ttnn/api/ttnn/tensor/tensor.hpp",
    "functions::alt_complex_rotate90_tile": "compute_kernel_api.h",
    "functions::alt_complex_rotate90_tile_init": "compute_kernel_api.h",
    "functions::any_tiles_bcast": "compute_kernel_api/bcast.h",
    "functions::append_fabric_connection_rt_args": "tt_metal/api/tt-metalium/fabric.hpp",
    "functions::append_worker_to_fabric_edm_sender_rt_args": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "functions::apply": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::apply_override_runtime_arguments": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "functions::are_pages_larger_than_max_prefetch_cmd_size": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::asin_tile": "compute_kernel_api.h",
    "functions::asin_tile_init": "compute_kernel_api.h",
    "functions::assemble_device_commands": "tt_metal/impl/program/program_impl.hpp",
    "functions::assemble_fabric_mux_client_config_args": "tt_metal/impl/dispatch/kernel_config/relay_mux.hpp",
    "functions::assert_and_hang": "tt_metal/hw/inc/debug/assert.h",
    "functions::assert_check": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::assert_just_ncrisc_reset": "tt_metal/hw/inc/risc_common.h",
    "functions::assert_operation_in_correct_namespace": "ttnn/api/ttnn/decorators.hpp",
    "functions::assert_trisc_reset": "tt_metal/hw/inc/risc_common.h",
    "functions::assign_local_cb_to_socket": "tt_metal/hw/inc/socket_api.h",
    "functions::atan_tile": "compute_kernel_api.h",
    "functions::atan_tile_init": "compute_kernel_api.h",
    "functions::atomic_rwptr": "tt_metal/hw/inc/atomic_rwptr.h",
    "functions::backtrace": "tt_metal/api/tt-metalium/assert.hpp",
    "functions::backtrace_to_string": "tt_metal/api/tt-metalium/assert.hpp",
    "functions::base_name": "ttnn/api/ttnn/decorators.hpp",
    "functions::bfloat16": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::bfloat16_greater": "tt_metal/hw/inc/utils/bfloat16.h",
    "functions::bfloat16_identity_transform": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::binary_bitwise_tile_init": "compute_kernel_api/binary_bitwise_sfpu.h",
    "functions::binary_dest_reuse_tiles": "compute_kernel_api/eltwise_binary.h",
    "functions::binary_dest_reuse_tiles_init": "compute_kernel_api/eltwise_binary.h",
    "functions::binary_left_shift_tile": "compute_kernel_api/binary_shift.h",
    "functions::binary_max_int32_tile": "compute_kernel_api/binary_max_min.h",
    "functions::binary_max_tile": "compute_kernel_api/binary_max_min.h",
    "functions::binary_max_tile_init": "compute_kernel_api/binary_max_min.h",
    "functions::binary_min_int32_tile": "compute_kernel_api/binary_max_min.h",
    "functions::binary_min_tile": "compute_kernel_api/binary_max_min.h",
    "functions::binary_min_tile_init": "compute_kernel_api/binary_max_min.h",
    "functions::binary_op_init_common": "compute_kernel_api/eltwise_binary.h",
    "functions::binary_right_shift_tile": "compute_kernel_api/binary_shift.h",
    "functions::binary_shift_tile_init": "compute_kernel_api/binary_shift.h",
    "functions::binary_tiles_init": "compute_kernel_api/eltwise_binary.h",
    "functions::binop_with_scalar_tile_init": "compute_kernel_api/eltwise_unary/binop_with_scalar.h",
    "functions::bitmask": "tt_metal/hw/inc/wormhole/tensix.h",
    "functions::bitwise_and_binary_tile": "compute_kernel_api/binary_bitwise_sfpu.h",
    "functions::bitwise_and_tile": "compute_kernel_api/eltwise_unary/bitwise_and.h",
    "functions::bitwise_and_tile_init": "compute_kernel_api/eltwise_unary/bitwise_and.h",
    "functions::bitwise_and_uint16_binary_tile": "compute_kernel_api/binary_bitwise_sfpu.h",
    "functions::bitwise_not_tile": "compute_kernel_api/eltwise_unary/bitwise_not.h",
    "functions::bitwise_not_tile_init": "compute_kernel_api/eltwise_unary/bitwise_not.h",
    "functions::bitwise_or_binary_tile": "compute_kernel_api/binary_bitwise_sfpu.h",
    "functions::bitwise_or_tile": "compute_kernel_api/eltwise_unary/bitwise_or.h",
    "functions::bitwise_or_tile_init": "compute_kernel_api/eltwise_unary/bitwise_or.h",
    "functions::bitwise_or_uint16_binary_tile": "compute_kernel_api/binary_bitwise_sfpu.h",
    "functions::bitwise_xor_binary_tile": "compute_kernel_api/binary_bitwise_sfpu.h",
    "functions::bitwise_xor_tile": "compute_kernel_api/eltwise_unary/bitwise_xor.h",
    "functions::bitwise_xor_tile_init": "compute_kernel_api/eltwise_unary/bitwise_xor.h",
    "functions::bitwise_xor_uint16_binary_tile": "compute_kernel_api/binary_bitwise_sfpu.h",
    "functions::breakpoint_clear": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_clear_condition_loop": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_clear_condition_op": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_clear_condition_other_thread": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_data": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_resume_execution": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_set": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_set_condition_loop": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_set_condition_op": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_set_condition_other_thread": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_set_data": "tt_metal/hw/inc/tensix_functions.h",
    "functions::breakpoint_status": "tt_metal/hw/inc/tensix_functions.h",
    "functions::buf_ptr_dec_wrap": "tt_metal/hw/inc/risc_common.h",
    "functions::buf_ptr_inc_wrap": "tt_metal/hw/inc/risc_common.h",
    "functions::buffer": "tt_metal/api/tt-metalium/lightmetal_binary.hpp",
    "functions::calculate_dispatch_addr": "tt_metal/hw/inc/firmware_common.h",
    "functions::calculate_max_prefetch_data_size_bytes": "tt_metal/impl/device/dispatch.hpp",
    "functions::calculate_partial_page_spec": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::capture_op_trace": "ttnn/api/ttnn/graph/graph_query_op_runtime.hpp",
    "functions::cast_vec": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::cb_get_tile": "compute_kernel_api/cb_api.h",
    "functions::cb_pages_available_at_front": "tt_metal/hw/inc/dataflow_api.h",
    "functions::cb_pages_reservable_at_back": "tt_metal/hw/inc/dataflow_api.h",
    "functions::cb_pop_front": "compute_kernel_api/cb_api.h",
    "functions::cb_push_back": "compute_kernel_api/cb_api.h",
    "functions::cb_release_tile": "compute_kernel_api/cb_api.h",
    "functions::cb_reserve_back": "compute_kernel_api/cb_api.h",
    "functions::cb_wait_front": "compute_kernel_api/cb_api.h",
    "functions::ceil_tile": "compute_kernel_api/eltwise_unary/rounding.h",
    "functions::ceil_tile_float32": "compute_kernel_api/eltwise_unary/rounding.h",
    "functions::check_and_context_switch": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::check_consistent_format_across_buffers": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::check_dummy_phase": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::check_same_format_across_buffers": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::check_valid_formats_in_out_data_formats": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::chunk": "ttnn/api/ttnn/tensor/xtensor/partition.hpp",
    "functions::chunk_ndim": "ttnn/api/ttnn/tensor/xtensor/partition.hpp",
    "functions::class_name": "ttnn/api/ttnn/decorators.hpp",
    "functions::clear_compute_special_value_flags": "compute_kernel_api.h",
    "functions::clear_previous_launch_message_entry_for_watcher": "tt_metal/hw/inc/debug/watcher_common.h",
    "functions::clobber_all_memory": "tt_metal/hw/inc/tensix_functions.h",
    "functions::close_device": "ttnn/api/ttnn/device.hpp",
    "functions::close_mesh_device": "ttnn/api/ttnn/distributed/api.hpp",
    "functions::compute_buffer_size": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::compute_flat_indices": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::compute_interleaved_trace_buf_page_size": "tt_metal/impl/trace/dispatch.hpp",
    "functions::compute_program_hash": "ttnn/api/ttnn/device_operation.hpp",
    "functions::compute_shard_division_spec": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::compute_strided_view": "ttnn/api/ttnn/tensor/xtensor/partition.hpp",
    "functions::compute_strides": "tt_metal/api/tt-metalium/shape.hpp",
    "functions::compute_trace_cmd_size": "tt_metal/impl/trace/dispatch.hpp",
    "functions::concat": "ttnn/api/ttnn/tensor/xtensor/partition.hpp",
    "functions::concat_mesh_to_tensor_composer": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "functions::configure_crta_offsets_for_kernel_groups": "tt_metal/impl/program/dispatch.hpp",
    "functions::configure_csr": "tt_metal/hw/inc/firmware_common.h",
    "functions::configure_dispatch_cores": "tt_metal/impl/dispatch/topology.hpp",
    "functions::configure_fabric_cores": "tt_metal/impl/dispatch/topology.hpp",
    "functions::configure_gathering": "tt_metal/hw/inc/firmware_common.h",
    "functions::configure_l1_data_cache": "tt_metal/hw/inc/firmware_common.h",
    "functions::configure_rta_offsets_for_kernel_groups": "tt_metal/impl/program/dispatch.hpp",
    "functions::convert_bfp_to_u32": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "functions::convert_layout": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::convert_layout_row_major_to_tile": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::convert_layout_tile_nfaces_to_tile_swizzled": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::convert_layout_tile_swizzled_to_tile_nfaces": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::convert_layout_tile_to_row_major": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::convert_to_data_type": "ttnn/api/ttnn/tensor/types.hpp",
    "functions::convert_u32_to_bfp": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "functions::coord_t": "tt_metal/api/tt-metalium/fabric_edm_types.hpp",
    "functions::copy_block_matmul_partials": "compute_kernel_api/tile_move_copy.h",
    "functions::copy_completion_queue_data_into_user_space": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::copy_dest_values": "compute_kernel_api/copy_dest_values.h",
    "functions::copy_dest_values_init": "compute_kernel_api/copy_dest_values.h",
    "functions::copy_interleaved_buffer_to_completion_queue": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::copy_sharded_buffer_from_core_to_completion_queue": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::copy_tile": "compute_kernel_api/tile_move_copy.h",
    "functions::copy_tile_init": "compute_kernel_api/tile_move_copy.h",
    "functions::copy_tile_to_dst_init_short": "compute_kernel_api/tile_move_copy.h",
    "functions::copy_tile_to_dst_init_short_with_dt": "compute_kernel_api/tile_move_copy.h",
    "functions::copy_to_mesh_tensor": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::core_spec_from_flatbuffer": "tt_metal/impl/flatbuffer/program_types_from_flatbuffer.hpp",
    "functions::corerange_to_cores": "tt_metal/api/tt-metalium/core_coord.hpp",
    "functions::cos_tile": "compute_kernel_api/eltwise_unary/trigonometry.h",
    "functions::cos_tile_init": "compute_kernel_api/eltwise_unary/trigonometry.h",
    "functions::count_intermediate_and_output_tensors": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "functions::create_and_cache_mesh_workload": "ttnn/api/ttnn/device_operation.hpp",
    "functions::create_and_compile_cq_program": "tt_metal/impl/dispatch/topology.hpp",
    "functions::create_and_compile_fabric_program": "tt_metal/impl/dispatch/topology.hpp",
    "functions::create_arange_vector_of_bfloat16": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::create_constant_vector_of_bfloat16": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::create_constant_vector_of_bfp4": "tt_metal/api/tt-metalium/bfloat4.hpp",
    "functions::create_constant_vector_of_bfp8": "tt_metal/api/tt-metalium/bfloat8.hpp",
    "functions::create_device_tensor": "ttnn/api/ttnn/tensor/tensor.hpp",
    "functions::create_file": "tt_metal/api/tt-metalium/utils.hpp",
    "functions::create_global_circular_buffer": "ttnn/api/ttnn/global_circular_buffer.hpp",
    "functions::create_global_semaphore": "ttnn/api/ttnn/global_semaphore.hpp",
    "functions::create_global_semaphore_with_same_address": "ttnn/api/ttnn/global_semaphore.hpp",
    "functions::create_identity_matrix": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::create_mesh_composer": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "functions::create_mesh_mapper": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "functions::create_packed_bfp_packed_as_u32": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "functions::create_random_binary_vector_of_bfloat16": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::create_random_vector_of_bfloat16": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::create_random_vector_of_bfloat16_0_2": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::create_random_vector_of_bfloat16_1_1": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::create_random_vector_of_bfloat16_native": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::create_random_vector_of_bfp4": "tt_metal/api/tt-metalium/bfloat4.hpp",
    "functions::create_random_vector_of_bfp8": "tt_metal/api/tt-metalium/bfloat8.hpp",
    "functions::create_receiver_socket_interface": "tt_metal/hw/inc/socket_api.h",
    "functions::create_runtime_arg": "tt_metal/impl/flatbuffer/program_types_to_flatbuffer.hpp",
    "functions::create_sender_socket_interface": "tt_metal/hw/inc/socket_api.h",
    "functions::create_trace_node": "tt_metal/impl/program/dispatch.hpp",
    "functions::cumsum_tile": "compute_kernel_api/cumsum.h",
    "functions::cumsum_tile_init": "compute_kernel_api/cumsum.h",
    "functions::datatype_to_dataformat_converter": "ttnn/api/ttnn/tensor/types.hpp",
    "functions::datum_size": "tt_metal/api/tt-metalium/tt_backend_api_types.hpp",
    "functions::dbg_dump_array_disable": "tt_metal/hw/inc/tensix_functions.h",
    "functions::dbg_dump_array_enable": "tt_metal/hw/inc/tensix_functions.h",
    "functions::dbg_dump_array_rd_cmd": "tt_metal/hw/inc/tensix_functions.h",
    "functions::dbg_dump_array_to_l1": "tt_metal/hw/inc/tensix_functions.h",
    "functions::dbg_halt": "compute_kernel_api.h",
    "functions::dbg_instrn_buf_clear_override_en": "tt_metal/hw/inc/tensix_functions.h",
    "functions::dbg_instrn_buf_push_instrn": "tt_metal/hw/inc/tensix_functions.h",
    "functions::dbg_instrn_buf_set_override_en": "tt_metal/hw/inc/tensix_functions.h",
    "functions::dbg_instrn_buf_wait_for_ready": "tt_metal/hw/inc/tensix_functions.h",
    "functions::dbg_read_dest_acc_row": "compute_kernel_api.h",
    "functions::dbg_unhalt": "compute_kernel_api.h",
    "functions::deallocate_buffers": "ttnn/api/ttnn/device.hpp",
    "functions::deassert_all_reset": "tt_metal/hw/inc/risc_common.h",
    "functions::deassert_trisc_reset": "tt_metal/hw/inc/risc_common.h",
    "functions::debug_get_which_riscv": "tt_metal/hw/inc/debug/watcher_common.h",
    "functions::debug_insert_delay": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::debug_print": "tt_metal/hw/inc/debug/dprint.h",
    "functions::debug_sanitize_noc_addr": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::debug_sanitize_noc_and_worker_addr": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::debug_sanitize_post_noc_addr_and_hang": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::debug_throw_on_dram_addr": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::debug_valid_dram_addr": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::debug_valid_eth_addr": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::debug_valid_pcie_addr": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::debug_valid_reg_addr": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::debug_valid_worker_addr": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::decltype": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::decode_tensor_data": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::default_create_output_tensors": "ttnn/api/ttnn/operation.hpp",
    "functions::demangle": "tt_metal/api/tt-metalium/assert.hpp",
    "functions::dequant_tile": "compute_kernel_api/quantization.h",
    "functions::dequant_tile_init": "compute_kernel_api/quantization.h",
    "functions::disable_and_clear_program_cache": "ttnn/api/ttnn/device.hpp",
    "functions::disable_erisc_app": "tt_metal/hw/inc/debug/watcher_common.h",
    "functions::disable_relaxed_memory_ordering": "tt_metal/hw/inc/firmware_common.h",
    "functions::dispatch": "ttnn/api/ttnn/tensor/tensor_impl_wrapper.hpp",
    "functions::dispatch_core_manager": "tt_metal/impl/dispatch/dispatch_core_manager.hpp",
    "functions::dispatch_to_mesh_workload_factory": "ttnn/api/ttnn/device_operation.hpp",
    "functions::distribute_tensor": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "functions::div_binary_tile": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::div_binary_tile_init": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::div_unary_tile": "compute_kernel_api/eltwise_unary/binop_with_scalar.h",
    "functions::div_up": "tt_metal/api/tt-metalium/math.hpp",
    "functions::do_crt1": "tt_metal/hw/inc/firmware_common.h",
    "functions::dprint_array_with_data_type": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::dprint_data_format": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::dprint_tensix_alu_config": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_acc_ctrl_fp32_enabled": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_acc_ctrl_int8_math_enabled": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_acc_ctrl_sfpu_fp32_enabled": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_format_spec_reg0_srca": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_format_spec_reg0_srcaunsigned": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_format_spec_reg0_srcbunsigned": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_format_spec_reg1_srcb": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_format_spec_reg2_dstacc": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_rounding_mode_bfp8_hf": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_rounding_mode_fpu_srnd_en": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_rounding_mode_gasket_srnd_en": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_rounding_mode_gs_lf": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_rounding_mode_packer_srnd_en": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_alu_config_alu_rounding_mode_padding": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_dest_rd_ctrl": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_dest_reg": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::dprint_tensix_dest_reg_row_float16": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::dprint_tensix_dest_reg_row_float32": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::dprint_tensix_pack_config": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_add_l1_dest_addr_offset": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_add_tile_header_size": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_all_pack_disable_zero_compress_ovrd": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_auto_set_last_pacr_intf_sel": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_dis_shared_exp_assembler": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_disable_pack_zero_flag": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_downsample_mask": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_downsample_shift_count": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_enable_out_fifo": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_exp_section_size": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_exp_threshold": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_exp_threshold_en": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_helper": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_in_data_format": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_l1_acc_disable_pack_zero_flag": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_l1_dest_addr": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_l1_src_addr": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_out_data_format": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_pack_dis_y_pos_start_offset": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_pack_per_xy_plane": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_pack_start_intf_pos": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_read_mode": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_reserved_0": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_reserved_1": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_reserved_2": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_row_ptr_section_size": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_src_if_sel": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_sub_l1_tile_header_size": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_config_uncompressed": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_counters": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_counters_helper": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_counters_pack_per_xy_plane": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_counters_pack_per_xy_plane_offset": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_counters_pack_reads_per_xy_plane": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_counters_pack_xys_per_til": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_counters_pack_yz_transposed": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_dest_rd_ctrl_pck_dest_rd_ctrl_read_32b_data": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_dest_rd_ctrl_pck_dest_rd_ctrl_read_int8": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_dest_rd_ctrl_pck_dest_rd_ctrl_read_unsigned": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_dest_rd_ctrl_pck_dest_rd_ctrl_reserved": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_dest_rd_ctrl_pck_dest_rd_ctrl_round_10b_mant": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_edge_offset": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_edge_offset_helper": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_edge_offset_mask": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_edge_offset_mode": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_edge_offset_reserved": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_edge_offset_tile_row_set_select_pack0": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_edge_offset_tile_row_set_select_pack1": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_edge_offset_tile_row_set_select_pack2": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_edge_offset_tile_row_set_select_pack3": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config_alu_acc_ctrl_zero_flag_disabled_dst": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config_alu_acc_ctrl_zero_flag_disabled_src": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config_disable_risc_bp_disable_bmp_clear_main": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config_disable_risc_bp_disable_bmp_clear_ncrisc": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config_disable_risc_bp_disable_bmp_clear_trisc": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config_disable_risc_bp_disable_main": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config_disable_risc_bp_disable_ncrisc": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config_disable_risc_bp_disable_trisc": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config_stacc_relu_apply_relu": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_relu_config_stacc_relu_relu_threshold": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_strides_helper": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_strides_w_stride": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_strides_x_stride": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_strides_y_stride": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_pack_strides_z_stride": "tt_metal/hw/inc/debug/dprint_tensix_pack.h",
    "functions::dprint_tensix_struct_field": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::dprint_tensix_unpack_config": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_context_count": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_fifo_size": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_force_shared_exp": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_haloize_mode": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_helper": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_limit_addr": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_out_data_format": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_reserved_1": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_reserved_2": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_reserved_3": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_reserved_4": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_reserved_5": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_shift_amount": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_throttle_mode": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_tileize_mode": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_uncompress_cntx0_3": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_uncompress_cntx4_7": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_unpack_if_sel": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_unpack_if_sel_cntx0_3": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_unpack_if_sel_cntx4_7": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_unpack_src_reg_set_update": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_upsample_and_interlave": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_config_upsample_rate": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_blobs_per_xy_plane": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_blobs_y_start": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_digest_size": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_digest_type": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_helper": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_in_data_format": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_reserved_0": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_reserved_1": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_uncompressed": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_w_dim": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_x_dim": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_y_dim": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dprint_tensix_unpack_tile_descriptor_z_dim": "tt_metal/hw/inc/debug/dprint_tensix_unpack.h",
    "functions::dram_io_empty": "tt_metal/hw/inc/risc_common.h",
    "functions::dram_io_full": "tt_metal/hw/inc/risc_common.h",
    "functions::dram_io_incr_ptr": "tt_metal/hw/inc/risc_common.h",
    "functions::dram_io_local_empty": "tt_metal/hw/inc/risc_common.h",
    "functions::dropout_kernel_init": "compute_kernel_api/eltwise_unary/dropout.h",
    "functions::dropout_tile": "compute_kernel_api/eltwise_unary/dropout.h",
    "functions::dump_cqs": "tt_metal/impl/dispatch/debug_tools.hpp",
    "functions::dump_data_formats": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::dump_memory_config": "ttnn/api/ttnn/tensor/serialization.hpp",
    "functions::dump_stack_trace_on_segfault": "ttnn/api/ttnn/core.hpp",
    "functions::dump_tensor": "ttnn/api/ttnn/tensor/serialization.hpp",
    "functions::dump_tensor_flatbuffer": "ttnn/api/ttnn/tensor/serialization.hpp",
    "functions::dynamic_noc_init": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::dynamic_noc_local_barrier_init": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::dynamic_noc_local_state_init": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::element_size_bytes": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::elu_tile": "compute_kernel_api/eltwise_unary/elu.h",
    "functions::elu_tile_init": "compute_kernel_api/eltwise_unary/elu.h",
    "functions::enable_program_cache": "ttnn/api/ttnn/device.hpp",
    "functions::encode_tensor_data": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::enqueue_command": "tt_metal/impl/dispatch/hardware_command_queue.hpp",
    "functions::enqueue_mesh_workload": "ttnn/api/ttnn/device_operation.hpp",
    "functions::equal_within_absolute_tolerance": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::equal_within_n_sig_figs": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::eqz_tile": "compute_kernel_api.h",
    "functions::eqz_tile_init": "compute_kernel_api.h",
    "functions::eqz_tile_int32": "compute_kernel_api.h",
    "functions::erf_tile": "compute_kernel_api/eltwise_unary/erf_erfc.h",
    "functions::erf_tile_init": "compute_kernel_api/eltwise_unary/erf_erfc.h",
    "functions::erfc_tile": "compute_kernel_api/eltwise_unary/erf_erfc.h",
    "functions::erfc_tile_init": "compute_kernel_api/eltwise_unary/erf_erfc.h",
    "functions::erfinv_tile": "compute_kernel_api/eltwise_unary/erfinv.h",
    "functions::erfinv_tile_init": "compute_kernel_api/eltwise_unary/erfinv.h",
    "functions::eth_bytes_are_available_on_channel": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_clear_sender_channel_ack": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_is_receiver_channel_send_acked": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_is_receiver_channel_send_done": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_noc_async_read_barrier": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_noc_async_write_barrier": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_noc_semaphore_wait": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_noc_semaphore_wait_min": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_read_wall_clock": "tt_metal/hw/inc/ethernet/tt_eth_api.h",
    "functions::eth_receiver_acknowledge": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_receiver_channel_ack": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_receiver_channel_done": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_receiver_done": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_risc_reg_read": "tt_metal/hw/inc/ethernet/tt_eth_api.h",
    "functions::eth_risc_reg_write": "tt_metal/hw/inc/ethernet/tt_eth_api.h",
    "functions::eth_send_bytes": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_send_bytes_over_channel": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_send_bytes_over_channel_payload_only": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_send_bytes_over_channel_payload_only_unsafe": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_send_bytes_over_channel_payload_only_unsafe_one_packet": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_send_packet": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::eth_send_packet_byte_addr": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::eth_send_packet_bytes_unsafe": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::eth_send_packet_unsafe": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::eth_send_payload_complete_signal_over_channel": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_txq_is_busy": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::eth_txq_reg_read": "tt_metal/hw/inc/ethernet/tt_eth_api.h",
    "functions::eth_txq_reg_write": "tt_metal/hw/inc/ethernet/tt_eth_api.h",
    "functions::eth_wait_cycles": "tt_metal/hw/inc/ethernet/tt_eth_api.h",
    "functions::eth_wait_for_bytes": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_wait_for_bytes_on_channel": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_wait_for_bytes_on_channel_sync_addr": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_wait_for_receiver_channel_done": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_wait_for_receiver_done": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_wait_receiver_acknowledge": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_wait_receiver_done": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::eth_write_remote_reg": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::eth_write_remote_reg_no_txq_check": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::event_synchronize": "ttnn/api/ttnn/async_runtime.hpp",
    "functions::ex_clear_dvalid": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_encc": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_flush": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_instrn_rdcfg": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_instrn_wrcfg": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_mova2d": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_nop": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_pacr": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_push_insn": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_rmw_cfg": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_rmw_cfg_gpr": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_sem_init": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_setadc": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_setadcxy": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_setadczw": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_setc16": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_setpkedgof": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_stallwait": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_sync_kernel": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_upacr": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_xsearch": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_zeroacc": "tt_metal/hw/inc/tensix_functions.h",
    "functions::ex_zerosrc": "tt_metal/hw/inc/tensix_functions.h",
    "functions::execute_instruction": "tt_metal/hw/inc/tensix_functions.h",
    "functions::execute_kernel_loop": "tt_metal/hw/inc/tensix_functions.h",
    "functions::execute_kernel_sync": "tt_metal/hw/inc/tensix_functions.h",
    "functions::execute_time_and_release_trace": "ttnn/api/ttnn/graph/graph_query_op_runtime.hpp",
    "functions::exp2_tile": "compute_kernel_api.h",
    "functions::exp2_tile_init": "compute_kernel_api.h",
    "functions::exp_tile": "compute_kernel_api/eltwise_unary/exp.h",
    "functions::exp_tile_init": "compute_kernel_api/eltwise_unary/exp.h",
    "functions::expm1_tile": "compute_kernel_api.h",
    "functions::expm1_tile_init": "compute_kernel_api.h",
    "functions::extract_arguments": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "functions::extract_bit_array": "tt_metal/hw/inc/bit_utils.h",
    "functions::extract_calltrace": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "functions::extract_circular_buffers_peak_size_per_core": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "functions::extract_dst_noc_multicast_info": "tt_metal/impl/program/program_device_map.hpp",
    "functions::extract_l1_buffer_allocation_peak_size_per_core": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "functions::extract_l1_output_buffer_allocation_size_per_core": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "functions::extract_output_info": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "functions::extract_output_tensor": "ttnn/api/ttnn/graph/graph_query_op_constraints.hpp",
    "functions::extract_output_tensors": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "functions::extract_peak_L1_memory_usage": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "functions::extract_shard": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::extract_tensor_coordinates": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "functions::fabric_set_unicast_route": "tt_metal/hw/inc/socket_api.h",
    "functions::fabric_socket_notify_receiver": "tt_metal/hw/inc/socket_api.h",
    "functions::fabric_socket_notify_sender": "tt_metal/hw/inc/socket_api.h",
    "functions::fast_udiv_110": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_12": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_120": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_124": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_130": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_140": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_56": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_63": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_7": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_70": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_80": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fast_udiv_94": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::fill_tile": "compute_kernel_api/eltwise_unary/fill.h",
    "functions::fill_tile_bitcast": "compute_kernel_api/eltwise_unary/fill.h",
    "functions::fill_tile_init": "compute_kernel_api/eltwise_unary/fill.h",
    "functions::filter_tensor_shards": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "functions::finalize_cbs": "tt_metal/impl/program/dispatch.hpp",
    "functions::finalize_kernel_bins": "tt_metal/impl/program/dispatch.hpp",
    "functions::finalize_rt_args": "tt_metal/impl/program/dispatch.hpp",
    "functions::finalize_sems": "tt_metal/impl/program/dispatch.hpp",
    "functions::find_max_block_size": "tt_metal/api/tt-metalium/work_split.hpp",
    "functions::find_max_divisor": "tt_metal/api/tt-metalium/work_split.hpp",
    "functions::firmware_config_init": "tt_metal/hw/inc/firmware_common.h",
    "functions::floor_tile": "compute_kernel_api/eltwise_unary/rounding.h",
    "functions::floor_tile_float32": "compute_kernel_api/eltwise_unary/rounding.h",
    "functions::flush_erisc_icache": "tt_metal/hw/inc/risc_common.h",
    "functions::fmod_tile": "compute_kernel_api/eltwise_unary/fmod.h",
    "functions::fmod_tile_init": "compute_kernel_api/eltwise_unary/fmod.h",
    "functions::fold": "tt_metal/hw/inc/debug/waypoint.h",
    "functions::for": "tt_metal/hw/inc/debug/dprint_tile.h",
    "functions::from_borrowed_data": "ttnn/api/ttnn/tensor/tensor.hpp",
    "functions::from_flatbuffer": "tt_metal/impl/flatbuffer/program_types_from_flatbuffer.hpp",
    "functions::from_span": "ttnn/api/ttnn/tensor/tensor.hpp",
    "functions::from_vector": "ttnn/api/ttnn/tensor/tensor.hpp",
    "functions::from_xtensor": "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp",
    "functions::gcd_tile": "compute_kernel_api/gcd.h",
    "functions::gcd_tile_init": "compute_kernel_api/gcd.h",
    "functions::gelu_tile": "compute_kernel_api/eltwise_unary/gelu.h",
    "functions::gelu_tile_init": "compute_kernel_api/eltwise_unary/gelu.h",
    "functions::generate_buffer_page_mapping": "tt_metal/api/tt-metalium/buffer.hpp",
    "functions::generate_interleaved_buffer_read_descriptor": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::generate_sharded_buffer_read_descriptor": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::get": "ttnn/api/ttnn/config.hpp",
    "functions::getCmdSize": "tt_metal/hw/inc/cmd_defs.h",
    "functions::getDeviceProfilerState": "tt_metal/impl/profiler/profiler_state.hpp",
    "functions::get_absolute_cq_offset": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "functions::get_absolute_logical_x": "compute_kernel_api/common.h",
    "functions::get_absolute_logical_y": "compute_kernel_api/common.h",
    "functions::get_alias": "tt_metal/api/tt-metalium/tt_backend_api_types.hpp",
    "functions::get_allocator_alignment": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_arch": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_arch_from_string": "tt_metal/api/tt-metalium/tt_backend_api_types.hpp",
    "functions::get_arch_name": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_arg_addr": "compute_kernel_api/common.h",
    "functions::get_arg_val": "compute_kernel_api/common.h",
    "functions::get_as": "ttnn/api/ttnn/tensor/host_buffer/functions.hpp",
    "functions::get_bank_and_offset": "tt_metal/hw/inc/accessor/sharded_accessor.h",
    "functions::get_bank_index": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_bank_offset": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_bank_offset_index": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_batch_size": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::get_buffer_pages": "ttnn/api/ttnn/reports.hpp",
    "functions::get_buffers": "ttnn/api/ttnn/reports.hpp",
    "functions::get_byte": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "functions::get_common_arg_addr": "compute_kernel_api/common.h",
    "functions::get_common_arg_val": "compute_kernel_api/common.h",
    "functions::get_compute_special_value_flags": "compute_kernel_api.h",
    "functions::get_compute_special_value_flags_fpu": "compute_kernel_api.h",
    "functions::get_compute_special_value_flags_sfpu": "compute_kernel_api.h",
    "functions::get_core_coord_from_relative": "tt_metal/api/tt-metalium/core_coord.hpp",
    "functions::get_core_type": "tt_metal/hw/inc/debug/sanitize_noc.h",
    "functions::get_core_type_name": "tt_metal/impl/debug/debug_helpers.hpp",
    "functions::get_cores_for_sharded_buffer": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::get_cq_completion_rd_ptr": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "functions::get_cq_completion_wr_ptr": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "functions::get_cq_issue_rd_ptr": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "functions::get_cq_issue_wr_ptr": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "functions::get_ct_arg": "tt_metal/hw/inc/compile_time_args.h",
    "functions::get_data_exp_precision": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::get_dataformat": "tt_metal/hw/inc/dataflow_api.h",
    "functions::get_datum": "tt_metal/hw/inc/debug/dprint_tile.h",
    "functions::get_dest_row_id": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::get_device_info": "ttnn/api/ttnn/reports.hpp",
    "functions::get_device_local_kernel_handle": "tt_metal/impl/program/dispatch.hpp",
    "functions::get_device_tensors": "ttnn/api/ttnn/distributed/api.hpp",
    "functions::get_dispatch_class": "tt_metal/hw/inc/debug/stack_usage.h",
    "functions::get_dispatch_core_config": "tt_metal/api/tt-metalium/dispatch_core_common.hpp",
    "functions::get_dispatch_core_type": "tt_metal/api/tt-metalium/dispatch_core_common.hpp",
    "functions::get_distributed_tensor_config": "ttnn/api/ttnn/distributed/distributed_tensor_config.hpp",
    "functions::get_dram_alignment": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_dram_noc_addr": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_epoch_table_x": "tt_metal/hw/inc/wormhole/risc_chip_specific.h",
    "functions::get_epoch_table_y": "tt_metal/hw/inc/wormhole/risc_chip_specific.h",
    "functions::get_eps": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_erisc_l1_unreserved_base": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_erisc_l1_unreserved_size": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_exp_dword": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "functions::get_exp_precison": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::get_fork_num_msgs_in_block": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::get_fork_scatter_inner_loop_count": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::get_global_semaphore_address": "ttnn/api/ttnn/global_semaphore.hpp",
    "functions::get_host_buffer": "ttnn/api/ttnn/tensor/host_buffer/functions.hpp",
    "functions::get_inf": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_interleaved_addr_gen": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_l1_alignment": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_l1_noc_addr": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_l1_size": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_log_base2_of_allocator_alignment": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_max_cores_divisible_by_tiles_per_core_tiles": "tt_metal/api/tt-metalium/work_split.hpp",
    "functions::get_max_exp": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "functions::get_max_worker_l1_unreserved_size": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_max_write_packed_sub_cmds": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "functions::get_memory_config": "ttnn/api/ttnn/core.hpp",
    "functions::get_nan": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_noc_addr_from_bank_id": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_noc_counter_address": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::get_noc_counter_val": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::get_noc_xy": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_num_hops": "tt_metal/impl/dispatch/kernel_config/relay_mux.hpp",
    "functions::get_operand_stream_id": "tt_metal/hw/inc/wormhole/stream_io_map.h",
    "functions::get_operation_name": "ttnn/api/ttnn/device_operation.hpp",
    "functions::get_pack_dst_formats": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::get_pack_src_formats": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::get_pcie_alignment": "tt_metal/api/tt-metalium/hal.hpp",
    "functions::get_profiler_artifacts_dir": "tt_metal/impl/profiler/profiler_paths.hpp",
    "functions::get_profiler_logs_dir": "tt_metal/impl/profiler/profiler_paths.hpp",
    "functions::get_programmable_core_type": "tt_metal/impl/debug/debug_helpers.hpp",
    "functions::get_read_ptr": "tt_metal/hw/inc/dataflow_api.h",
    "functions::get_relative_cq_offset": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "functions::get_relative_logical_x": "compute_kernel_api/common.h",
    "functions::get_relative_logical_y": "compute_kernel_api/common.h",
    "functions::get_remapped_row_id": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::get_runtime_args_for_edm_termination_infos": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "functions::get_semaphore": "tt_metal/hw/inc/dataflow_api.h",
    "functions::get_shape_from_xarray": "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp",
    "functions::get_single_pack_src_format": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::get_storage_core_bank_size": "tt_metal/api/tt-metalium/core_descriptor.hpp",
    "functions::get_string": "tt_metal/api/tt-metalium/tt_backend_api_types.hpp",
    "functions::get_string_lowercase": "tt_metal/api/tt-metalium/tt_backend_api_types.hpp",
    "functions::get_swizzled_row_id": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::get_system_memory_noc_addr": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "functions::get_t3k_physical_device_ids_ring": "ttnn/api/ttnn/distributed/api.hpp",
    "functions::get_tile_hw": "tt_metal/hw/inc/dataflow_api.h",
    "functions::get_tile_num_faces": "tt_metal/hw/inc/dataflow_api.h",
    "functions::get_tile_size": "tt_metal/hw/inc/dataflow_api.h",
    "functions::get_tt_fabric_channel_buffer_size_bytes": "tt_metal/api/tt-metalium/fabric.hpp",
    "functions::get_umd_channel": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "functions::get_unpack_dst_formats": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::get_unpack_src_formats": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::get_watcher_exception_message": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::get_write_ptr": "tt_metal/hw/inc/dataflow_api.h",
    "functions::gez_tile": "compute_kernel_api.h",
    "functions::gez_tile_init": "compute_kernel_api.h",
    "functions::gez_tile_int32": "compute_kernel_api.h",
    "functions::graph_demangle": "ttnn/api/ttnn/graph/graph_argument_serializer.hpp",
    "functions::grid_to_cores": "tt_metal/api/tt-metalium/core_coord.hpp",
    "functions::grid_to_cores_with_noop": "tt_metal/api/tt-metalium/core_coord.hpp",
    "functions::gtz_tile": "compute_kernel_api.h",
    "functions::gtz_tile_init": "compute_kernel_api.h",
    "functions::gtz_tile_int32": "compute_kernel_api.h",
    "functions::hal_programmable_core_type_from_core_type": "tt_metal/api/tt-metalium/util.hpp",
    "functions::handle_mesh_adapter_cache_hit": "ttnn/api/ttnn/device_operation.hpp",
    "functions::has_storage_type_of": "ttnn/api/ttnn/core.hpp",
    "functions::hash_combine": "tt_metal/api/tt-metalium/utils.hpp",
    "functions::hash_hlk_args": "tt_metal/api/tt-metalium/hlk_desc.hpp",
    "functions::hash_operation": "ttnn/api/ttnn/operation.hpp",
    "functions::heaviside_tile": "compute_kernel_api.h",
    "functions::heaviside_tile_init": "compute_kernel_api.h",
    "functions::helper": "tt_metal/hw/inc/debug/waypoint.h",
    "functions::hi_word": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::i0_tile": "compute_kernel_api/eltwise_unary/i0.h",
    "functions::i0_tile_init": "compute_kernel_api/eltwise_unary/i0.h",
    "functions::i1_tile": "compute_kernel_api/eltwise_unary/i1.h",
    "functions::i1_tile_init": "compute_kernel_api/eltwise_unary/i1.h",
    "functions::identity_tile": "compute_kernel_api/eltwise_unary/identity.h",
    "functions::identity_tile_init": "compute_kernel_api/eltwise_unary/identity.h",
    "functions::identity_tile_uint32": "compute_kernel_api/eltwise_unary/identity.h",
    "functions::implements_compute_output_specs": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_compute_output_specs_with_optional_output_tensors": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_compute_program_hash": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_compute_program_hash_with_optional_input_tensors": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_create_mesh_workload": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_create_mesh_workload_with_optional_input_tensors": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_create_op_performance_model": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_create_output_tensors": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_create_output_tensors_with_optional_output_tensors": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_create_program": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_create_program_with_optional_input_tensors": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_get_parallelization_strategy": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_get_type_name": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_validate": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_validate_with_optional_input_tensors": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_validate_with_output_tensors": "ttnn/api/ttnn/operation.hpp",
    "functions::implements_validate_with_output_tensors_and_optional_input_tensors": "ttnn/api/ttnn/operation.hpp",
    "functions::inc_noc_counter_val": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::infer_dims_for_reshape": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::init_bcast": "compute_kernel_api/bcast.h",
    "functions::init_sfpu": "compute_kernel_api/eltwise_unary/eltwise_unary.h",
    "functions::initialize_interleaved_buf_read_dispatch_params": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::initialize_sharded_buf_read_dispatch_params": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::initialize_worker_config_buf_mgr": "tt_metal/impl/program/dispatch.hpp",
    "functions::insert_empty_program_dispatch_preamble_cmd": "tt_metal/impl/program/dispatch.hpp",
    "functions::insert_stall_cmds": "tt_metal/impl/program/dispatch.hpp",
    "functions::insert_write_packed_payloads": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "functions::invalidate_l1_cache": "tt_metal/hw/inc/risc_common.h",
    "functions::invoke": "ttnn/api/ttnn/device_operation.hpp",
    "functions::invoke_composite": "ttnn/api/ttnn/decorators.hpp",
    "functions::is_all_fp32_formats": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::is_arch_gs": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::is_arch_whb0": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::is_block_float": "ttnn/api/ttnn/tensor/types.hpp",
    "functions::is_close": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::is_cpu_tensor": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::is_device_operation": "ttnn/api/ttnn/operation.hpp",
    "functions::is_device_tensor": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::is_dummy_phase": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::is_exp_b_format": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::is_floating_point": "ttnn/api/ttnn/tensor/types.hpp",
    "functions::is_integer_format": "tt_metal/api/tt-metalium/tt_backend_api_types.hpp",
    "functions::is_line_topology": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::is_message_go": "tt_metal/hw/inc/firmware_common.h",
    "functions::is_multi_device_host_tensor": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::is_power_of_2": "tt_metal/hw/inc/utils/utils.h",
    "functions::is_sharded": "tt_metal/api/tt-metalium/buffer.hpp",
    "functions::is_subset_of": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "functions::is_valid_conversion": "tt_metal/api/tt-metalium/data_format.hpp",
    "functions::is_wormhole_or_blackhole": "ttnn/api/ttnn/device.hpp",
    "functions::isfinite_tile": "compute_kernel_api/eltwise_unary/isinf_isnan.h",
    "functions::isfinite_tile_init": "compute_kernel_api/eltwise_unary/isinf_isnan.h",
    "functions::isinf_tile": "compute_kernel_api/eltwise_unary/isinf_isnan.h",
    "functions::isinf_tile_init": "compute_kernel_api/eltwise_unary/isinf_isnan.h",
    "functions::isnan_tile": "compute_kernel_api/eltwise_unary/isinf_isnan.h",
    "functions::isnan_tile_init": "compute_kernel_api/eltwise_unary/isinf_isnan.h",
    "functions::isneginf_tile": "compute_kernel_api/eltwise_unary/isinf_isnan.h",
    "functions::isneginf_tile_init": "compute_kernel_api/eltwise_unary/isinf_isnan.h",
    "functions::isposinf_tile": "compute_kernel_api/eltwise_unary/isinf_isnan.h",
    "functions::isposinf_tile_init": "compute_kernel_api/eltwise_unary/isinf_isnan.h",
    "functions::issue_core_read_command_sequence": "tt_metal/impl/device/dispatch.hpp",
    "functions::issue_record_event_commands": "tt_metal/impl/event/dispatch.hpp",
    "functions::issue_trace_commands": "tt_metal/impl/trace/dispatch.hpp",
    "functions::issue_wait_for_event_commands": "tt_metal/impl/event/dispatch.hpp",
    "functions::kernel_config_from_flatbuffer": "tt_metal/impl/flatbuffer/program_types_from_flatbuffer.hpp",
    "functions::l1_cast": "tt_metal/hw/inc/wormhole/c_tensix_core.h",
    "functions::l1_to_local_mem_copy": "tt_metal/hw/inc/firmware_common.h",
    "functions::launch_on_single_device": "ttnn/api/ttnn/device_operation.hpp",
    "functions::launch_on_worker_thread": "ttnn/api/ttnn/device_operation.hpp",
    "functions::launch_operation_with_adapter": "ttnn/api/ttnn/device_operation.hpp",
    "functions::lcm_tile": "compute_kernel_api/lcm.h",
    "functions::lcm_tile_init": "compute_kernel_api/lcm.h",
    "functions::leaky_relu_tile": "compute_kernel_api/eltwise_unary/relu.h",
    "functions::leaky_relu_tile_init": "compute_kernel_api/eltwise_unary/relu.h",
    "functions::left_shift_tile": "compute_kernel_api/eltwise_unary/left_shift.h",
    "functions::left_shift_tile_init": "compute_kernel_api/eltwise_unary/left_shift.h",
    "functions::lez_tile": "compute_kernel_api.h",
    "functions::lez_tile_init": "compute_kernel_api.h",
    "functions::lez_tile_int32": "compute_kernel_api.h",
    "functions::lo_word": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::load_host_dispatch_state": "tt_metal/impl/trace/dispatch.hpp",
    "functions::load_memory_config": "ttnn/api/ttnn/tensor/serialization.hpp",
    "functions::load_tensor": "ttnn/api/ttnn/tensor/serialization.hpp",
    "functions::load_tensor_flatbuffer": "ttnn/api/ttnn/tensor/serialization.hpp",
    "functions::log": "ttnn/api/ttnn/decorators.hpp",
    "functions::log1p_tile": "compute_kernel_api/eltwise_unary/log1p.h",
    "functions::log1p_tile_init": "compute_kernel_api/eltwise_unary/log1p.h",
    "functions::log2": "tt_metal/api/tt-metalium/bfloat4.hpp",
    "functions::log_debug": "tt_metal/api/tt-metalium/logger.hpp",
    "functions::log_error": "tt_metal/api/tt-metalium/logger.hpp",
    "functions::log_fatal": "tt_metal/api/tt-metalium/logger.hpp",
    "functions::log_info": "tt_metal/api/tt-metalium/logger.hpp",
    "functions::log_level_type": "tt_metal/api/tt-metalium/logger.hpp",
    "functions::log_noc_xfer": "tt_metal/hw/inc/debug/noc_logging.h",
    "functions::log_operation": "ttnn/api/ttnn/device_operation.hpp",
    "functions::log_tile": "compute_kernel_api.h",
    "functions::log_tile_init": "compute_kernel_api.h",
    "functions::log_trace_": "tt_metal/api/tt-metalium/logger.hpp",
    "functions::log_warning": "tt_metal/api/tt-metalium/logger.hpp",
    "functions::log_with_base_tile": "compute_kernel_api.h",
    "functions::log_with_base_tile_init": "compute_kernel_api.h",
    "functions::log_worker_to_fabric_edm_sender_rt_args": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "functions::logical_not_unary_tile": "compute_kernel_api/eltwise_unary/logical_not_noti.h",
    "functions::logical_not_unary_tile_init": "compute_kernel_api/eltwise_unary/logical_not_noti.h",
    "functions::ltz_tile": "compute_kernel_api.h",
    "functions::ltz_tile_init": "compute_kernel_api.h",
    "functions::ltz_tile_int32": "compute_kernel_api.h",
    "functions::make_struct_from_sequence_wrapper": "tt_metal/hw/inc/accessor/detail.h",
    "functions::map_index_to_variant": "ttnn/api/ttnn/device_operation.hpp",
    "functions::mark_stack_usage": "tt_metal/hw/inc/debug/stack_usage.h",
    "functions::mask_posinf_tile": "compute_kernel_api/mask.h",
    "functions::mask_tile": "compute_kernel_api/mask.h",
    "functions::mask_tile_init": "compute_kernel_api/mask.h",
    "functions::match_device_program_data_with_host_program_data": "tt_metal/impl/dispatch/debug_tools.hpp",
    "functions::matmul_block": "compute_kernel_api/matmul.h",
    "functions::matmul_pack_tile": "compute_kernel_api/pack.h",
    "functions::matmul_tiles": "compute_kernel_api/matmul.h",
    "functions::matmul_tiles_math": "compute_kernel_api/matmul.h",
    "functions::max_tile": "compute_kernel_api.h",
    "functions::max_tile_init": "compute_kernel_api.h",
    "functions::measure_stack_usage": "tt_metal/hw/inc/debug/stack_usage.h",
    "functions::memcpy": "ttnn/api/ttnn/tensor/tensor.hpp",
    "functions::memcpy_to_device": "tt_metal/impl/dispatch/memcpy.hpp",
    "functions::memory_read": "tt_metal/hw/inc/tensix_functions.h",
    "functions::memory_write": "tt_metal/hw/inc/tensix_functions.h",
    "functions::merge": "tt_metal/api/tt-metalium/core_coord.hpp",
    "functions::merge_num_sticks_to_read": "tt_metal/api/tt-metalium/work_split.hpp",
    "functions::metal_SocDescriptor": "tt_metal/api/tt-metalium/metal_soc_descriptor.h",
    "functions::min": "tt_metal/hw/inc/dataflow_api.h",
    "functions::mm_block_init": "compute_kernel_api/matmul.h",
    "functions::mm_block_init_short": "compute_kernel_api/matmul.h",
    "functions::mm_block_init_short_with_dt": "compute_kernel_api/matmul.h",
    "functions::mm_init": "compute_kernel_api/matmul.h",
    "functions::mm_init_short": "compute_kernel_api/matmul.h",
    "functions::mm_init_short_with_dt": "compute_kernel_api/matmul.h",
    "functions::mul_bcast_cols_init_short": "compute_kernel_api/bcast.h",
    "functions::mul_bcast_rows_init_short": "compute_kernel_api/bcast.h",
    "functions::mul_binary_tile": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::mul_binary_tile_init": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::mul_tiles": "compute_kernel_api/eltwise_binary.h",
    "functions::mul_tiles_bcast": "compute_kernel_api/bcast.h",
    "functions::mul_tiles_bcast_cols": "compute_kernel_api/bcast.h",
    "functions::mul_tiles_bcast_rows": "compute_kernel_api/bcast.h",
    "functions::mul_tiles_bcast_scalar": "compute_kernel_api/bcast.h",
    "functions::mul_tiles_bcast_scalar_init_short": "compute_kernel_api/bcast.h",
    "functions::mul_tiles_init": "compute_kernel_api/eltwise_binary.h",
    "functions::mul_uint16_tile": "compute_kernel_api/mul_uint16_sfpu.h",
    "functions::mul_uint16_tile_init": "compute_kernel_api/mul_uint16_sfpu.h",
    "functions::mul_unary_tile": "compute_kernel_api/eltwise_unary/binop_with_scalar.h",
    "functions::mulsi3": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::ncrisc_dynamic_noc_nonposted_atomics_flushed": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_dynamic_noc_nonposted_writes_flushed": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_dynamic_noc_nonposted_writes_sent": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_dynamic_noc_posted_writes_sent": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_dynamic_noc_reads_flushed": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_blitz_write_setup": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_counters_init": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_fast_read": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_fast_read_any_len": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_fast_read_with_transaction_id": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_fast_write": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_fast_write_any_len": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_fast_write_any_len_loopback_src": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_fast_write_exclude_region": "tt_metal/hw/inc/blackhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_fast_write_loopback_src": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_full_sync": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_nonposted_atomics_flushed": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_nonposted_write_with_transaction_id_flushed": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_nonposted_write_with_transaction_id_sent": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_nonposted_writes_flushed": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_nonposted_writes_sent": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_posted_writes_sent": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_read_with_transaction_id_flushed": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_reads_flushed": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::ncrisc_noc_set_transaction_id": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::negative_tile": "compute_kernel_api/eltwise_unary/negative.h",
    "functions::negative_tile_init": "compute_kernel_api/eltwise_unary/negative.h",
    "functions::nez_tile": "compute_kernel_api.h",
    "functions::nez_tile_init": "compute_kernel_api.h",
    "functions::nez_tile_int32": "compute_kernel_api.h",
    "functions::noc_accumulate": "tt_metal/hw/inc/blackhole/noc/noc.h",
    "functions::noc_async_atomic_barrier": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_full_barrier": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_posted_writes_flushed": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_barrier": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_barrier_with_trid": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_inc_num_issued": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_one_packet": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_one_packet_set_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_one_packet_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_page": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_partial_page": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_set_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_tile": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_tile_dram_sharded_set_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_tile_dram_sharded_set_trid": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_tile_dram_sharded_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_tile_dram_sharded_with_state_with_trid": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_read_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_barrier": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_barrier_with_trid": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_multicast": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_multicast_loopback_src": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_multicast_one_packet": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_one_packet": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_one_packet_set_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_one_packet_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_one_packet_with_trid": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_one_packet_with_trid_set_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_one_packet_with_trid_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_page": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_write_tile": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_async_writes_flushed": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_atomic_increment": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_atomic_read_and_increment": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_atomic_read_updates_completed": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_bank_table_init": "tt_metal/hw/inc/firmware_common.h",
    "functions::noc_clear_req_id_cnt": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_cmd_buf_ready": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::noc_command_ready": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_copy": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_copy_word_be": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_ecc_cfg_stage_1": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_ecc_cfg_stage_2": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_ecc_clear_err": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_ecc_force_err": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_ecc_get_num_header_ded": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_ecc_get_num_header_sec": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_ecc_get_num_mem_parity_errs": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_fast_atomic_increment": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::noc_fast_read": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_fast_read_inc_num_issued": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_fast_read_set_len": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_fast_read_set_src_xy": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_fast_read_wait_ready": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_fast_write": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_fast_write_dw_inline": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::noc_fast_write_inc_num_dests": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_fast_write_set_cmd_field": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_fast_write_set_dst_xy": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_fast_write_set_len": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_fast_write_wait_ready": "tt_metal/hw/inc/dataflow_internal.h",
    "functions::noc_get_active_instance": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_get_cfg_reg": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_get_cmd_buf": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_get_interim_inline_value_addr": "tt_metal/hw/inc/blackhole/noc_nonblocking_api.h",
    "functions::noc_init": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::noc_inline_dw_write": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_inline_dw_write_set_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_inline_dw_write_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_local_node_id": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_local_state_init": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::noc_multicast_atomic_increment": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_multicast_atomic_read_and_increment": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_multicast_copy": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_multicast_copy_exclude": "tt_metal/hw/inc/blackhole/noc/noc.h",
    "functions::noc_multicast_copy_src_include": "tt_metal/hw/inc/blackhole/noc/noc.h",
    "functions::noc_multicast_copy_word_be": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_multicast_write_dw_inline": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_rd_resp_received": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_semaphore_inc": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_semaphore_set": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_semaphore_set_multicast": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_semaphore_set_multicast_loopback_src": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_semaphore_set_remote": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_semaphore_wait": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_semaphore_wait_min": "tt_metal/hw/inc/dataflow_api.h",
    "functions::noc_set_active_instance": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_set_cfg_reg": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_set_cmd_buf": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_status_reg": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_wr_ack_received": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::noc_write_dw_inline": "tt_metal/hw/inc/wormhole/noc/noc.h",
    "functions::notify_dispatch_core_done": "tt_metal/hw/inc/firmware_common.h",
    "functions::num_cores_to_corerangeset": "tt_metal/api/tt-metalium/work_split.hpp",
    "functions::num_cores_to_corerangeset_in_subcoregrids": "tt_metal/api/tt-metalium/work_split.hpp",
    "functions::op_pack_tiles_ptr_add": "tt_metal/hw/inc/wormhole/risc_chip_specific.h",
    "functions::op_pack_tiles_ptr_sub": "tt_metal/hw/inc/wormhole/risc_chip_specific.h",
    "functions::open_mesh_device": "ttnn/api/ttnn/device.hpp",
    "functions::outFile": "tt_metal/api/tt-metalium/lightmetal_binary.hpp",
    "functions::pack_32b_field": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "functions::pack_address": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "functions::pack_bfloat16_vec_into_uint32_vec": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::pack_bit_array": "tt_metal/hw/inc/bit_utils.h",
    "functions::pack_exponents": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "functions::pack_field": "tt_metal/hw/inc/blackhole/tensix.h",
    "functions::pack_fp32_vec_as_bfp4_tiles": "tt_metal/api/tt-metalium/bfloat4.hpp",
    "functions::pack_fp32_vec_as_bfp8_tiles": "tt_metal/api/tt-metalium/bfloat8.hpp",
    "functions::pack_fp32_vec_as_bfp_tiles": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "functions::pack_reconfig_data_format": "compute_kernel_api/pack.h",
    "functions::pack_reconfig_l1_acc": "compute_kernel_api/pack.h",
    "functions::pack_tile": "compute_kernel_api/pack.h",
    "functions::pack_two_bfloat16_into_uint32": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::pack_untilize_block": "compute_kernel_api/pack_untilize.h",
    "functions::pack_untilize_dst": "compute_kernel_api/pack_untilize.h",
    "functions::pack_untilize_dst_init_short": "compute_kernel_api/pack_untilize.h",
    "functions::pack_untilize_init": "compute_kernel_api/pack_untilize.h",
    "functions::pack_untilize_init_short": "compute_kernel_api/pack_untilize.h",
    "functions::pack_untilize_uninit": "compute_kernel_api/pack_untilize.h",
    "functions::packed_buffer_size_bytes": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::packed_uint32_t_vector_comparison": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::pad": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::populate_cq_static_args": "tt_metal/impl/dispatch/topology.hpp",
    "functions::populate_fd_kernels": "tt_metal/impl/dispatch/topology.hpp",
    "functions::power_binary_tile": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::power_binary_tile_init": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::power_tile": "compute_kernel_api.h",
    "functions::power_tile_init": "compute_kernel_api.h",
    "functions::prelu_tile": "compute_kernel_api/eltwise_unary/prelu.h",
    "functions::prelu_tile_init": "compute_kernel_api/eltwise_unary/prelu.h",
    "functions::print_bf16_pages": "tt_metal/hw/inc/debug/dprint_pages.h",
    "functions::print_f32_pages": "tt_metal/hw/inc/debug/dprint_pages.h",
    "functions::print_full_tile": "tt_metal/hw/inc/debug/dprint_pages.h",
    "functions::print_golden_metalium_vectors": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::print_test_data": "tt_metal/hw/inc/debug/dprint_test_common.h",
    "functions::print_tile_rows": "tt_metal/hw/inc/debug/dprint_pages.h",
    "functions::print_u8_pages": "tt_metal/hw/inc/debug/dprint_pages.h",
    "functions::print_vec": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::print_vec_of_bfloat16": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::print_vec_of_uint32_as_packed_bfloat16": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::program_base_addr_on_core": "tt_metal/api/tt-metalium/program.hpp",
    "functions::push_to_ring_buffer": "tt_metal/hw/inc/debug/ring_buffer.h",
    "functions::py_graph_module": "ttnn/api/ttnn/graph/graph_pybind.hpp",
    "functions::py_graph_module_types": "ttnn/api/ttnn/graph/graph_pybind.hpp",
    "functions::py_module": "ttnn/api/ttnn/distributed/distributed_pybind.hpp",
    "functions::py_module_types": "ttnn/api/ttnn/distributed/distributed_pybind.hpp",
    "functions::python_fully_qualified_name": "ttnn/api/ttnn/decorators.hpp",
    "functions::quant_tile": "compute_kernel_api/quantization.h",
    "functions::quant_tile_init": "compute_kernel_api/quantization.h",
    "functions::query_op_constraints": "ttnn/api/ttnn/graph/graph_query_op_constraints.hpp",
    "functions::query_op_runtime": "ttnn/api/ttnn/graph/graph_query_op_runtime.hpp",
    "functions::query_output_info": "ttnn/api/ttnn/graph/graph_operation_queries.hpp",
    "functions::query_peak_L1_memory_usage": "ttnn/api/ttnn/graph/graph_operation_queries.hpp",
    "functions::query_trace": "ttnn/api/ttnn/graph/graph_operation_queries.hpp",
    "functions::queue_synchronize": "ttnn/api/ttnn/async_runtime.hpp",
    "functions::rand_tile": "compute_kernel_api/eltwise_unary/rand.h",
    "functions::rand_tile_init": "compute_kernel_api/eltwise_unary/rand.h",
    "functions::read_buffer": "ttnn/api/ttnn/async_runtime.hpp",
    "functions::read_core_data_from_completion_queue": "tt_metal/impl/device/dispatch.hpp",
    "functions::read_data_from_device_buffer": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::read_events_from_completion_queue": "tt_metal/impl/event/dispatch.hpp",
    "functions::recip_tile": "compute_kernel_api/eltwise_unary/recip.h",
    "functions::recip_tile_init": "compute_kernel_api/eltwise_unary/recip.h",
    "functions::reconfig_data_format": "compute_kernel_api/reconfig_data_format.h",
    "functions::reconfig_data_format_srca": "compute_kernel_api/reconfig_data_format.h",
    "functions::reconfig_data_format_srcb": "compute_kernel_api/reconfig_data_format.h",
    "functions::reconfigure_unary_bcast": "compute_kernel_api/bcast.h",
    "functions::reconstruct_float32": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "functions::record_event": "ttnn/api/ttnn/async_runtime.hpp",
    "functions::record_event_to_host": "ttnn/api/ttnn/async_runtime.hpp",
    "functions::record_mesh_event": "ttnn/api/ttnn/events.hpp",
    "functions::record_stack_usage": "tt_metal/hw/inc/debug/stack_usage.h",
    "functions::reduce": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "functions::reduce_init": "compute_kernel_api/reduce.h",
    "functions::reduce_init_delta": "compute_kernel_api/reduce.h",
    "functions::reduce_init_delta_math": "compute_kernel_api/reduce.h",
    "functions::reduce_init_delta_no_pack": "compute_kernel_api/reduce.h",
    "functions::reduce_init_short": "compute_kernel_api/reduce.h",
    "functions::reduce_revert_delta": "compute_kernel_api/reduce.h",
    "functions::reduce_scatter": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "functions::reduce_tile": "compute_kernel_api/reduce.h",
    "functions::reduce_tile_math": "compute_kernel_api/reduce.h",
    "functions::reg_read": "tt_metal/hw/inc/risc_common.h",
    "functions::register_operation": "ttnn/api/ttnn/decorators.hpp",
    "functions::register_operation_impl": "ttnn/api/ttnn/decorators.hpp",
    "functions::register_optional_type": "ttnn/api/ttnn/graph/graph_argument_serializer.hpp",
    "functions::register_small_vector": "ttnn/api/ttnn/graph/graph_argument_serializer.hpp",
    "functions::register_type": "ttnn/api/ttnn/graph/graph_argument_serializer.hpp",
    "functions::release_dst": "compute_kernel_api/reg_api.h",
    "functions::relu_max_tile": "compute_kernel_api/eltwise_unary/relu.h",
    "functions::relu_max_tile_init": "compute_kernel_api/eltwise_unary/relu.h",
    "functions::relu_min_tile": "compute_kernel_api/eltwise_unary/relu.h",
    "functions::relu_min_tile_init": "compute_kernel_api/eltwise_unary/relu.h",
    "functions::relu_tile": "compute_kernel_api/eltwise_unary/relu.h",
    "functions::relu_tile_init": "compute_kernel_api/eltwise_unary/relu.h",
    "functions::remainder_tile": "compute_kernel_api/eltwise_unary/remainder.h",
    "functions::remainder_tile_init": "compute_kernel_api/eltwise_unary/remainder.h",
    "functions::remote_cb_pop_front": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::remote_cb_push_back_and_write_pages": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::remote_cb_reserve_back": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::remote_cb_sender_barrier": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::remote_cb_wait_front": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::replicate_tensor_to_mesh_mapper": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "functions::requant_tile": "compute_kernel_api/quantization.h",
    "functions::requant_tile_init": "compute_kernel_api/quantization.h",
    "functions::reserve_space": "tt_metal/impl/dispatch/device_command.hpp",
    "functions::reserve_space_in_kernel_config_buffer": "tt_metal/impl/program/dispatch.hpp",
    "functions::reset_config_buf_mgrs_and_expected_workers": "tt_metal/impl/program/dispatch.hpp",
    "functions::reset_global_semaphore_value": "ttnn/api/ttnn/global_semaphore.hpp",
    "functions::reset_host_dispatch_state_for_trace": "tt_metal/impl/trace/dispatch.hpp",
    "functions::reset_tile_header_buffer": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::reset_worker_dispatch_state_on_device": "tt_metal/impl/program/dispatch.hpp",
    "functions::reshuffle_rows_tile": "compute_kernel_api/reshuffle.h",
    "functions::reshuffle_rows_tile_init": "compute_kernel_api/reshuffle.h",
    "functions::resize_remote_receiver_cb_interface": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::resize_remote_sender_cb_interface": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::result": "tt_metal/api/tt-metalium/assert.hpp",
    "functions::right_shift_tile": "compute_kernel_api/eltwise_unary/right_shift.h",
    "functions::right_shift_tile_init": "compute_kernel_api/eltwise_unary/right_shift.h",
    "functions::risc_context_switch": "tt_metal/hw/inc/debug/watcher_common.h",
    "functions::risc_context_switch_without_noc_sync": "tt_metal/hw/inc/ethernet/erisc.h",
    "functions::risc_init": "tt_metal/hw/inc/risc_common.h",
    "functions::riscv_wait": "tt_metal/hw/inc/risc_common.h",
    "functions::rmw_cfg_value": "tt_metal/hw/inc/tensix_functions.h",
    "functions::round_down": "tt_metal/api/tt-metalium/math.hpp",
    "functions::round_size": "tt_metal/impl/dispatch/util/size_literals.hpp",
    "functions::round_tile": "compute_kernel_api/eltwise_unary/rounding.h",
    "functions::round_up": "tt_metal/api/tt-metalium/math.hpp",
    "functions::round_up_to_mul16": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::round_up_to_mul32": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::round_up_to_tile": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::rounding_op_tile_init": "compute_kernel_api/eltwise_unary/rounding.h",
    "functions::rsqrt_tile": "compute_kernel_api.h",
    "functions::rsqrt_tile_init": "compute_kernel_api.h",
    "functions::rsub_binary_tile": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::rsub_binary_tile_init": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::rsub_tile": "compute_kernel_api/eltwise_unary/reverseops.h",
    "functions::rsub_tile_init": "compute_kernel_api/eltwise_unary/reverseops.h",
    "functions::rsub_unary_tile": "compute_kernel_api/eltwise_unary/binop_with_scalar.h",
    "functions::run": "ttnn/api/ttnn/run_operation.hpp",
    "functions::run_command": "tt_metal/api/tt-metalium/utils.hpp",
    "functions::run_routing": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::run_routing_without_noc_sync": "tt_metal/hw/inc/ethernet/tunneling.h",
    "functions::run_with_autoformat": "ttnn/api/ttnn/run_operation.hpp",
    "functions::run_without_autoformat": "ttnn/api/ttnn/run_operation.hpp",
    "functions::scan": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "functions::segfault_handler": "ttnn/api/ttnn/core.hpp",
    "functions::select_from_corerange": "tt_metal/api/tt-metalium/core_coord.hpp",
    "functions::select_sub_device_ids": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::send_eth_receiver_channel_done": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::serialize_cluster_descriptor": "ttnn/api/ttnn/cluster.hpp",
    "functions::set": "ttnn/api/ttnn/config.hpp",
    "functions::set_default_operation_output_memory_config": "ttnn/api/ttnn/operation.hpp",
    "functions::set_fork_num_msgs_in_block": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::set_fork_scatter_inner_loop_count": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::set_go_signal_noc_data_on_dispatch": "tt_metal/impl/program/dispatch.hpp",
    "functions::set_noc_counter_val": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "functions::set_num_worker_sems_on_dispatch": "tt_metal/impl/program/dispatch.hpp",
    "functions::set_printoptions": "ttnn/api/ttnn/core.hpp",
    "functions::set_receiver_socket_page_size": "tt_metal/hw/inc/socket_api.h",
    "functions::set_runtime_id": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "functions::set_sender_socket_page_size": "tt_metal/hw/inc/socket_api.h",
    "functions::set_tensor_id": "ttnn/api/ttnn/tensor/tensor.hpp",
    "functions::setup_local_cb_read_write_interfaces": "tt_metal/hw/inc/circular_buffer_init.h",
    "functions::setup_remote_cb_interfaces": "tt_metal/hw/inc/circular_buffer_init.h",
    "functions::sfpu_add_int": "compute_kernel_api/eltwise_unary/sfpu_int_sum.h",
    "functions::sfpu_sum_int_col": "compute_kernel_api/eltwise_unary/sfpu_int_sum.h",
    "functions::sfpu_sum_int_init": "compute_kernel_api/eltwise_unary/sfpu_int_sum.h",
    "functions::sfpu_sum_int_row": "compute_kernel_api/eltwise_unary/sfpu_int_sum.h",
    "functions::shard_tensor_to_mesh_mapper": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "functions::should_stall_for_tile_header_buffer_reset": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::sigmoid_tile": "compute_kernel_api.h",
    "functions::sigmoid_tile_init": "compute_kernel_api.h",
    "functions::sign_tile": "compute_kernel_api.h",
    "functions::sign_tile_init": "compute_kernel_api.h",
    "functions::signbit_tile": "compute_kernel_api.h",
    "functions::signbit_tile_init": "compute_kernel_api.h",
    "functions::silu_tile": "compute_kernel_api.h",
    "functions::silu_tile_init": "compute_kernel_api.h",
    "functions::sin_tile": "compute_kernel_api/eltwise_unary/trigonometry.h",
    "functions::sin_tile_init": "compute_kernel_api/eltwise_unary/trigonometry.h",
    "functions::socket_barrier": "tt_metal/hw/inc/socket_api.h",
    "functions::socket_notify_receiver": "tt_metal/hw/inc/socket_api.h",
    "functions::socket_notify_sender": "tt_metal/hw/inc/socket_api.h",
    "functions::socket_pop_pages": "tt_metal/hw/inc/socket_api.h",
    "functions::socket_push_pages": "tt_metal/hw/inc/socket_api.h",
    "functions::socket_reserve_pages": "tt_metal/hw/inc/socket_api.h",
    "functions::socket_wait_for_pages": "tt_metal/hw/inc/socket_api.h",
    "functions::softplus_tile": "compute_kernel_api/eltwise_unary/softplus.h",
    "functions::softplus_tile_init": "compute_kernel_api/eltwise_unary/softplus.h",
    "functions::span_to_xtensor_view": "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp",
    "functions::special_mult": "tt_metal/hw/inc/risc_common.h",
    "functions::split_work_to_cores": "tt_metal/api/tt-metalium/work_split.hpp",
    "functions::sqrt_tile": "compute_kernel_api/eltwise_unary/sqrt.h",
    "functions::sqrt_tile_init": "compute_kernel_api/eltwise_unary/sqrt.h",
    "functions::square_tile": "compute_kernel_api.h",
    "functions::square_tile_init": "compute_kernel_api.h",
    "functions::store_compute_special_value_flags_to_l1": "compute_kernel_api.h",
    "functions::stream_clear_all_tiles": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_done_hint": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_dram_read_should_reset_pointers": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_dram_write": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_dram_write_init": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_dram_write_ok": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_dram_write_should_reset_pointers": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_dram_writes_read_scratch": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_dram_writes_sent": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_dram_writes_write_scratch": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_force_next_phase": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_get_auto_cfg_header": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_get_auto_cfg_header_phase_num_cfg_regs": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_get_auto_cfg_ptr": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_get_buf_space_available": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_buf_space_available_words": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_curr_phase": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_curr_phase_num_msgs": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_data_buf_addr": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_data_buf_size": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_free_words": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_input_noc": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_msg_info_rd_ptr": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_get_output_noc": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_output_unicast_vc": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_push_flushed": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_remote_data_buf_addr": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_get_remote_data_buf_size": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_get_remote_data_buf_space_available": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_get_remote_dest_coord": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_get_remote_src_coord": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_is_dram_read_opt_enabled": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_is_receiver_endpoint": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_next_phase_src_change": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_phase_advance_wait": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_phase_blob_run": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_phase_blob_run_offset": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_phase_id_is_active": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_phase_is_active": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_phase_next_recved_tile_addr": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_phase_next_recved_tile_size": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_phase_tiles_received": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_push_tiles": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_rec_endpoint_get_phase_tiles_count": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_rec_endpoint_set_phase_tiles_count": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_receiver_endpoint_single_clear_op": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_receiver_endpoint_tile_clearing_finished": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_receiver_endpoint_tiles_clear": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_receiver_endpoint_tiles_clear_b0": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_relay_tiles": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_reset": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_set_auto_cfg_header": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_set_curr_phase_num_msgs": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::stream_set_tiles_left_in_phase": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_should_packer_reset_pointers": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_signal_flushed_tiles": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_src_endpoint_get_phase_tiles_count": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_src_endpoint_set_phase_tiles_count": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_tiles_outstanding": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "functions::stream_update_remote_dest_buf_space_available": "tt_metal/hw/inc/blackhole/stream_interface.h",
    "functions::sub_bcast_cols_init_short": "compute_kernel_api/bcast.h",
    "functions::sub_binary_tile": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::sub_binary_tile_init": "compute_kernel_api/eltwise_binary_sfpu.h",
    "functions::sub_int32_tile": "compute_kernel_api/sub_int32_sfpu.h",
    "functions::sub_int32_tile_init": "compute_kernel_api/sub_int32_sfpu.h",
    "functions::sub_tiles": "compute_kernel_api/eltwise_binary.h",
    "functions::sub_tiles_bcast": "compute_kernel_api/bcast.h",
    "functions::sub_tiles_bcast_cols": "compute_kernel_api/bcast.h",
    "functions::sub_tiles_bcast_scalar": "compute_kernel_api/bcast.h",
    "functions::sub_tiles_bcast_scalar_init_short": "compute_kernel_api/bcast.h",
    "functions::sub_tiles_init": "compute_kernel_api/eltwise_binary.h",
    "functions::sub_uint16_tile": "compute_kernel_api/sub_uint16_sfpu.h",
    "functions::sub_uint16_tile_init": "compute_kernel_api/sub_uint16_sfpu.h",
    "functions::sub_unary_tile": "compute_kernel_api/eltwise_unary/binop_with_scalar.h",
    "functions::subtract": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::swap": "tt_metal/api/tt-metalium/core_coord.hpp",
    "functions::tan_tile": "compute_kernel_api/eltwise_unary/trigonometry.h",
    "functions::tan_tile_init": "compute_kernel_api/eltwise_unary/trigonometry.h",
    "functions::tanh_tile": "compute_kernel_api.h",
    "functions::tanh_tile_init": "compute_kernel_api.h",
    "functions::tdma_xmov": "tt_metal/hw/inc/wormhole/tdma_xmov.h",
    "functions::tensor_cpu": "ttnn/api/ttnn/tensor/tensor_ops.hpp",
    "functions::tensor_pad": "ttnn/api/ttnn/tensor/tensor_ops.hpp",
    "functions::tensor_pad_to_tile": "ttnn/api/ttnn/tensor/tensor_ops.hpp",
    "functions::tensor_print": "ttnn/api/ttnn/tensor/tensor_ops.hpp",
    "functions::tensor_reshape": "ttnn/api/ttnn/tensor/tensor_ops.hpp",
    "functions::tensor_to_device": "ttnn/api/ttnn/tensor/tensor_ops.hpp",
    "functions::tensor_to_layout": "ttnn/api/ttnn/tensor/tensor_ops.hpp",
    "functions::tensor_unpad": "ttnn/api/ttnn/tensor/tensor_ops.hpp",
    "functions::tensor_unpad_from_tile": "ttnn/api/ttnn/tensor/tensor_ops.hpp",
    "functions::thcon_at_swap": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_build_descriptor": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_cas": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_flush_dma": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_incr_get_ptr": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_incr_get_ptr_noinc": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_load_ind": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_reg_to_flops": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_set_descriptor": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_set_packer_l1_dest_addr": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_set_packer_misc_conf": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_set_packer_section_conf": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_set_unpacker_misc_conf": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_sigwrite_16b_reg": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_store_ind": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_write_16B_reg": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_write_16b_reg": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_write_32b_reg": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_write_descriptor_to_l1": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_write_descriptor_to_reg": "tt_metal/hw/inc/tensix_functions.h",
    "functions::thcon_write_tile_addr": "tt_metal/hw/inc/tensix_functions.h",
    "functions::tile_regs_acquire": "compute_kernel_api/reg_api.h",
    "functions::tile_regs_commit": "compute_kernel_api/reg_api.h",
    "functions::tile_regs_release": "compute_kernel_api/reg_api.h",
    "functions::tile_regs_wait": "compute_kernel_api/reg_api.h",
    "functions::tile_size": "tt_metal/api/tt-metalium/tt_backend_api_types.hpp",
    "functions::tiled_prod_tile": "compute_kernel_api.h",
    "functions::tiled_prod_tile_init": "compute_kernel_api.h",
    "functions::tilizeA_B_dot_product_init": "compute_kernel_api/tilize.h",
    "functions::tilizeA_B_reduce_init": "compute_kernel_api/tilize.h",
    "functions::tilize_block": "compute_kernel_api/tilize.h",
    "functions::tilize_init": "compute_kernel_api/tilize.h",
    "functions::tilize_init_short": "compute_kernel_api/tilize.h",
    "functions::tilize_init_short_with_dt": "compute_kernel_api/tilize.h",
    "functions::tilize_init_unpack": "compute_kernel_api/tilize.h",
    "functions::tilize_nfaces": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::tilize_swizzled": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::tilize_uninit": "compute_kernel_api/tilize.h",
    "functions::tilize_uninit_with_dt": "compute_kernel_api/tilize.h",
    "functions::to_device": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::to_device_mesh_tensor": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::to_flatbuffer": "tt_metal/impl/flatbuffer/program_types_to_flatbuffer.hpp",
    "functions::to_host": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::to_host_mesh_tensor": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::to_layout": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::to_layout_bfloat": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::to_linear_index": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "functions::to_string": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::to_vector": "ttnn/api/ttnn/tensor/tensor.hpp",
    "functions::to_xtensor": "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp",
    "functions::topk_local_sort": "compute_kernel_api.h",
    "functions::topk_merge": "compute_kernel_api.h",
    "functions::topk_rebuild": "compute_kernel_api.h",
    "functions::topk_tile_init": "compute_kernel_api.h",
    "functions::traced_invoke": "ttnn/api/ttnn/decorators.hpp",
    "functions::track_function_end": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "functions::track_function_start": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "functions::track_workload": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "functions::transform": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "functions::transpose_wh_dest": "compute_kernel_api/transpose_wh_dest.h",
    "functions::transpose_wh_dest_init_short": "compute_kernel_api/transpose_wh_dest.h",
    "functions::transpose_wh_init": "compute_kernel_api/transpose_wh.h",
    "functions::transpose_wh_init_short": "compute_kernel_api/transpose_wh.h",
    "functions::transpose_wh_tile": "compute_kernel_api/transpose_wh.h",
    "functions::tt_assert": "tt_metal/api/tt-metalium/assert.hpp",
    "functions::tt_hlk_desc": "tt_metal/api/tt-metalium/hlk_desc.hpp",
    "functions::tt_l1_load": "tt_metal/hw/inc/risc_attribs.h",
    "functions::tt_throw": "tt_metal/api/tt-metalium/assert.hpp",
    "functions::tt_throw_impl": "tt_metal/api/tt-metalium/assert.hpp",
    "functions::typecast_tile": "compute_kernel_api/eltwise_unary/typecast.h",
    "functions::typecast_tile_init": "compute_kernel_api/eltwise_unary/typecast.h",
    "functions::u16_from_u32_vector": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::u32_from_u16_vector": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::u_x": "tt_metal/hw/inc/wormhole/tensix.h",
    "functions::udivsi3_const_divisor": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::umodsi3_const_divisor": "tt_metal/hw/inc/mod_div_lib.h",
    "functions::unary_bcast": "compute_kernel_api/bcast.h",
    "functions::unary_bcast_init": "compute_kernel_api/bcast.h",
    "functions::unary_eq_tile": "compute_kernel_api.h",
    "functions::unary_eq_tile_init": "compute_kernel_api.h",
    "functions::unary_eq_tile_int32": "compute_kernel_api.h",
    "functions::unary_gt_tile": "compute_kernel_api.h",
    "functions::unary_gt_tile_init": "compute_kernel_api.h",
    "functions::unary_lt_tile": "compute_kernel_api.h",
    "functions::unary_lt_tile_init": "compute_kernel_api.h",
    "functions::unary_max_tile": "compute_kernel_api.h",
    "functions::unary_max_tile_init": "compute_kernel_api.h",
    "functions::unary_min_tile": "compute_kernel_api.h",
    "functions::unary_min_tile_init": "compute_kernel_api.h",
    "functions::unary_ne_tile": "compute_kernel_api.h",
    "functions::unary_ne_tile_init": "compute_kernel_api.h",
    "functions::unary_ne_tile_int32": "compute_kernel_api.h",
    "functions::unary_op_init_common": "compute_kernel_api/eltwise_unary/eltwise_unary.h",
    "functions::underlying_type": "tt_metal/api/tt-metalium/utils.hpp",
    "functions::unhalt_tensix": "tt_metal/hw/inc/tensix_functions.h",
    "functions::unpack_address": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "functions::unpack_bfp4_tiles_into_float_vec": "tt_metal/api/tt-metalium/bfloat4.hpp",
    "functions::unpack_bfp8_tiles_into_float_vec": "tt_metal/api/tt-metalium/bfloat8.hpp",
    "functions::unpack_field": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "functions::unpack_fifo_address": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "functions::unpack_tilizeA_B_block": "compute_kernel_api/tilize.h",
    "functions::unpack_tilizeA_B_dot_product_block": "compute_kernel_api/tilize.h",
    "functions::unpack_tilize_block": "compute_kernel_api/tilize.h",
    "functions::unpack_two_bfloat16_from_uint32": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::unpack_uint32_vec_into_bfloat16_vec": "tt_metal/api/tt-metalium/bfloat16.hpp",
    "functions::unpad": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "functions::untilize_block": "compute_kernel_api/untilize.h",
    "functions::untilize_init": "compute_kernel_api/untilize.h",
    "functions::untilize_init_short": "compute_kernel_api/untilize.h",
    "functions::untilize_nfaces": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::untilize_swizzled": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "functions::untilize_uninit": "compute_kernel_api/untilize.h",
    "functions::update_pages_acked": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::update_pages_sent": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::update_program_dispatch_commands": "tt_metal/impl/program/dispatch.hpp",
    "functions::update_remote_cb_config_in_l1": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "functions::update_socket_config": "tt_metal/hw/inc/socket_api.h",
    "functions::update_traced_program_dispatch_commands": "tt_metal/impl/program/dispatch.hpp",
    "functions::update_worker_state_post_trace_execution": "tt_metal/impl/trace/dispatch.hpp",
    "functions::validate_core_read_write_bounds": "tt_metal/impl/device/dispatch.hpp",
    "functions::validate_datatype": "ttnn/api/ttnn/tensor/host_buffer/functions.hpp",
    "functions::view_as": "tt_metal/api/tt-metalium/host_buffer.hpp",
    "functions::wait_for_eth_txq_cmd_space": "tt_metal/hw/inc/ethernet/dataflow_api.h",
    "functions::wait_for_event": "ttnn/api/ttnn/async_runtime.hpp",
    "functions::wait_for_go_message": "tt_metal/hw/inc/firmware_common.h",
    "functions::wait_for_mesh_event": "ttnn/api/ttnn/events.hpp",
    "functions::wait_for_program_vector_to_arrive_and_compare_to_host_program_vector": "tt_metal/impl/dispatch/debug_tools.hpp",
    "functions::wait_for_sync_register_value": "tt_metal/hw/inc/dataflow_api.h",
    "functions::wait_tdma_movers_done": "tt_metal/hw/inc/wormhole/tdma_xmov.h",
    "functions::watcher_attach": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_clear_log": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_detach": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_dump": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_get_dump_count": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_get_log_file_name": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_init": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_pause": "tt_metal/hw/inc/debug/pause.h",
    "functions::watcher_read_kernel_ids_from_file": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_register_kernel": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_register_kernel_elf_paths": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_sanitize_host_noc_read": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_sanitize_host_noc_write": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_server_killed_due_to_error": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::watcher_server_set_error_flag": "tt_metal/impl/debug/watcher_server.hpp",
    "functions::write_buffer": "ttnn/api/ttnn/async_runtime.hpp",
    "functions::write_control_buffer_to_core": "tt_metal/impl/profiler/profiler.hpp",
    "functions::write_debug_waypoint": "tt_metal/hw/inc/debug/waypoint.h",
    "functions::write_program_command_sequence": "tt_metal/impl/program/dispatch.hpp",
    "functions::write_tensor": "ttnn/api/ttnn/tensor/tensor.hpp",
    "functions::write_to_core": "tt_metal/impl/device/dispatch.hpp",
    "functions::write_to_device_buffer": "tt_metal/impl/buffers/dispatch.hpp",
    "functions::wzeromem": "tt_metal/hw/inc/tensix_functions.h",
    "functions::wzerorange": "tt_metal/hw/inc/tensix_functions.h",
    "functions::xtensor_to_span": "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp",
    "functions::zero": "tt_metal/impl/dispatch/device_command.hpp",
    "namespaces::Noc": "tt_metal/hw/inc/wormhole/noc/noc_overlay_parameters.hpp",
    "namespaces::allocator": "tt_metal/impl/allocator/bank_manager.hpp",
    "namespaces::buffer_dispatch": "tt_metal/impl/buffers/dispatch.hpp",
    "namespaces::ckernel": "compute_kernel_api.h",
    "namespaces::cluster": "ttnn/api/ttnn/cluster.hpp",
    "namespaces::constants": "tt_metal/api/tt-metalium/constants.hpp",
    "namespaces::core": "ttnn/api/ttnn/config.hpp",
    "namespaces::decorators": "ttnn/api/ttnn/decorators.hpp",
    "namespaces::detail": "ttnn/api/ttnn/device_operation.hpp",
    "namespaces::device": "ttnn/api/ttnn/device.hpp",
    "namespaces::device_dispatch": "tt_metal/impl/device/dispatch.hpp",
    "namespaces::device_operation": "ttnn/api/ttnn/device_operation.hpp",
    "namespaces::distributed": "ttnn/api/ttnn/tensor/tensor_ops.hpp",
    "namespaces::dram_mem": "tt_metal/hw/inc/wormhole/dram_address_map.h",
    "namespaces::eth_iram_mem": "tt_metal/hw/inc/wormhole/eth_l1_address_map.h",
    "namespaces::eth_l1_mem": "tt_metal/hw/inc/wormhole/eth_l1_address_map.h",
    "namespaces::event_dispatch": "tt_metal/impl/event/dispatch.hpp",
    "namespaces::events": "ttnn/api/ttnn/events.hpp",
    "namespaces::experimental": "tt_metal/hw/inc/circular_buffer_init.h",
    "namespaces::host_buffer": "ttnn/api/ttnn/tensor/host_buffer/functions.hpp",
    "namespaces::interleaved_addr_gen": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "namespaces::internal": "tt_metal/impl/dispatch/debug_tools.hpp",
    "namespaces::internal_": "tt_metal/hw/inc/debug/watcher_common.h",
    "namespaces::json": "tt_metal/api/tt-metalium/buffer.hpp",
    "namespaces::ll_api": "tt_metal/api/tt-metalium/kernel.hpp",
    "namespaces::operation": "ttnn/api/ttnn/operation.hpp",
    "namespaces::program_cache": "tt_metal/api/tt-metalium/mesh_device.hpp",
    "namespaces::program_dispatch": "tt_metal/impl/program/program_impl.hpp",
    "namespaces::std": "tt_metal/api/tt-metalium/global_circular_buffer.hpp",
    "namespaces::stl": "tt_metal/api/tt-metalium/buffer.hpp",
    "namespaces::tensor_impl": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "namespaces::tt": "ttnn/api/ttnn/operation.hpp",
    "namespaces::tt_metal": "ttnn/api/ttnn/operation.hpp",
    "namespaces::ttnn": "ttnn/api/ttnn/device_operation.hpp",
    "namespaces::types": "ttnn/api/ttnn/types.hpp",
    "namespaces::utils": "tt_metal/api/tt-metalium/utils.hpp",
    "structs::AdaptedCachedMeshWorkload": "tt_metal/api/tt-metalium/program_cache.hpp",
    "structs::AllGatherTensor": "ttnn/api/ttnn/distributed/distributed_tensor_config.hpp",
    "structs::AllocatorConfig": "tt_metal/api/tt-metalium/allocator_types.hpp",
    "structs::BF16": "tt_metal/hw/inc/debug/dprint.h",
    "structs::BankCoordWrapper": "tt_metal/hw/inc/accessor/detail.h",
    "structs::BinaryOperationParams": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::BinaryOperationParams_added": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::Block": "tt_metal/impl/allocator/algorithms/free_list.hpp",
    "structs::BufferConfig": "tt_metal/api/tt-metalium/buffer.hpp",
    "structs::BufferInfo": "ttnn/api/ttnn/reports.hpp",
    "structs::BufferPageInfo": "ttnn/api/ttnn/reports.hpp",
    "structs::BufferPageMapping": "tt_metal/api/tt-metalium/buffer_page_mapping.hpp",
    "structs::BufferReadDispatchParams": "tt_metal/impl/buffers/dispatch.hpp",
    "structs::BufferReadLargePageDispatchParams": "tt_metal/impl/buffers/dispatch.hpp",
    "structs::BufferRegion": "tt_metal/api/tt-metalium/buffer.hpp",
    "structs::CBDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::CBFormatDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::CBInterface": "tt_metal/hw/inc/circular_buffer.h",
    "structs::CacheableMeshWorkload": "ttnn/api/ttnn/operation.hpp",
    "structs::CacheableProgram": "ttnn/api/ttnn/operation.hpp",
    "structs::CachedMeshWorkload": "tt_metal/api/tt-metalium/program_cache.hpp",
    "structs::CachedProgram": "tt_metal/api/tt-metalium/program_cache.hpp",
    "structs::CachedProgramFactory": "tt_metal/api/tt-metalium/program_cache.hpp",
    "structs::CheckDeviceBufferIsAllocated": "ttnn/api/ttnn/device_operation.hpp",
    "structs::ChipSpec": "tt_metal/api/tt-metalium/mesh_graph.hpp",
    "structs::CircularBufferAllocator": "tt_metal/impl/program/program_impl.hpp",
    "structs::ComputeConfig": "tt_metal/api/tt-metalium/kernel_types.hpp",
    "structs::ComputeConfigDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::Config": "ttnn/api/ttnn/config.hpp",
    "structs::ConfigBufferEntry": "tt_metal/impl/dispatch/worker_config_buffer.hpp",
    "structs::ConfigBufferSync": "tt_metal/impl/dispatch/worker_config_buffer.hpp",
    "structs::ConstraintQueryResponse": "ttnn/api/ttnn/graph/graph_query_op_constraints.hpp",
    "structs::CoreDescriptorComparator": "tt_metal/impl/debug/debug_helpers.hpp",
    "structs::CoreDispatchParams": "tt_metal/impl/device/dispatch.hpp",
    "structs::CoreGrid": "ttnn/api/ttnn/types.hpp",
    "structs::CoreReadDispatchParams": "tt_metal/impl/device/dispatch.hpp",
    "structs::DEC": "tt_metal/hw/inc/debug/dprint.h",
    "structs::DEFAULTFLOAT": "tt_metal/hw/inc/debug/dprint.h",
    "structs::DataMovementConfig": "tt_metal/api/tt-metalium/kernel_types.hpp",
    "structs::DataMovementConfigDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::DeallocatedState": "tt_metal/api/tt-metalium/mesh_buffer.hpp",
    "structs::DebugPrintData": "tt_metal/hw/inc/debug/dprint.h",
    "structs::DebugPrinter": "tt_metal/hw/inc/debug/dprint.h",
    "structs::DeviceInfo": "ttnn/api/ttnn/reports.hpp",
    "structs::DeviceLocalBufferConfig": "tt_metal/api/tt-metalium/mesh_buffer.hpp",
    "structs::DeviceStorage": "ttnn/api/ttnn/tensor/storage.hpp",
    "structs::DispatchKernelNode": "tt_metal/impl/dispatch/topology.hpp",
    "structs::DisptachMetaData": "tt_metal/impl/profiler/profiler.hpp",
    "structs::DistributionSpec": "tt_metal/hw/inc/accessor/detail.h",
    "structs::DistributionSpecWrapper": "tt_metal/hw/inc/accessor/detail.h",
    "structs::EDMChannelWorkerLocationInfo": "tt_metal/api/tt-metalium/fabric_edm_types.hpp",
    "structs::ENDL": "tt_metal/hw/inc/debug/dprint.h",
    "structs::EdmFabricReceiverChannelCounters": "tt_metal/api/tt-metalium/edm_fabric_counters.hpp",
    "structs::EdmFabricSenderChannelCounters": "tt_metal/api/tt-metalium/edm_fabric_counters.hpp",
    "structs::EthernetConfig": "tt_metal/api/tt-metalium/kernel_types.hpp",
    "structs::EthernetConfigDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::Event": "tt_metal/api/tt-metalium/event.hpp",
    "structs::ExternalOperation": "ttnn/api/ttnn/operation.hpp",
    "structs::ExternallyOwnedState": "tt_metal/api/tt-metalium/mesh_buffer.hpp",
    "structs::F32": "tt_metal/hw/inc/debug/dprint.h",
    "structs::FDKernelEdmConnectionAttributes": "tt_metal/impl/dispatch/kernel_config/fd_kernel.hpp",
    "structs::FIXED": "tt_metal/hw/inc/debug/dprint.h",
    "structs::FabricEriscDatamoverConfig": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "structs::FabricEriscDatamoverOptions": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "structs::FabricRiscConfig": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "structs::HEX": "tt_metal/hw/inc/debug/dprint.h",
    "structs::HostStorage": "ttnn/api/ttnn/tensor/storage.hpp",
    "structs::InterleavedAddrGen": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "structs::InterleavedAddrGenFast": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "structs::InterleavedPow2AddrGen": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "structs::InterleavedPow2AddrGenFast": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "structs::KernelDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::KernelGroup": "tt_metal/impl/program/program_impl.hpp",
    "structs::KernelSource": "tt_metal/api/tt-metalium/kernel.hpp",
    "structs::LaunchMsgData": "tt_metal/impl/program/program_command_sequence.hpp",
    "structs::LocalCBInterface": "tt_metal/hw/inc/circular_buffer.h",
    "structs::LowLatencyMeshPacketHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::LowLatencyMeshRoutingFields": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::LowLatencyPacketHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::LowLatencyRoutingFields": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::MemoryView": "tt_metal/api/tt-metalium/memory_reporter.hpp",
    "structs::MeshComposerConfig": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "structs::MeshCoreCoord": "tt_metal/api/tt-metalium/mesh_socket.hpp",
    "structs::MeshDeviceOperationAdapter": "ttnn/api/ttnn/mesh_device_operation_adapter.hpp",
    "structs::MeshMapperConfig": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "structs::MeshPacketHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::MeshWorkloadFactory": "ttnn/api/ttnn/old_infra_device_operation.hpp",
    "structs::MeshWorkloadFactoryAdapter": "ttnn/api/ttnn/mesh_device_operation_adapter.hpp",
    "structs::MultiDeviceEvent": "ttnn/api/ttnn/events.hpp",
    "structs::MultiDeviceGlobalSemaphore": "ttnn/api/ttnn/global_semaphore.hpp",
    "structs::MulticastRoutingCommandHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::NdShardSpec": "ttnn/api/ttnn/tensor/types.hpp",
    "structs::NocMulticastAtomicIncCommandHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::NocMulticastCommandHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::NocUnicastAtomicIncCommandHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::NocUnicastAtomicIncFusedCommandHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::NocUnicastCommandHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::NocUnicastInlineWriteCommandHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::NopClrOperationParams": "tt_metal/hw/inc/blackhole/cmd_params.h",
    "structs::OCT": "tt_metal/hw/inc/debug/dprint.h",
    "structs::OStreamJoin": "tt_metal/api/tt-metalium/assert.hpp",
    "structs::OldInfraDeviceOperation": "ttnn/api/ttnn/old_infra_device_operation.hpp",
    "structs::OpPerformanceModelGeneral": "ttnn/api/ttnn/operation.hpp",
    "structs::OperationInfo": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "structs::OverlayField": "tt_metal/hw/inc/wormhole/noc/noc_overlay_parameters.hpp",
    "structs::OverlayReg": "tt_metal/hw/inc/wormhole/noc/noc_overlay_parameters.hpp",
    "structs::OwnedBufferState": "tt_metal/api/tt-metalium/mesh_buffer.hpp",
    "structs::PackOperation": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::PackParams": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::PacketHeader": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::PacketHeaderBase": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::PageMapping": "tt_metal/hw/inc/accessor/sharded_accessor.h",
    "structs::PartialPageSpec": "tt_metal/impl/buffers/dispatch.hpp",
    "structs::Private": "tt_metal/api/tt-metalium/buffer.hpp",
    "structs::ProfilerInfo": "ttnn/api/ttnn/operation.hpp",
    "structs::ProgramCache": "tt_metal/api/tt-metalium/program_cache.hpp",
    "structs::ProgramCommandSequence": "tt_metal/impl/program/program_command_sequence.hpp",
    "structs::ProgramConfig": "tt_metal/impl/program/program_impl.hpp",
    "structs::ProgramDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::ProgramDispatchMetadata": "tt_metal/impl/program/dispatch.hpp",
    "structs::ProgramFactory": "ttnn/api/ttnn/old_infra_device_operation.hpp",
    "structs::ProgramOffsetsState": "tt_metal/impl/program/program_impl.hpp",
    "structs::ProgramTransferInfo": "tt_metal/impl/program/program_device_map.hpp",
    "structs::QuinaryOperationParams_added": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::RAISE": "tt_metal/hw/inc/debug/dprint.h",
    "structs::ReadBufferDescriptor": "tt_metal/impl/buffers/dispatch.hpp",
    "structs::ReadCoreDataDescriptor": "tt_metal/impl/device/dispatch.hpp",
    "structs::ReadEventDescriptor": "tt_metal/impl/event/dispatch.hpp",
    "structs::ReaderConfigDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::ReaderDataMovementConfig": "tt_metal/api/tt-metalium/kernel_types.hpp",
    "structs::RelativeCoreCoord": "tt_metal/api/tt-metalium/core_coord.hpp",
    "structs::RemoteReceiverCBInterface": "tt_metal/hw/inc/circular_buffer.h",
    "structs::RemoteSenderCBInterface": "tt_metal/hw/inc/circular_buffer.h",
    "structs::Replicate": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "structs::ReplicateTensor": "ttnn/api/ttnn/distributed/distributed_tensor_config.hpp",
    "structs::ReplicatedBufferConfig": "tt_metal/api/tt-metalium/mesh_buffer.hpp",
    "structs::ResourceUsage": "ttnn/api/ttnn/graph/graph_query_op_constraints.hpp",
    "structs::RouterEdge": "tt_metal/api/tt-metalium/mesh_graph.hpp",
    "structs::RoutingFields": "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp",
    "structs::RtaUpdate": "tt_metal/impl/program/program_command_sequence.hpp",
    "structs::RuntimeArgsData": "tt_metal/api/tt-metalium/runtime_args_data.hpp",
    "structs::RuntimeQueryResponse": "ttnn/api/ttnn/graph/graph_query_op_runtime.hpp",
    "structs::SETPRECISION": "tt_metal/hw/inc/debug/dprint.h",
    "structs::SETW": "tt_metal/hw/inc/debug/dprint.h",
    "structs::SectionHeader": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "structs::SemaphoreDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::SenderWorkerAdapterSpec": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "structs::SfpuParams": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::ShapeWrapper": "tt_metal/hw/inc/accessor/detail.h",
    "structs::Shard": "ttnn/api/ttnn/distributed/distributed_tensor.hpp",
    "structs::ShardDataTransfer": "tt_metal/api/tt-metalium/mesh_command_queue.hpp",
    "structs::ShardDivisionSpec": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "structs::ShardMesh": "ttnn/api/ttnn/distributed/distributed_tensor_config.hpp",
    "structs::ShardSpec": "tt_metal/api/tt-metalium/buffer.hpp",
    "structs::ShardSpecBuffer": "tt_metal/api/tt-metalium/buffer.hpp",
    "structs::ShardTensor": "ttnn/api/ttnn/distributed/distributed_tensor_config.hpp",
    "structs::ShardTensor2D": "ttnn/api/ttnn/distributed/distributed_tensor_config.hpp",
    "structs::ShardedAccessor": "tt_metal/hw/inc/accessor/sharded_accessor.h",
    "structs::ShardedBufferConfig": "tt_metal/api/tt-metalium/buffer.hpp",
    "structs::ShardedBufferReadDispatchParams": "tt_metal/impl/buffers/dispatch.hpp",
    "structs::SliceZParams_added": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::SmallVector": "tt_metal/api/tt-metalium/small_vector.hpp",
    "structs::SocketConfig": "tt_metal/api/tt-metalium/mesh_socket.hpp",
    "structs::SocketConnection": "tt_metal/api/tt-metalium/mesh_socket.hpp",
    "structs::SocketMemoryConfig": "tt_metal/api/tt-metalium/mesh_socket.hpp",
    "structs::SocketReceiverInterface": "tt_metal/hw/inc/socket.h",
    "structs::SocketSenderInterface": "tt_metal/hw/inc/socket.h",
    "structs::Statistics": "tt_metal/api/tt-metalium/allocator_types.hpp",
    "structs::Status": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "structs::StreamBinaryParams": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::StreamConvParams": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::StreamFullConnParams": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::StreamPoolParams": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::StreamUnaryBinaryCommonParams": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::StreamUnaryParams": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::SystemMemoryCQInterface": "tt_metal/impl/dispatch/system_memory_cq_interface.hpp",
    "structs::TAssertEquality": "tt_metal/hw/inc/wormhole/eth_l1_address_map.h",
    "structs::TYPED_U32_ARRAY": "tt_metal/hw/inc/debug/dprint.h",
    "structs::TensAddr": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "structs::TensorInfo": "ttnn/api/ttnn/graph/graph_trace_utils.hpp",
    "structs::TerminationInfo": "tt_metal/impl/dispatch/kernel_config/fd_kernel.hpp",
    "structs::TernaryOperationParams_added": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::TernaryOperationWithBiasParams_added": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::Tile": "tt_metal/api/tt-metalium/tile.hpp",
    "structs::TileDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::TileHeader": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "structs::TraceBuffer": "tt_metal/impl/trace/trace_buffer.hpp",
    "structs::TraceDescriptor": "tt_metal/impl/trace/trace_buffer.hpp",
    "structs::TraceDispatchMetadata": "tt_metal/impl/trace/dispatch.hpp",
    "structs::TraceNode": "tt_metal/impl/trace/trace_node.hpp",
    "structs::TraceScope": "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp",
    "structs::TraceWorkerDescriptor": "tt_metal/impl/trace/trace_buffer.hpp",
    "structs::U32": "tt_metal/hw/inc/debug/dprint.h",
    "structs::U32_ARRAY": "tt_metal/hw/inc/debug/dprint.h",
    "structs::UnaryOperationParams": "tt_metal/hw/inc/wormhole/cmd_params.h",
    "structs::Vertex": "ttnn/api/ttnn/graph/graph_processor.hpp",
    "structs::WAIT": "tt_metal/hw/inc/debug/dprint.h",
    "structs::WorkerXY": "tt_metal/api/tt-metalium/fabric_edm_types.hpp",
    "structs::WriterConfigDescriptor": "tt_metal/api/tt-metalium/program_descriptors.hpp",
    "structs::WriterDataMovementConfig": "tt_metal/api/tt-metalium/kernel_types.hpp",
    "structs::ZoneDetails": "tt_metal/impl/profiler/profiler.hpp",
    "structs::address_map": "tt_metal/hw/inc/wormhole/dram_address_map.h",
    "structs::addressable_core_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::all_eth_mailbox_t": "tt_metal/hw/inc/blackhole/eth_fw_api.h",
    "structs::attributes_t": "ttnn/api/ttnn/config.hpp",
    "structs::bfloat4_b": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "structs::bfloat8_b": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "structs::coord_t": "tt_metal/api/tt-metalium/fabric_edm_types.hpp",
    "structs::core_descriptor_t": "tt_metal/api/tt-metalium/core_descriptor.hpp",
    "structs::core_info_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::debug_assert_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::debug_insert_delays_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::debug_pause_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::debug_ring_buf_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::debug_sanitize_noc_addr_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::debug_stack_usage_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::debug_waypoint_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::demux_dependent_config_t": "tt_metal/impl/dispatch/kernel_config/demux.hpp",
    "structs::demux_static_config_t": "tt_metal/impl/dispatch/kernel_config/demux.hpp",
    "structs::dispatch_core_placement_t": "tt_metal/impl/dispatch/dispatch_core_manager.hpp",
    "structs::dispatch_dependent_config_t": "tt_metal/impl/dispatch/kernel_config/dispatch.hpp",
    "structs::dispatch_s_dependent_config_t": "tt_metal/impl/dispatch/kernel_config/dispatch_s.hpp",
    "structs::dispatch_s_static_config_t": "tt_metal/impl/dispatch/kernel_config/dispatch_s.hpp",
    "structs::dispatch_static_config_t": "tt_metal/impl/dispatch/kernel_config/dispatch.hpp",
    "structs::dprint_buf_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::edm_termination_info_t": "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp",
    "structs::erisc_info_t": "tt_metal/hw/inc/ethernet/tunneling.h",
    "structs::eth_api_table_t": "tt_metal/hw/inc/blackhole/eth_fw_api.h",
    "structs::eth_channel_sync_t": "tt_metal/hw/inc/ethernet/tunneling.h",
    "structs::eth_mailbox_t": "tt_metal/hw/inc/blackhole/eth_fw_api.h",
    "structs::eth_router_dependent_config_t": "tt_metal/impl/dispatch/kernel_config/eth_router.hpp",
    "structs::eth_router_static_config_t": "tt_metal/impl/dispatch/kernel_config/eth_router.hpp",
    "structs::eth_tunneler_dependent_config_t": "tt_metal/impl/dispatch/kernel_config/eth_tunneler.hpp",
    "structs::eth_tunneler_static_config_t": "tt_metal/impl/dispatch/kernel_config/eth_tunneler.hpp",
    "structs::eth_word_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::fabric_router_l1_config_t": "tt_metal/api/tt-metalium/fabric_host_interface.h",
    "structs::fifo_ctl_t": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "structs::go_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::has_create_program": "ttnn/api/ttnn/operation.hpp",
    "structs::hash_pair": "tt_metal/api/tt-metalium/mesh_graph.hpp",
    "structs::io_queue_pointers_t": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "structs::is_mesh_device_operation_adapter": "ttnn/api/ttnn/mesh_device_operation_adapter.hpp",
    "structs::is_supported_dtype": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "structs::kernel_bins_transfer_info": "tt_metal/impl/program/program_device_map.hpp",
    "structs::kernel_config_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::launch_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::mailboxes_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::metal_SocDescriptor": "tt_metal/api/tt-metalium/metal_soc_descriptor.h",
    "structs::mover_config_t": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "structs::mover_config_u": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "structs::multicast_transfer_info": "tt_metal/impl/program/program_device_map.hpp",
    "structs::mux_dependent_config_t": "tt_metal/impl/dispatch/kernel_config/mux.hpp",
    "structs::mux_static_config_t": "tt_metal/impl/dispatch/kernel_config/mux.hpp",
    "structs::ncrisc_halt_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::noc_selection_t": "tt_metal/impl/dispatch/kernel_config/fd_kernel.hpp",
    "structs::operation_key_t": "ttnn/api/ttnn/decorators.hpp",
    "structs::operation_name_key_t": "ttnn/api/ttnn/decorators.hpp",
    "structs::packer_config_t": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "structs::packer_config_u": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "structs::pair_hash": "tt_metal/impl/profiler/profiler.hpp",
    "structs::port_direction_t": "tt_metal/api/tt-metalium/fabric_host_interface.h",
    "structs::prefetch_dependent_config_t": "tt_metal/impl/dispatch/kernel_config/prefetch.hpp",
    "structs::prefetch_static_config_t": "tt_metal/impl/dispatch/kernel_config/prefetch.hpp",
    "structs::profiler_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::receiver_socket_md": "tt_metal/hw/inc/socket.h",
    "structs::registered_operation_t": "ttnn/api/ttnn/decorators.hpp",
    "structs::relay_mux_client_config": "tt_metal/impl/dispatch/kernel_config/relay_mux.hpp",
    "structs::relay_mux_static_config": "tt_metal/impl/dispatch/kernel_config/relay_mux.hpp",
    "structs::riscv_debug_reg_dbg_dbus_cntl_t": "tt_metal/hw/inc/wormhole/tensix.h",
    "structs::riscv_debug_reg_dbg_l1_mem_reg2_t": "tt_metal/hw/inc/wormhole/tensix.h",
    "structs::routing_info_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::routing_table_t": "tt_metal/api/tt-metalium/fabric_host_interface.h",
    "structs::rta_offset_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::sender_socket_md": "tt_metal/hw/inc/socket.h",
    "structs::set_operation_t": "ttnn/api/ttnn/decorators.hpp",
    "structs::shared_variables_t": "ttnn/api/ttnn/old_infra_device_operation.hpp",
    "structs::stack_usage_info_t": "tt_metal/impl/debug/watcher_device_reader.hpp",
    "structs::subordinate_sync_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::tensor_args_t": "ttnn/api/ttnn/old_infra_device_operation.hpp",
    "structs::tile_descriptor_t": "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h",
    "structs::tile_info_t": "tt_metal/hw/inc/debug/dprint_tile.h",
    "structs::transfer_info": "tt_metal/impl/program/program_device_map.hpp",
    "structs::usage_t": "tt_metal/hw/inc/dev_msgs.h",
    "structs::watcher_msg_t": "tt_metal/hw/inc/dev_msgs.h",
    "template_functions::CachedProgramFactory": "tt_metal/api/tt-metalium/program_cache.hpp",
    "template_functions::DebugPrintTypeToId": "tt_metal/hw/inc/debug/dprint.h",
    "template_functions::DebugPrintTypeToSize": "tt_metal/hw/inc/debug/dprint.h",
    "template_functions::DeviceCommand": "tt_metal/impl/dispatch/device_command.hpp",
    "template_functions::DeviceOperation": "ttnn/api/ttnn/operation.hpp",
    "template_functions::EnqueueReadBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "template_functions::EnqueueReadMeshBuffer": "tt_metal/api/tt-metalium/distributed.hpp",
    "template_functions::EnqueueReadSubBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "template_functions::EnqueueWriteBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "template_functions::EnqueueWriteMeshBuffer": "tt_metal/api/tt-metalium/distributed.hpp",
    "template_functions::EnqueueWriteSubBuffer": "tt_metal/api/tt-metalium/host_api.hpp",
    "template_functions::HostBuffer": "tt_metal/api/tt-metalium/host_buffer.hpp",
    "template_functions::ReadFromBuffer": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "template_functions::ReadShard": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "template_functions::ShapeBase": "tt_metal/api/tt-metalium/shape_base.hpp",
    "template_functions::WriteShard": "tt_metal/api/tt-metalium/distributed.hpp",
    "template_functions::WriteToBuffer": "tt_metal/api/tt-metalium/tt_metal.hpp",
    "template_functions::add_dispatch_write_host": "tt_metal/impl/dispatch/device_command.hpp",
    "template_functions::add_dispatch_write_linear": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "template_functions::add_dispatch_write_packed": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "template_functions::add_dispatch_write_paged": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "template_functions::add_int32_tile": "compute_kernel_api/add_int32_sfpu.h",
    "template_functions::add_tiles_bcast": "compute_kernel_api/bcast.h",
    "template_functions::align_local_cbs_to_remote_cb": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "template_functions::all_reduce": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "template_functions::all_tensors_have_uniform_storage": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "template_functions::any_tiles_bcast": "compute_kernel_api/bcast.h",
    "template_functions::apply_override_runtime_arguments": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "template_functions::assert_operation_in_correct_namespace": "ttnn/api/ttnn/decorators.hpp",
    "template_functions::binary_dest_reuse_tiles": "compute_kernel_api/eltwise_binary.h",
    "template_functions::binary_dest_reuse_tiles_init": "compute_kernel_api/eltwise_binary.h",
    "template_functions::binary_tiles_init": "compute_kernel_api/eltwise_binary.h",
    "template_functions::bitmask": "tt_metal/hw/inc/wormhole/tensix.h",
    "template_functions::capture_op_trace": "ttnn/api/ttnn/graph/graph_query_op_runtime.hpp",
    "template_functions::cast_vec": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::chunk": "ttnn/api/ttnn/tensor/xtensor/partition.hpp",
    "template_functions::chunk_ndim": "ttnn/api/ttnn/tensor/xtensor/partition.hpp",
    "template_functions::compute_program_hash": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::compute_strided_view": "ttnn/api/ttnn/tensor/xtensor/partition.hpp",
    "template_functions::concat": "ttnn/api/ttnn/tensor/xtensor/partition.hpp",
    "template_functions::convert_layout": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "template_functions::convert_layout_row_major_to_tile": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::convert_layout_tile_nfaces_to_tile_swizzled": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "template_functions::convert_layout_tile_swizzled_to_tile_nfaces": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "template_functions::convert_layout_tile_to_row_major": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::convert_to_data_type": "ttnn/api/ttnn/tensor/types.hpp",
    "template_functions::convert_u32_to_bfp": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "template_functions::copy_to_mesh_tensor": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::core_spec_from_flatbuffer": "tt_metal/impl/flatbuffer/program_types_from_flatbuffer.hpp",
    "template_functions::create_and_cache_mesh_workload": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::create_packed_bfp_packed_as_u32": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "template_functions::decltype": "tt_metal/api/tt-metalium/mesh_coord.hpp",
    "template_functions::decode_tensor_data": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::default_create_output_tensors": "ttnn/api/ttnn/operation.hpp",
    "template_functions::dispatch": "ttnn/api/ttnn/tensor/tensor_impl_wrapper.hpp",
    "template_functions::dispatch_to_mesh_workload_factory": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::dprint_tensix_dest_reg": "tt_metal/hw/inc/debug/dprint_tensix.h",
    "template_functions::dynamic_noc_local_barrier_init": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::encode_tensor_data": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::enqueue_command": "tt_metal/impl/dispatch/hardware_command_queue.hpp",
    "template_functions::enqueue_mesh_workload": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::erf_tile": "compute_kernel_api/eltwise_unary/erf_erfc.h",
    "template_functions::erf_tile_init": "compute_kernel_api/eltwise_unary/erf_erfc.h",
    "template_functions::erfc_tile": "compute_kernel_api/eltwise_unary/erf_erfc.h",
    "template_functions::erfc_tile_init": "compute_kernel_api/eltwise_unary/erf_erfc.h",
    "template_functions::eth_send_packet": "tt_metal/hw/inc/ethernet/tunneling.h",
    "template_functions::eth_write_remote_reg": "tt_metal/hw/inc/ethernet/tunneling.h",
    "template_functions::execute_time_and_release_trace": "ttnn/api/ttnn/graph/graph_query_op_runtime.hpp",
    "template_functions::exp_tile": "compute_kernel_api/eltwise_unary/exp.h",
    "template_functions::exp_tile_init": "compute_kernel_api/eltwise_unary/exp.h",
    "template_functions::extract_output_tensor": "ttnn/api/ttnn/graph/graph_query_op_constraints.hpp",
    "template_functions::extract_shard": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::extract_tensor_coordinates": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "template_functions::fabric_set_unicast_route": "tt_metal/hw/inc/socket_api.h",
    "template_functions::filter_tensor_shards": "ttnn/api/ttnn/mesh_device_operation_utils.hpp",
    "template_functions::fold": "tt_metal/hw/inc/debug/waypoint.h",
    "template_functions::from_borrowed_data": "ttnn/api/ttnn/tensor/tensor.hpp",
    "template_functions::from_span": "ttnn/api/ttnn/tensor/tensor.hpp",
    "template_functions::from_vector": "ttnn/api/ttnn/tensor/tensor.hpp",
    "template_functions::from_xtensor": "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp",
    "template_functions::gelu_tile": "compute_kernel_api/eltwise_unary/gelu.h",
    "template_functions::gelu_tile_init": "compute_kernel_api/eltwise_unary/gelu.h",
    "template_functions::get": "ttnn/api/ttnn/config.hpp",
    "template_functions::get_allocator_alignment": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "template_functions::get_arg_val": "compute_kernel_api/common.h",
    "template_functions::get_as": "ttnn/api/ttnn/tensor/host_buffer/functions.hpp",
    "template_functions::get_bank_and_offset": "tt_metal/hw/inc/accessor/sharded_accessor.h",
    "template_functions::get_bank_index": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "template_functions::get_bank_offset": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "template_functions::get_bank_offset_index": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "template_functions::get_batch_size": "ttnn/api/ttnn/tensor/tensor_utils.hpp",
    "template_functions::get_common_arg_val": "compute_kernel_api/common.h",
    "template_functions::get_cq_completion_rd_ptr": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "template_functions::get_cq_completion_wr_ptr": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "template_functions::get_cq_issue_rd_ptr": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "template_functions::get_cq_issue_wr_ptr": "tt_metal/impl/dispatch/command_queue_common.hpp",
    "template_functions::get_ct_arg": "tt_metal/hw/inc/compile_time_args.h",
    "template_functions::get_interleaved_addr_gen": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "template_functions::get_log_base2_of_allocator_alignment": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "template_functions::get_max_write_packed_sub_cmds": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "template_functions::get_noc_addr_from_bank_id": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "template_functions::get_noc_counter_address": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::get_noc_counter_val": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::get_noc_xy": "tt_metal/hw/inc/dataflow_api_addrgen.h",
    "template_functions::get_operation_name": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::get_semaphore": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::get_shape_from_xarray": "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp",
    "template_functions::handle_mesh_adapter_cache_hit": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::hash_combine": "tt_metal/api/tt-metalium/utils.hpp",
    "template_functions::hash_operation": "ttnn/api/ttnn/operation.hpp",
    "template_functions::helper": "tt_metal/hw/inc/debug/waypoint.h",
    "template_functions::implements_compute_output_specs": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_compute_output_specs_with_optional_output_tensors": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_compute_program_hash": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_compute_program_hash_with_optional_input_tensors": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_create_mesh_workload": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_create_mesh_workload_with_optional_input_tensors": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_create_op_performance_model": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_create_output_tensors": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_create_output_tensors_with_optional_output_tensors": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_create_program": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_create_program_with_optional_input_tensors": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_get_parallelization_strategy": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_get_type_name": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_validate": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_validate_with_optional_input_tensors": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_validate_with_output_tensors": "ttnn/api/ttnn/operation.hpp",
    "template_functions::implements_validate_with_output_tensors_and_optional_input_tensors": "ttnn/api/ttnn/operation.hpp",
    "template_functions::inc_noc_counter_val": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::init_bcast": "compute_kernel_api/bcast.h",
    "template_functions::insert_write_packed_payloads": "tt_metal/impl/dispatch/device_command_calculator.hpp",
    "template_functions::invoke": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::invoke_composite": "ttnn/api/ttnn/decorators.hpp",
    "template_functions::is_device_operation": "ttnn/api/ttnn/operation.hpp",
    "template_functions::kernel_config_from_flatbuffer": "tt_metal/impl/flatbuffer/program_types_from_flatbuffer.hpp",
    "template_functions::l1_cast": "tt_metal/hw/inc/wormhole/c_tensix_core.h",
    "template_functions::launch_on_single_device": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::launch_on_worker_thread": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::launch_operation_with_adapter": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::log": "ttnn/api/ttnn/decorators.hpp",
    "template_functions::log_debug": "tt_metal/api/tt-metalium/logger.hpp",
    "template_functions::log_error": "tt_metal/api/tt-metalium/logger.hpp",
    "template_functions::log_fatal": "tt_metal/api/tt-metalium/logger.hpp",
    "template_functions::log_info": "tt_metal/api/tt-metalium/logger.hpp",
    "template_functions::log_level_type": "tt_metal/api/tt-metalium/logger.hpp",
    "template_functions::log_operation": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::log_trace_": "tt_metal/api/tt-metalium/logger.hpp",
    "template_functions::log_warning": "tt_metal/api/tt-metalium/logger.hpp",
    "template_functions::make_struct_from_sequence_wrapper": "tt_metal/hw/inc/accessor/detail.h",
    "template_functions::map_index_to_variant": "ttnn/api/ttnn/device_operation.hpp",
    "template_functions::matmul_tiles_math": "compute_kernel_api/matmul.h",
    "template_functions::memcpy_to_device": "tt_metal/impl/dispatch/memcpy.hpp",
    "template_functions::merge": "tt_metal/api/tt-metalium/core_coord.hpp",
    "template_functions::mul_tiles_bcast": "compute_kernel_api/bcast.h",
    "template_functions::ncrisc_noc_blitz_write_setup": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::ncrisc_noc_fast_read": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::ncrisc_noc_fast_read_any_len": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::ncrisc_noc_fast_read_with_transaction_id": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::ncrisc_noc_fast_write": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::ncrisc_noc_fast_write_any_len": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::ncrisc_noc_fast_write_any_len_loopback_src": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::ncrisc_noc_fast_write_exclude_region": "tt_metal/hw/inc/blackhole/noc_nonblocking_api.h",
    "template_functions::ncrisc_noc_fast_write_loopback_src": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::noc_async_read": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_read_one_packet_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_read_page": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_read_partial_page": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_read_tile": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_read_tile_dram_sharded_set_state": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_read_tile_dram_sharded_with_state_with_trid": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_read_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_write": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_write_multicast": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_write_one_packet_set_state": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_write_one_packet_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_write_one_packet_with_trid": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_write_one_packet_with_trid_set_state": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_write_one_packet_with_trid_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_write_page": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_async_write_tile": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_fast_atomic_increment": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::noc_fast_write_dw_inline": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::noc_inline_dw_write": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_inline_dw_write_set_state": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_inline_dw_write_with_state": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::noc_semaphore_inc": "tt_metal/hw/inc/dataflow_api.h",
    "template_functions::pack_field": "tt_metal/hw/inc/wormhole/tensix.h",
    "template_functions::pack_fp32_vec_as_bfp_tiles": "tt_metal/api/tt-metalium/blockfloat_common.hpp",
    "template_functions::pack_tile": "compute_kernel_api/pack.h",
    "template_functions::pack_untilize_block": "compute_kernel_api/pack_untilize.h",
    "template_functions::pack_untilize_dst": "compute_kernel_api/pack_untilize.h",
    "template_functions::pack_untilize_dst_init_short": "compute_kernel_api/pack_untilize.h",
    "template_functions::pack_untilize_init": "compute_kernel_api/pack_untilize.h",
    "template_functions::pack_untilize_init_short": "compute_kernel_api/pack_untilize.h",
    "template_functions::packed_buffer_size_bytes": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::pad": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::program_base_addr_on_core": "tt_metal/api/tt-metalium/program.hpp",
    "template_functions::query_op_constraints": "ttnn/api/ttnn/graph/graph_query_op_constraints.hpp",
    "template_functions::query_op_runtime": "ttnn/api/ttnn/graph/graph_query_op_runtime.hpp",
    "template_functions::query_output_info": "ttnn/api/ttnn/graph/graph_operation_queries.hpp",
    "template_functions::query_peak_L1_memory_usage": "ttnn/api/ttnn/graph/graph_operation_queries.hpp",
    "template_functions::query_trace": "ttnn/api/ttnn/graph/graph_operation_queries.hpp",
    "template_functions::read_data_from_device_buffer": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::reconfig_data_format": "compute_kernel_api/reconfig_data_format.h",
    "template_functions::reconfig_data_format_srca": "compute_kernel_api/reconfig_data_format.h",
    "template_functions::reconfig_data_format_srcb": "compute_kernel_api/reconfig_data_format.h",
    "template_functions::reconfigure_unary_bcast": "compute_kernel_api/bcast.h",
    "template_functions::reduce": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "template_functions::reduce_init": "compute_kernel_api/reduce.h",
    "template_functions::reduce_init_delta": "compute_kernel_api/reduce.h",
    "template_functions::reduce_init_delta_math": "compute_kernel_api/reduce.h",
    "template_functions::reduce_init_delta_no_pack": "compute_kernel_api/reduce.h",
    "template_functions::reduce_init_short": "compute_kernel_api/reduce.h",
    "template_functions::reduce_revert_delta": "compute_kernel_api/reduce.h",
    "template_functions::reduce_scatter": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "template_functions::reduce_tile": "compute_kernel_api/reduce.h",
    "template_functions::reduce_tile_math": "compute_kernel_api/reduce.h",
    "template_functions::register_operation": "ttnn/api/ttnn/decorators.hpp",
    "template_functions::register_operation_impl": "ttnn/api/ttnn/decorators.hpp",
    "template_functions::register_optional_type": "ttnn/api/ttnn/graph/graph_argument_serializer.hpp",
    "template_functions::register_small_vector": "ttnn/api/ttnn/graph/graph_argument_serializer.hpp",
    "template_functions::register_type": "ttnn/api/ttnn/graph/graph_argument_serializer.hpp",
    "template_functions::remote_cb_push_back_and_write_pages": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "template_functions::reserve_space": "tt_metal/impl/dispatch/device_command.hpp",
    "template_functions::resize_remote_receiver_cb_interface": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "template_functions::resize_remote_sender_cb_interface": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "template_functions::rsqrt_tile": "compute_kernel_api.h",
    "template_functions::rsqrt_tile_init": "compute_kernel_api.h",
    "template_functions::run": "ttnn/api/ttnn/run_operation.hpp",
    "template_functions::run_with_autoformat": "ttnn/api/ttnn/run_operation.hpp",
    "template_functions::run_without_autoformat": "ttnn/api/ttnn/run_operation.hpp",
    "template_functions::scan": "tt_metal/api/tt-metalium/distributed_context.hpp",
    "template_functions::set": "ttnn/api/ttnn/config.hpp",
    "template_functions::set_noc_counter_val": "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h",
    "template_functions::setup_remote_cb_interfaces": "tt_metal/hw/inc/circular_buffer_init.h",
    "template_functions::sigmoid_tile": "compute_kernel_api.h",
    "template_functions::sigmoid_tile_init": "compute_kernel_api.h",
    "template_functions::span_to_xtensor_view": "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp",
    "template_functions::stream_get_push_flushed": "tt_metal/hw/inc/wormhole/stream_interface.h",
    "template_functions::sub_int32_tile": "compute_kernel_api/sub_int32_sfpu.h",
    "template_functions::sub_tiles_bcast": "compute_kernel_api/bcast.h",
    "template_functions::tilizeA_B_reduce_init": "compute_kernel_api/tilize.h",
    "template_functions::tilize_nfaces": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "template_functions::tilize_swizzled": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "template_functions::to_device": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::to_device_mesh_tensor": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::to_host": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::to_host_mesh_tensor": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::to_layout": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::to_layout_bfloat": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::to_string": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::to_vector": "ttnn/api/ttnn/tensor/tensor.hpp",
    "template_functions::to_xtensor": "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp",
    "template_functions::topk_merge": "compute_kernel_api.h",
    "template_functions::traced_invoke": "ttnn/api/ttnn/decorators.hpp",
    "template_functions::track_function_end": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "template_functions::track_function_start": "tt_metal/api/tt-metalium/graph_tracking.hpp",
    "template_functions::tt_assert": "tt_metal/api/tt-metalium/assert.hpp",
    "template_functions::tt_throw": "tt_metal/api/tt-metalium/assert.hpp",
    "template_functions::tt_throw_impl": "tt_metal/api/tt-metalium/assert.hpp",
    "template_functions::typecast_tile": "compute_kernel_api/eltwise_unary/typecast.h",
    "template_functions::udivsi3_const_divisor": "tt_metal/hw/inc/mod_div_lib.h",
    "template_functions::umodsi3_const_divisor": "tt_metal/hw/inc/mod_div_lib.h",
    "template_functions::unary_bcast": "compute_kernel_api/bcast.h",
    "template_functions::unary_bcast_init": "compute_kernel_api/bcast.h",
    "template_functions::underlying_type": "tt_metal/api/tt-metalium/utils.hpp",
    "template_functions::unpack_tilizeA_B_block": "compute_kernel_api/tilize.h",
    "template_functions::unpad": "ttnn/api/ttnn/tensor/tensor_impl.hpp",
    "template_functions::untilize_block": "compute_kernel_api/untilize.h",
    "template_functions::untilize_nfaces": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "template_functions::untilize_swizzled": "tt_metal/api/tt-metalium/tilize_utils.hpp",
    "template_functions::update_pages_acked": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "template_functions::update_pages_sent": "tt_metal/hw/inc/remote_circular_buffer_api.h",
    "template_functions::validate_datatype": "ttnn/api/ttnn/tensor/host_buffer/functions.hpp",
    "template_functions::view_as": "tt_metal/api/tt-metalium/host_buffer.hpp",
    "template_functions::write_debug_waypoint": "tt_metal/hw/inc/debug/waypoint.h",
    "template_functions::xtensor_to_span": "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp",
    "template_functions::zero": "tt_metal/impl/dispatch/device_command.hpp",
    "usings::BufferType": "ttnn/api/ttnn/types.hpp",
    "usings::CONFIG": "ttnn/api/ttnn/config.hpp",
    "usings::CachedProgramFactory": "ttnn/api/ttnn/device_operation.hpp",
    "usings::Config": "ttnn/api/ttnn/config.hpp",
    "usings::CoreCoord": "ttnn/api/ttnn/types.hpp",
    "usings::CoreRange": "ttnn/api/ttnn/types.hpp",
    "usings::CoreRangeSet": "ttnn/api/ttnn/types.hpp",
    "usings::DataType": "ttnn/api/ttnn/types.hpp",
    "usings::FormatParams": "ttnn/api/ttnn/run_operation.hpp",
    "usings::GlobalCircularBuffer": "ttnn/api/ttnn/types.hpp",
    "usings::GlobalSemaphore": "ttnn/api/ttnn/types.hpp",
    "usings::Layout": "ttnn/api/ttnn/types.hpp",
    "usings::MemoryConfig": "ttnn/api/ttnn/types.hpp",
    "usings::MeshContainer": "tt_metal/api/tt-metalium/mesh_graph.hpp",
    "usings::MeshCoordinate": "ttnn/api/ttnn/distributed/types.hpp",
    "usings::MeshCoordinateRange": "ttnn/api/ttnn/distributed/types.hpp",
    "usings::MeshCoordinateRangeSet": "ttnn/api/ttnn/distributed/types.hpp",
    "usings::MeshDevice": "ttnn/api/ttnn/distributed/types.hpp",
    "usings::MeshDeviceConfig": "ttnn/api/ttnn/distributed/types.hpp",
    "usings::MeshDeviceView": "ttnn/api/ttnn/distributed/types.hpp",
    "usings::MeshShape": "ttnn/api/ttnn/distributed/types.hpp",
    "usings::Shape": "ttnn/api/ttnn/tensor/shape/shape.hpp",
    "usings::ShapeBase": "ttnn/api/ttnn/tensor/layout/alignment.hpp",
    "usings::ShardMode": "ttnn/api/ttnn/types.hpp",
    "usings::ShardOrientation": "ttnn/api/ttnn/types.hpp",
    "usings::SmallVector": "tt_metal/api/tt-metalium/small_vector.hpp",
    "usings::StorageType": "ttnn/api/ttnn/types.hpp",
    "usings::SubDevice": "ttnn/api/ttnn/types.hpp",
    "usings::SubDeviceManagerId": "ttnn/api/ttnn/types.hpp",
    "usings::SystemMesh": "ttnn/api/ttnn/distributed/types.hpp",
    "usings::TensorMemoryLayout": "ttnn/api/ttnn/types.hpp",
    "usings::cbegin": "ttnn/api/ttnn/tensor/layout/alignment.hpp",
    "usings::cend": "ttnn/api/ttnn/tensor/layout/alignment.hpp",
    "usings::duration": "tt_metal/impl/profiler/profiler.hpp",
    "usings::duration_cast": "tt_metal/impl/profiler/profiler.hpp",
    "usings::empty": "ttnn/api/ttnn/tensor/layout/alignment.hpp",
    "usings::get_memory_config": "ttnn/api/ttnn/core.hpp",
    "usings::has_storage_type_of": "ttnn/api/ttnn/core.hpp",
    "usings::nanoseconds": "tt_metal/impl/profiler/profiler.hpp",
    "usings::operator<<": "tt_metal/api/tt-metalium/small_vector.hpp",
    "usings::operator[]": "ttnn/api/ttnn/tensor/layout/alignment.hpp",
    "usings::register_operation": "ttnn/api/ttnn/decorators.hpp",
    "usings::set_printoptions": "ttnn/api/ttnn/core.hpp",
    "usings::size": "ttnn/api/ttnn/tensor/layout/alignment.hpp",
    "usings::small_vector": "tt_metal/api/tt-metalium/small_vector.hpp",
    "usings::steady_clock": "tt_metal/impl/profiler/profiler.hpp",
    "usings::string": "tt_metal/api/tt-metalium/utils.hpp",
    "usings::uint32_t": "tt_metal/api/tt-metalium/constants.hpp",
    "usings::view": "ttnn/api/ttnn/tensor/layout/alignment.hpp"
  },
  "headers": {
    "compute_kernel_api.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI unary_gt_tile(uint32_t idst, uint32_t param0)",
        "ALWI clear_compute_special_value_flags()",
        "ALWI asin_tile_init()",
        "ALWI max_tile_init()",
        "ALWI square_tile_init()",
        "ALWI sign_tile(uint32_t idst)",
        "ALWI dbg_unhalt()",
        "ALWI acos_tile(uint32_t idst)",
        "ALWI expm1_tile(uint32_t idst)",
        "ALWI nez_tile_init()",
        "ALWI gtz_tile(uint32_t idst)",
        "ALWI atan_tile_init()",
        "ALWI topk_rebuild(uint32_t idst, bool idir, int m_iter, int k, int logk, int skip_second)",
        "ALWI max_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI dbg_read_dest_acc_row(int row_addr, uint32_t* rd_data)",
        "ALWI gez_tile_init()",
        "ALWI unary_min_tile(uint32_t idst, uint32_t param0)",
        "ALWI ltz_tile_int32(uint32_t idst)",
        "ALWI tiled_prod_tile_init()",
        "ALWI unary_lt_tile(uint32_t idst, uint32_t param0)",
        "ALWI tiled_prod_tile(uint32_t idst)",
        "ALWI tanh_tile(uint32_t idst)",
        "ALWI log_with_base_tile_init()",
        "ALWI get_compute_special_value_flags_fpu(uint32_t special_value_flags_reg)",
        "ALWI log_tile(uint32_t idst)",
        "ALWI exp2_tile(uint32_t idst)",
        "ALWI topk_tile_init()",
        "ALWI gtz_tile_int32(uint32_t idst)",
        "ALWI acos_tile_init()",
        "ALWI lez_tile(uint32_t idst)",
        "ALWI gez_tile(uint32_t idst)",
        "ALWI silu_tile_init()",
        "ALWI eqz_tile_int32(uint32_t idst)",
        "ALWI abs_tile(uint32_t idst)",
        "ALWI get_compute_special_value_flags()",
        "ALWI ltz_tile_init()",
        "ALWI eqz_tile(uint32_t idst)",
        "ALWI sigmoid_tile_init()",
        "ALWI signbit_tile_init()",
        "ALWI sign_tile_init()",
        "ALWI unary_ne_tile(uint32_t idst, uint32_t param0)",
        "ALWI silu_tile(uint32_t idst)",
        "ALWI gtz_tile_init()",
        "ALWI topk_local_sort(\n    uint32_t idst, int idir, int i_end_phase, int i_start_phase = 0, int i_end_step = 0, int i_start_step = 0)",
        "ALWI unary_gt_tile_init()",
        "ALWI unary_eq_tile_int32(uint32_t idst, uint32_t param0)",
        "ALWI unary_max_tile(uint32_t idst, uint32_t param0)",
        "ALWI unary_min_tile_init()",
        "ALWI tanh_tile_init()",
        "ALWI expm1_tile_init()",
        "ALWI lez_tile_init()",
        "ALWI exp2_tile_init()",
        "ALWI log_tile_init()",
        "ALWI rsqrt_tile(uint32_t idst)",
        "ALWI heaviside_tile_init()",
        "ALWI eqz_tile_init()",
        "ALWI nez_tile(uint32_t idst)",
        "ALWI unary_lt_tile_init()",
        "ALWI store_compute_special_value_flags_to_l1(uint32_t l1_addr)",
        "ALWI gez_tile_int32(uint32_t idst)",
        "ALWI unary_ne_tile_init()",
        "ALWI signbit_tile(uint32_t idst)",
        "ALWI topk_merge(uint32_t idst, int m_iter, int k)",
        "ALWI dbg_halt()",
        "ALWI alt_complex_rotate90_tile(uint32_t idst)",
        "ALWI ltz_tile(uint32_t idst)",
        "ALWI sigmoid_tile(uint32_t idst)",
        "ALWI power_tile_init()",
        "ALWI alt_complex_rotate90_tile_init()",
        "ALWI asin_tile(uint32_t idst)",
        "ALWI unary_max_tile_init()",
        "ALWI abs_tile_int32(uint32_t idst)",
        "ALWI lez_tile_int32(uint32_t idst)",
        "ALWI get_compute_special_value_flags_sfpu(uint32_t special_value_flags_reg)",
        "ALWI rsqrt_tile_init()",
        "ALWI abs_tile_init()",
        "ALWI log_with_base_tile(uint32_t idst, uint32_t base_scale)",
        "ALWI power_tile(uint32_t idst, uint32_t param0)",
        "ALWI square_tile(uint32_t idst)",
        "ALWI heaviside_tile(uint32_t idst, uint32_t param0)",
        "ALWI nez_tile_int32(uint32_t idst)",
        "ALWI unary_eq_tile(uint32_t idst, uint32_t param0)",
        "ALWI unary_ne_tile_int32(uint32_t idst, uint32_t param0)",
        "ALWI atan_tile(uint32_t idst)",
        "ALWI unary_eq_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI sigmoid_tile_init()",
        "ALWI rsqrt_tile(uint32_t idst)",
        "ALWI sigmoid_tile(uint32_t idst)",
        "ALWI rsqrt_tile_init()",
        "ALWI topk_merge(uint32_t idst, int m_iter, int k)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/add_int32_sfpu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI add_int32_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI add_int32_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI add_int32_tile(uint32_t idst0, uint32_t idst1)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/add_uint16_sfpu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI add_uint16_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI add_uint16_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/add_uint32_sfpu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI add_uint32_tile_init()",
        "ALWI add_uint32_tile(uint32_t idst0, uint32_t idst1)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/bcast.h": {
      "classes": [],
      "constants": [
        "enable_unpack_to_dest"
      ],
      "enums": [],
      "functions": [
        "void init_bcast(uint32_t icb0, uint32_t icb1, uint32_t ocb)",
        "ALWI unary_bcast(uint32_t icb, uint32_t in_tile_index, uint32_t dst_tile_index)",
        "ALWI sub_tiles_bcast_scalar_init_short(uint32_t icb0, uint32_t icb1)",
        "void reconfigure_unary_bcast(uint32_t old_icb, uint32_t new_icb, uint32_t old_ocb, uint32_t new_ocb)",
        "ALWI mul_tiles_bcast_scalar_init_short(uint32_t icb0, uint32_t icb1)",
        "ALWI add_tiles_bcast_rows(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI any_tiles_bcast(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI mul_tiles_bcast_scalar(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI sub_tiles_bcast(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI sub_bcast_cols_init_short(uint32_t icb0, uint32_t icb1)",
        "ALWI add_tiles_bcast_cols(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI mul_tiles_bcast_rows(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI mul_bcast_rows_init_short(uint32_t icb0, uint32_t icb1)",
        "ALWI sub_tiles_bcast_scalar(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI add_bcast_cols_init_short(uint32_t icb0, uint32_t icb1)",
        "ALWI add_tiles_bcast_scalar(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI mul_tiles_bcast_cols(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI mul_tiles_bcast(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI add_bcast_rows_init_short(uint32_t icb0, uint32_t icb1)",
        "ALWI add_bcast_scalar_init_short(uint32_t icb0, uint32_t icb1)",
        "ALWI unary_bcast_init(uint32_t icb, uint32_t ocb)",
        "ALWI add_tiles_bcast(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI mul_bcast_cols_init_short(uint32_t icb0, uint32_t icb1)",
        "ALWI sub_tiles_bcast_cols(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "void init_bcast(uint32_t icb0, uint32_t icb1, uint32_t ocb)",
        "ALWI unary_bcast(uint32_t icb, uint32_t in_tile_index, uint32_t dst_tile_index)",
        "void reconfigure_unary_bcast(uint32_t old_icb, uint32_t new_icb, uint32_t old_ocb, uint32_t new_ocb)",
        "ALWI unary_bcast_init(uint32_t icb, uint32_t ocb)",
        "ALWI sub_tiles_bcast(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI mul_tiles_bcast(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI add_tiles_bcast(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI any_tiles_bcast(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/binary_bitwise_sfpu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI bitwise_or_uint16_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI bitwise_xor_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI bitwise_and_uint16_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI bitwise_and_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI bitwise_or_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI bitwise_xor_uint16_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI binary_bitwise_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/binary_max_min.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI binary_max_int32_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI binary_max_tile_init()",
        "ALWI binary_min_int32_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI binary_min_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI binary_min_tile_init()",
        "ALWI binary_max_tile(uint32_t idst0, uint32_t idst1)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/binary_shift.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI binary_shift_tile_init()",
        "ALWI binary_left_shift_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI binary_right_shift_tile(uint32_t idst0, uint32_t idst1)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/cb_api.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI cb_release_tile(uint32_t cb_id)",
        "ALWI cb_reserve_back(uint32_t cbid, uint32_t ntiles)",
        "ALWI cb_wait_front(uint32_t cbid, uint32_t ntiles)",
        "ALWI cb_get_tile(uint32_t cb_id, uint32_t index, volatile void* p_tile)",
        "ALWI cb_push_back(uint32_t cbid, uint32_t ntiles)",
        "ALWI cb_pop_front(uint32_t cbid, uint32_t ntiles)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/common.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint8_t get_absolute_logical_y()",
        "FORCE_INLINE get_arg_addr(int arg_idx)",
        "FORCE_INLINE get_common_arg_addr(int arg_idx)",
        "uint8_t get_absolute_logical_x()",
        "uint8_t get_relative_logical_y()",
        "FORCE_INLINE get_common_arg_val(int arg_idx)",
        "uint8_t get_relative_logical_x()",
        "FORCE_INLINE get_arg_val(int arg_idx)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "FORCE_INLINE get_common_arg_val(int arg_idx)",
        "FORCE_INLINE get_arg_val(int arg_idx)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/copy_dest_values.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI copy_dest_values(uint32_t idst0, uint32_t idst1)",
        "ALWI copy_dest_values_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/cumsum.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI cumsum_tile(uint32_t idst, bool first = true)",
        "ALWI cumsum_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_binary.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI binary_op_init_common(uint32_t icb0, uint32_t icb1, uint32_t ocb)",
        "ALWI sub_tiles(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI add_tiles(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI sub_tiles_init(uint32_t icb0, uint32_t icb1, bool acc_to_dest = false)",
        "ALWI binary_dest_reuse_tiles_init(uint32_t icb0)",
        "ALWI binary_tiles_init(uint32_t icb0, uint32_t icb1, bool acc_to_dest = false)",
        "ALWI binary_dest_reuse_tiles(uint32_t in_cb_id, uint32_t in_tile_index, uint32_t dst_tile_index)",
        "ALWI mul_tiles_init(uint32_t icb0, uint32_t icb1)",
        "ALWI add_tiles_init(uint32_t icb0, uint32_t icb1, bool acc_to_dest = false)",
        "ALWI mul_tiles(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI binary_dest_reuse_tiles_init(uint32_t icb0)",
        "ALWI binary_tiles_init(uint32_t icb0, uint32_t icb1, bool acc_to_dest = false)",
        "ALWI binary_dest_reuse_tiles(uint32_t in_cb_id, uint32_t in_tile_index, uint32_t dst_tile_index)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_binary_sfpu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI mul_binary_tile_init()",
        "ALWI div_binary_tile_init()",
        "ALWI add_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI div_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI mul_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI sub_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI power_binary_tile_init()",
        "ALWI rsub_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI sub_binary_tile_init()",
        "ALWI add_binary_tile_init()",
        "ALWI power_binary_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI rsub_binary_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/binop_with_scalar.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI mul_unary_tile(uint32_t idst, uint32_t param1)",
        "ALWI add_unary_tile(uint32_t idst, uint32_t param1)",
        "ALWI rsub_unary_tile(uint32_t idst, uint32_t param1)",
        "ALWI sub_unary_tile(uint32_t idst, uint32_t param1)",
        "ALWI div_unary_tile(uint32_t idst, uint32_t param1)",
        "ALWI binop_with_scalar_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/bitwise_and.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI bitwise_and_tile(uint32_t idst, uint32_t param0)",
        "ALWI bitwise_and_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/bitwise_not.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI bitwise_not_tile(uint32_t idst)",
        "ALWI bitwise_not_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/bitwise_or.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI bitwise_or_tile(uint32_t idst, uint32_t param0)",
        "ALWI bitwise_or_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/bitwise_xor.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI bitwise_xor_tile(uint32_t idst, uint32_t param0)",
        "ALWI bitwise_xor_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/dropout.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI dropout_tile(uint32_t idst, uint32_t probability, uint32_t scale_factor)",
        "ALWI dropout_kernel_init(uint32_t seed)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/eltwise_unary.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI init_sfpu(uint32_t icb, uint32_t ocb)",
        "ALWI unary_op_init_common(uint32_t icb, uint32_t ocb)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/elu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI elu_tile_init()",
        "ALWI elu_tile(uint32_t idst, uint32_t param0)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/erf_erfc.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI erfc_tile_init()",
        "ALWI erf_tile_init()",
        "ALWI erf_tile(uint32_t idst)",
        "ALWI erfc_tile(uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI erfc_tile_init()",
        "ALWI erf_tile_init()",
        "ALWI erf_tile(uint32_t idst)",
        "ALWI erfc_tile(uint32_t idst)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/erfinv.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI erfinv_tile(uint32_t idst)",
        "ALWI erfinv_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/exp.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI exp_tile(uint32_t idst)",
        "ALWI exp_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI exp_tile(uint32_t idst)",
        "ALWI exp_tile_init()"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/fill.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI fill_tile_init()",
        "ALWI fill_tile(uint32_t idst, float param0)",
        "ALWI fill_tile_bitcast(uint32_t idst, uint32_t param0)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/fmod.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI fmod_tile(uint32_t idst, uint32_t param0, uint32_t param1)",
        "ALWI fmod_tile_init(uint32_t param0, uint32_t param1)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/gelu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI gelu_tile_init()",
        "ALWI gelu_tile(uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI gelu_tile_init()",
        "ALWI gelu_tile(uint32_t idst)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/i0.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI i0_tile_init()",
        "ALWI i0_tile(uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/i1.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI i1_tile_init()",
        "ALWI i1_tile(uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/identity.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI identity_tile_init()",
        "ALWI identity_tile(uint32_t idst)",
        "ALWI identity_tile_uint32(uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/isinf_isnan.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI isneginf_tile_init()",
        "ALWI isinf_tile_init()",
        "ALWI isposinf_tile_init()",
        "ALWI isnan_tile_init()",
        "ALWI isnan_tile(uint32_t idst)",
        "ALWI isfinite_tile(uint32_t idst)",
        "ALWI isinf_tile(uint32_t idst)",
        "ALWI isfinite_tile_init()",
        "ALWI isposinf_tile(uint32_t idst)",
        "ALWI isneginf_tile(uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/left_shift.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI left_shift_tile(uint32_t idst, uint32_t param0)",
        "ALWI left_shift_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/log1p.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI log1p_tile_init()",
        "ALWI log1p_tile(uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/logical_not_noti.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI logical_not_unary_tile(uint32_t idst)",
        "ALWI logical_not_unary_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/negative.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI negative_tile(uint32_t idst)",
        "ALWI negative_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/prelu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI prelu_tile_init()",
        "ALWI prelu_tile(uint32_t idst, uint32_t param0)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/rand.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI rand_tile_init(uint32_t seed)",
        "ALWI rand_tile(uint32_t idst, uint32_t from, uint32_t scale)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/recip.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI recip_tile(uint32_t idst)",
        "ALWI recip_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/relu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI relu_max_tile(uint32_t idst, uint32_t param0)",
        "ALWI relu_min_tile(uint32_t idst, uint32_t param0)",
        "ALWI relu_tile_init()",
        "ALWI relu_tile(uint32_t idst)",
        "ALWI leaky_relu_tile(uint32_t idst, uint32_t slope)",
        "ALWI leaky_relu_tile_init()",
        "ALWI relu_max_tile_init()",
        "ALWI relu_min_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/remainder.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI remainder_tile_init(uint32_t param0, uint32_t param1)",
        "ALWI remainder_tile(uint32_t idst, uint32_t param0, uint32_t param1)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/reverseops.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI rsub_tile(uint32_t idst, uint32_t param0)",
        "ALWI rsub_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/right_shift.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI right_shift_tile_init()",
        "ALWI right_shift_tile(uint32_t idst, uint32_t param0)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/rounding.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI ceil_tile_float32(uint32_t idst)",
        "ALWI floor_tile(uint32_t idst)",
        "ALWI round_tile(uint32_t idst, int32_t decimals)",
        "ALWI rounding_op_tile_init()",
        "ALWI floor_tile_float32(uint32_t idst)",
        "ALWI ceil_tile(uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/sfpu_int_sum.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI sfpu_sum_int_col(uint32_t idst)",
        "ALWI sfpu_sum_int_row(uint32_t idst)",
        "ALWI sfpu_add_int(uint32_t idst, uint32_t dst_offset = 2, int32_t iterations = 8)",
        "ALWI sfpu_sum_int_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/softplus.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI softplus_tile_init()",
        "ALWI softplus_tile(uint32_t idst, uint32_t beta, uint32_t beta_reciprocal, uint32_t threshold)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/sqrt.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI sqrt_tile(uint32_t idst)",
        "ALWI sqrt_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/trigonometry.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI tan_tile_init()",
        "ALWI tan_tile(uint32_t idst)",
        "ALWI sin_tile_init()",
        "ALWI cos_tile_init()",
        "ALWI sin_tile(uint32_t idst)",
        "ALWI cos_tile(uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/eltwise_unary/typecast.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI typecast_tile(uint32_t idst)",
        "ALWI typecast_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI typecast_tile(uint32_t idst)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/gcd.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI gcd_tile_init()",
        "ALWI gcd_tile(uint32_t idst0, uint32_t idst1)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/lcm.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI lcm_tile_init()",
        "ALWI lcm_tile(uint32_t idst0, uint32_t idst1)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/mask.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI mask_tile(uint32_t idst_data, uint32_t idst2_mask, DataFormat data_format = DataFormat::Float16_b)",
        "ALWI mask_tile_init()",
        "ALWI mask_posinf_tile(uint32_t idst_data, uint32_t idst2_mask)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/matmul.h": {
      "classes": [],
      "constants": [
        "transpose"
      ],
      "enums": [],
      "functions": [
        "ALWI mm_init_short(uint32_t in0_cb_id, uint32_t in1_cb_id, const uint32_t transpose = 0)",
        "ALWI mm_block_init_short_with_dt(\n    uint32_t in0_cb_id,\n    uint32_t in1_cb_id,\n    uint32_t old_in1_cb_id,\n    const uint32_t transpose = 0,\n    uint32_t ct_dim = 1,\n    uint32_t rt_dim = 1,\n    uint32_t kt_dim = 1)",
        "ALWI mm_block_init_short(\n    uint32_t in0_cb_id,\n    uint32_t in1_cb_id,\n    const uint32_t transpose = 0,\n    uint32_t ct_dim = 1,\n    uint32_t rt_dim = 1,\n    uint32_t kt_dim = 1)",
        "ALWI mm_block_init(\n    uint32_t in0_cb_id,\n    uint32_t in1_cb_id,\n    uint32_t out_cb_id,\n    const uint32_t transpose = 0,\n    uint32_t ct_dim = 1,\n    uint32_t rt_dim = 1,\n    uint32_t kt_dim = 1)",
        "ALWI matmul_block(\n    uint32_t in0_cb_id,\n    uint32_t in1_cb_id,\n    uint32_t in0_tile_index,\n    uint32_t in1_tile_index,\n    uint32_t idst,\n    const uint32_t transpose,\n    uint32_t ct_dim,\n    uint32_t rt_dim,\n    uint32_t kt_dim)",
        "ALWI matmul_tiles(\n    uint32_t in0_cb_id,\n    uint32_t in1_cb_id,\n    uint32_t in0_tile_index,\n    uint32_t in1_tile_index,\n    uint32_t idst,\n    const uint32_t transpose)",
        "ALWI matmul_tiles_math(uint32_t idst)",
        "ALWI mm_init(uint32_t in0_cb_id, uint32_t in1_cb_id, uint32_t out_cb_id, const uint32_t transpose = 0)",
        "ALWI mm_init_short_with_dt(\n    uint32_t in0_cb_id, uint32_t in1_cb_id, uint32_t c_in_old_srca, const uint32_t transpose = 0)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI matmul_tiles_math(uint32_t idst)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/mul_uint16_sfpu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI mul_uint16_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI mul_uint16_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/pack.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI matmul_pack_tile(uint32_t ifrom_dst, uint32_t icb, uint32_t ntiles)",
        "ALWI pack_tile(uint32_t ifrom_dst, uint32_t icb, std::uint32_t output_tile_index = 0)",
        "ALWI pack_reconfig_l1_acc(const uint32_t l1_acc_en)",
        "ALWI pack_reconfig_data_format(const uint32_t new_operand)",
        "ALWI pack_reconfig_data_format(const uint32_t old_operand, const uint32_t new_operand)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI pack_tile(uint32_t ifrom_dst, uint32_t icb, std::uint32_t output_tile_index = 0)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/pack_untilize.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI pack_untilize_dst_init_short(uint32_t ocb, uint32_t face_r_dim = 16, uint32_t num_faces = 4)",
        "ALWI pack_untilize_uninit(uint32_t ocb)",
        "ALWI pack_untilize_init_short(uint32_t icb, uint32_t ocb)",
        "ALWI pack_untilize_dst(\n    uint32_t ocb,\n    uint32_t block_rt_dim = 1,\n    uint32_t block_c_index = 0 /* used when full_ct_dim > block_ct_dim*/,\n    uint32_t face_r_dim = 16,\n    uint32_t num_faces = 4)",
        "ALWI pack_untilize_init(uint32_t icb, uint32_t ocb)",
        "ALWI pack_untilize_block(uint32_t icb, uint32_t block_rt_dim, uint32_t ocb)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI pack_untilize_dst_init_short(uint32_t ocb, uint32_t face_r_dim = 16, uint32_t num_faces = 4)",
        "ALWI pack_untilize_init_short(uint32_t icb, uint32_t ocb)",
        "ALWI pack_untilize_dst(\n    uint32_t ocb,\n    uint32_t block_rt_dim = 1,\n    uint32_t block_c_index = 0 /* used when full_ct_dim > block_ct_dim*/,\n    uint32_t face_r_dim = 16,\n    uint32_t num_faces = 4)",
        "ALWI pack_untilize_init(uint32_t icb, uint32_t ocb)",
        "ALWI pack_untilize_block(uint32_t icb, uint32_t block_rt_dim, uint32_t ocb)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/quantization.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI quant_tile_init(const uint32_t zero_point)",
        "ALWI quant_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI dequant_tile_init(const uint32_t zero_point)",
        "ALWI requant_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI dequant_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI requant_tile_init(const uint32_t zero_point)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/reconfig_data_format.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI reconfig_data_format_srca(const uint32_t srca_new_operand)",
        "ALWI reconfig_data_format(const uint32_t srca_new_operand, const uint32_t srcb_new_operand)",
        "ALWI reconfig_data_format_srcb(const uint32_t srcb_old_operand, const uint32_t srcb_new_operand)",
        "ALWI reconfig_data_format_srcb(const uint32_t srcb_new_operand)",
        "ALWI reconfig_data_format_srca(const uint32_t srca_old_operand, const uint32_t srca_new_operand)",
        "ALWI reconfig_data_format(\n    const uint32_t srca_old_operand,\n    const uint32_t srca_new_operand,\n    const uint32_t srcb_old_operand,\n    const uint32_t srcb_new_operand)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI reconfig_data_format_srca(const uint32_t srca_new_operand)",
        "ALWI reconfig_data_format(const uint32_t srca_new_operand, const uint32_t srcb_new_operand)",
        "ALWI reconfig_data_format_srcb(const uint32_t srcb_old_operand, const uint32_t srcb_new_operand)",
        "ALWI reconfig_data_format_srcb(const uint32_t srcb_new_operand)",
        "ALWI reconfig_data_format_srca(const uint32_t srca_old_operand, const uint32_t srca_new_operand)",
        "ALWI reconfig_data_format(\n    const uint32_t srca_old_operand,\n    const uint32_t srca_new_operand,\n    const uint32_t srcb_old_operand,\n    const uint32_t srcb_new_operand)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/reduce.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI reduce_init_delta_math()",
        "ALWI reduce_revert_delta(uint32_t ocb)",
        "ALWI reduce_init(uint32_t icb, uint32_t icb_scaler, uint32_t ocb)",
        "ALWI reduce_init_short(uint32_t icb, uint32_t icb_scaler, uint32_t ocb)",
        "ALWI reduce_init_delta(uint32_t icb0, uint32_t icb1, uint32_t ocb)",
        "ALWI reduce_tile(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI reduce_init_delta_no_pack(uint32_t icb0, uint32_t icb1)",
        "ALWI reduce_tile_math(uint32_t idst, uint32_t num_faces = 4)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI reduce_init_delta_math()",
        "ALWI reduce_revert_delta(uint32_t ocb)",
        "ALWI reduce_init(uint32_t icb, uint32_t icb_scaler, uint32_t ocb)",
        "ALWI reduce_init_short(uint32_t icb, uint32_t icb_scaler, uint32_t ocb)",
        "ALWI reduce_init_delta(uint32_t icb0, uint32_t icb1, uint32_t ocb)",
        "ALWI reduce_tile(uint32_t icb0, uint32_t icb1, uint32_t itile0, uint32_t itile1, uint32_t idst)",
        "ALWI reduce_init_delta_no_pack(uint32_t icb0, uint32_t icb1)",
        "ALWI reduce_tile_math(uint32_t idst, uint32_t num_faces = 4)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/reg_api.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI acquire_dst()",
        "ALWI tile_regs_acquire()",
        "ALWI tile_regs_commit()",
        "ALWI tile_regs_release()",
        "ALWI tile_regs_wait()",
        "ALWI release_dst()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/reshuffle.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI reshuffle_rows_tile_init()",
        "ALWI reshuffle_rows_tile(uint32_t idst, uint32_t idx_addr)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/sub_int32_sfpu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI sub_int32_tile(uint32_t idst0, uint32_t idst1)",
        "ALWI sub_int32_tile_init()"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI sub_int32_tile(uint32_t idst0, uint32_t idst1)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/sub_uint16_sfpu.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI sub_uint16_tile_init()",
        "ALWI sub_uint16_tile(uint32_t idst0, uint32_t idst1)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/tile_move_copy.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI copy_tile_to_dst_init_short_with_dt(uint32_t old_cbid, uint32_t new_cbid, uint32_t transpose = 0)",
        "ALWI copy_tile_init(uint32_t cbid)",
        "ALWI copy_tile_to_dst_init_short(uint32_t cbid, uint32_t transpose = 0)",
        "ALWI copy_tile(uint32_t in_cb_id, uint32_t in_tile_index, uint32_t dst_tile_index)",
        "ALWI copy_block_matmul_partials(\n    uint32_t in_cb_id, uint32_t start_in_tile_index, uint32_t start_dst_tile_index, uint32_t ntiles)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/tilize.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI unpack_tilize_block(uint32_t icb, uint32_t block)",
        "ALWI unpack_tilizeA_B_dot_product_block(\n    uint32_t icb0, uint32_t icb1, uint32_t block, uint32_t tile_idx_b, uint32_t num_faces = 4)",
        "ALWI tilize_uninit_with_dt(uint32_t old_icb, uint32_t new_icb, uint32_t ocb)",
        "ALWI tilizeA_B_dot_product_init(\n    uint32_t icb0, uint32_t icb1, uint32_t block, uint32_t ocb, uint32_t num_faces = 4, uint32_t face_r_dim = 16)",
        "ALWI tilizeA_B_reduce_init(\n    uint32_t icb0,\n    uint32_t icb1_scaler,\n    uint32_t block,\n    uint32_t ocb,\n    uint32_t num_faces = 4,\n    uint32_t face_r_dim = 16)",
        "ALWI tilize_uninit(uint32_t icb, uint32_t ocb)",
        "ALWI tilize_block(uint32_t icb, uint32_t block, uint32_t ocb)",
        "ALWI tilize_init_unpack(uint32_t icb, uint32_t block)",
        "ALWI tilize_init(uint32_t icb, uint32_t block, uint32_t ocb)",
        "ALWI tilize_init_short(uint32_t icb, uint32_t block, uint32_t ocb)",
        "ALWI tilize_init_short_with_dt(uint32_t old_icb, uint32_t new_icb, uint32_t block, uint32_t ocb)",
        "ALWI unpack_tilizeA_B_block(\n    uint32_t icb0,\n    uint32_t icb1,\n    uint32_t block,\n    uint32_t tile_idx_b,\n    uint32_t num_faces = 4,\n    uint32_t srca_face_r_dim = 16)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI tilizeA_B_reduce_init(\n    uint32_t icb0,\n    uint32_t icb1_scaler,\n    uint32_t block,\n    uint32_t ocb,\n    uint32_t num_faces = 4,\n    uint32_t face_r_dim = 16)",
        "ALWI unpack_tilizeA_B_block(\n    uint32_t icb0,\n    uint32_t icb1,\n    uint32_t block,\n    uint32_t tile_idx_b,\n    uint32_t num_faces = 4,\n    uint32_t srca_face_r_dim = 16)"
      ],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/transpose_wh.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI transpose_wh_tile(uint32_t icb, uint32_t itile, uint32_t idst)",
        "ALWI transpose_wh_init_short(uint32_t icb)",
        "ALWI transpose_wh_init(uint32_t icb, uint32_t ocb)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/transpose_wh_dest.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI transpose_wh_dest_init_short()",
        "ALWI transpose_wh_dest(uint32_t idst)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "compute_kernel_api/untilize.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ALWI untilize_init_short(uint32_t icb)",
        "ALWI untilize_uninit(uint32_t icb)",
        "ALWI untilize_init(uint32_t icb, uint32_t ocb)",
        "ALWI untilize_block(uint32_t icb, uint32_t block, uint32_t ocb)"
      ],
      "namespaces": [
        "ckernel"
      ],
      "structs": [],
      "template_functions": [
        "ALWI untilize_block(uint32_t icb, uint32_t block, uint32_t ocb)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/allocator.hpp": {
      "classes": [
        "Allocator"
      ],
      "constants": [],
      "enums": [
        "BufferType"
      ],
      "functions": [
        "Allocator(const AllocatorConfig& alloc_config)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/allocator_types.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "MemoryAllocator",
        "AllocCoreType"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [
        "AllocatorConfig",
        "Statistics"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/assert.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void tt_assert(char const* file, int line, char const* assert_type, bool condition, char const* condition_str)",
        "void tt_throw_impl(\n    char const* file, int line, char const* assert_type, char const* condition_str, Args const&... args)",
        "void tt_throw(char const* file, int line, char const* assert_type, char const* condition_str)",
        "void tt_throw(\n    char const* file,\n    int line,\n    char const* assert_type,\n    char const* condition_str,\n    fmt::format_string<Args const&...> fmt,\n    Args const&... args)",
        "void tt_assert(\n    char const* file,\n    int line,\n    char const* assert_type,\n    bool condition,\n    char const* condition_str,\n    fmt::format_string<Args const&...> fmt,\n    Args const&... args)",
        "std::vector<std::string> backtrace(int size = 64, int skip = 1)",
        "std::string result(v)",
        "std::string backtrace_to_string(int size = 64, int skip = 2, const std::string& prefix = \"\")",
        "std::string demangle(const char* str)",
        "OStreamJoin(A const& a, B const& b, char const* delim = \" \")"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [
        "OStreamJoin"
      ],
      "template_functions": [
        "void tt_assert(\n    char const* file,\n    int line,\n    char const* assert_type,\n    bool condition,\n    char const* condition_str,\n    fmt::format_string<Args const&...> fmt,\n    Args const&... args)",
        "void tt_throw(\n    char const* file,\n    int line,\n    char const* assert_type,\n    char const* condition_str,\n    fmt::format_string<Args const&...> fmt,\n    Args const&... args)",
        "void tt_throw_impl(\n    char const* file, int line, char const* assert_type, char const* condition_str, Args const&... args)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/base_types.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "UnpackToDestMode",
        "MathFidelity"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/bfloat16.hpp": {
      "classes": [
        "bfloat16"
      ],
      "constants": [
        "SIZEOF"
      ],
      "enums": [],
      "functions": [
        "std::vector<std::uint32_t> create_constant_vector_of_bfloat16(uint32_t num_bytes, float value)",
        "std::pair<bfloat16, bfloat16> unpack_two_bfloat16_from_uint32(uint32_t uint32_data)",
        "uint32_t pack_two_bfloat16_into_uint32(std::pair<bfloat16, bfloat16> two_bfloats)",
        "std::vector<std::uint32_t> create_random_vector_of_bfloat16_0_2(uint32_t num_bytes, int seed)",
        "void print_vec_of_uint32_as_packed_bfloat16(\n    const std::vector<std::uint32_t>& vec, int num_tiles, const std::string& name = \"\", int tile_print_offset = 0)",
        "bfloat16(uint32_t uint32_data)",
        "bfloat16(uint16_t uint16_data_)",
        "std::vector<uint32_t> pack_bfloat16_vec_into_uint32_vec(const std::vector<bfloat16>& data)",
        "std::vector<uint32_t> create_random_binary_vector_of_bfloat16(uint32_t num_bytes, int seed)",
        "std::vector<bfloat16> create_random_vector_of_bfloat16_native(\n    uint32_t num_bytes, float rand_max_float, int seed, float offset = 0.0f)",
        "bfloat16(float float_num)",
        "bfloat16 bfloat16_identity_transform(const bfloat16& input)",
        "void print_golden_metalium_vectors(std::vector<bfloat16>& golden_vec, std::vector<bfloat16>& result_vec)",
        "bool packed_uint32_t_vector_comparison(\n    const std::vector<uint32_t>& vec_a,\n    const std::vector<uint32_t>& vec_b,\n    const std::function<bool(float, float)>& comparison_function,\n    int* argfail = nullptr)",
        "std::vector<std::uint32_t> create_random_vector_of_bfloat16_1_1(uint32_t num_bytes, int seed)",
        "std::vector<bfloat16> create_identity_matrix(int rows, int cols, int num_ones)",
        "bfloat16()",
        "bool is_close(float a, float b, float rtol = 0.01f, float atol = 0.001f)",
        "std::vector<std::uint32_t> create_random_vector_of_bfloat16(\n    uint32_t num_bytes, int rand_max_float, int seed, float offset = 0.0f)",
        "void print_vec(\n    const std::vector<uint32_t>& vec, int num_tiles, const std::string& name = \"\", int tile_print_offset = 0)",
        "std::vector<uint32_t> u32_from_u16_vector(const std::vector<uint16_t>& in)",
        "std::vector<std::uint32_t> create_arange_vector_of_bfloat16(uint32_t num_bytes, bool print = true)",
        "std::vector<uint16_t> u16_from_u32_vector(const std::vector<uint32_t>& in)",
        "bool equal_within_n_sig_figs(float a, float b, int n)",
        "bfloat16(int int_data)",
        "bool equal_within_absolute_tolerance(float a, float b, float tol)",
        "std::vector<bfloat16> unpack_uint32_vec_into_bfloat16_vec(\n    const std::vector<std::uint32_t>& data,\n    const std::function<bfloat16(const bfloat16&)>& transform = bfloat16_identity_transform)",
        "void print_vec_of_bfloat16(\n    const std::vector<bfloat16>& vec, int num_tiles, const std::string& name = \"\", int tile_print_offset = 0)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/bfloat4.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "std::vector<uint32_t> create_constant_vector_of_bfp4(uint32_t num_bytes, float value, bool is_exp_a)",
        "std::vector<uint32_t> create_random_vector_of_bfp4(\n    uint32_t num_bytes, bool is_exp_a, int rand_max_float, int seed, float offset = 0.0f)",
        "int log2(int n)",
        "std::vector<uint32_t> pack_fp32_vec_as_bfp4_tiles(\n    tt::stl::Span<const float> fp32_vec,\n    bool row_major_input,\n    bool is_exp_a,\n    const std::optional<tt::tt_metal::Tile>& tile = std::nullopt)",
        "std::vector<float> unpack_bfp4_tiles_into_float_vec(\n    tt::stl::Span<const uint32_t> bfp_tiles,\n    bool row_major_output,\n    bool is_exp_a,\n    const std::optional<tt::tt_metal::Tile>& tile = std::nullopt)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/bfloat8.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "std::vector<uint32_t> pack_fp32_vec_as_bfp8_tiles(\n    tt::stl::Span<const float> fp32_vec,\n    bool row_major_input,\n    bool is_exp_a,\n    const std::optional<tt::tt_metal::Tile>& tile = std::nullopt)",
        "std::vector<uint32_t> create_constant_vector_of_bfp8(uint32_t num_bytes, float value, bool is_exp_a)",
        "std::vector<uint32_t> create_random_vector_of_bfp8(\n    uint32_t num_bytes, bool is_exp_a, int rand_max_float, int seed, float offset = 0.0f)",
        "std::vector<float> unpack_bfp8_tiles_into_float_vec(\n    tt::stl::Span<const uint32_t> bfp8_tiles,\n    bool row_major_output,\n    bool is_exp_a,\n    const std::optional<tt::tt_metal::Tile>& tile = std::nullopt)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/blockfloat_common.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "DataFormat"
      ],
      "functions": [
        "uint32_t create_packed_bfp_packed_as_u32(const std::vector<uint32_t>& u32_vec, uint32_t shared_exp, bool is_exp_a)",
        "uint8_t get_max_exp(const std::vector<uint32_t>& vec, bool is_exp_a)",
        "std::vector<uint32_t> pack_fp32_vec_as_bfp_tiles(\n    tt::stl::Span<const float> fp32_vec,\n    bool row_major_input,\n    bool is_exp_a,\n    const std::optional<tt::tt_metal::Tile>& tile = std::nullopt)",
        "uint32_t get_byte(uint32_t word, uint32_t index)",
        "std::vector<uint32_t> pack_exponents(const std::vector<uint8_t>& exponents, size_t num_elements_in_dword)",
        "uint32_t get_exp_dword(const std::vector<uint8_t>& vec)",
        "uint32_t convert_bfp_to_u32(tt::DataFormat bfp_format, uint8_t data, uint8_t shared_exp, bool is_exp_a)",
        "uint8_t convert_u32_to_bfp(uint32_t input, uint32_t shared_exp, bool is_exp_a)"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [
        "uint8_t convert_u32_to_bfp(uint32_t input, uint32_t shared_exp, bool is_exp_a)",
        "uint32_t create_packed_bfp_packed_as_u32(const std::vector<uint32_t>& u32_vec, uint32_t shared_exp, bool is_exp_a)",
        "std::vector<uint32_t> pack_fp32_vec_as_bfp_tiles(\n    tt::stl::Span<const float> fp32_vec,\n    bool row_major_input,\n    bool is_exp_a,\n    const std::optional<tt::tt_metal::Tile>& tile = std::nullopt)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/buffer.hpp": {
      "classes": [
        "Buffer"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [
        "AllocationStatus"
      ],
      "functions": [
        "ShardSpec(\n        const CoreRangeSet& core_sets_,\n        const std::array<uint32_t, 2>& shard_shape_,\n        const std::array<uint32_t, 2>& physical_shard_shape_,\n        const ShardOrientation& shard_orientation_ = ShardOrientation::ROW_MAJOR)",
        "Buffer(Buffer&& other)",
        "bool is_sharded(const TensorMemoryLayout& layout)",
        "ShardSpecBuffer(\n        const CoreRangeSet& core_sets_,\n        const std::array<uint32_t, 2>& shard_shape_,\n        const ShardOrientation& shard_orientation_,\n        const std::array<uint32_t, 2>& page_shape,\n        const std::array<uint32_t, 2>& tensor2d_shape_in_pages)",
        "ShardSpecBuffer(\n        const ShardSpec& shard_spec,\n        const std::array<uint32_t, 2>& page_shape,\n        const std::array<uint32_t, 2>& tensor2d_shape_in_pages)",
        "void DeallocateBuffer(Buffer& buffer)",
        "BufferPageMapping generate_buffer_page_mapping(const Buffer& buffer)",
        "Buffer(const Buffer& other)",
        "Buffer(\n        IDevice* device,\n        DeviceAddr size,\n        DeviceAddr page_size,\n        BufferType buffer_type,\n        TensorMemoryLayout buffer_layout,\n        const std::optional<std::variant<ShardSpecBuffer, BufferDistributionSpec>>& shard_parameter,\n        std::optional<bool> bottom_up,\n        std::optional<SubDeviceId> sub_device_id,\n        bool owns_data,\n        Private)",
        "Private()",
        "BufferRegion(DeviceAddr offset, DeviceAddr size)",
        "BufferRegion()",
        "ShardSpec(\n        const CoreRangeSet& core_sets_,\n        const std::array<uint32_t, 2>& shard_shape_,\n        const ShardOrientation& shard_orientation_ = ShardOrientation::ROW_MAJOR,\n        const ShardMode& shard_mode_ = ShardMode::PHYSICAL)"
      ],
      "namespaces": [
        "tt",
        "json",
        "stl"
      ],
      "structs": [
        "BufferConfig",
        "ShardedBufferConfig",
        "Private",
        "ShardSpec",
        "BufferRegion",
        "ShardSpecBuffer"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/buffer_distribution_spec.hpp": {
      "classes": [
        "BufferDistributionSpec"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "BufferDistributionSpec(\n        tt::tt_metal::Shape tensor_shape_in_pages,\n        tt::tt_metal::Shape shard_shape_in_pages,\n        CoreRangeSet core_range_set,\n        ShardOrientation shard_orientation)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/buffer_page_mapping.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [
        "BufferPageMapping"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/buffer_types.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "BufferType",
        "ShardMode",
        "TensorMemoryLayout",
        "ShardOrientation"
      ],
      "functions": [],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/circular_buffer.hpp": {
      "classes": [
        "CircularBuffer"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "CircularBuffer(const CoreRangeSet& core_range_set, const CircularBufferConfig& config)",
        "CircularBuffer(const CBDescriptor& descriptor)",
        "CircularBuffer(\n        const CoreRangeSet& core_ranges,\n        const CircularBufferConfig& config,\n        const experimental::GlobalCircularBuffer& global_circular_buffer)"
      ],
      "namespaces": [
        "tt",
        "tt_metal",
        "experimental"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/circular_buffer_config.hpp": {
      "classes": [
        "CircularBufferConfig",
        "Builder"
      ],
      "constants": [],
      "enums": [
        "DataFormat"
      ],
      "functions": [
        "CircularBufferConfig(\n        uint32_t total_size, const std::map<uint8_t, tt::DataFormat>& data_format_spec, const Buffer& buffer)",
        "CircularBufferConfig(\n        uint32_t total_size,\n        std::optional<uint32_t> globally_allocated_address,\n        const std::array<std::optional<tt::DataFormat>, NUM_CIRCULAR_BUFFERS>& data_formats,\n        const std::array<std::optional<uint32_t>, NUM_CIRCULAR_BUFFERS>& page_sizes,\n        const std::array<std::optional<Tile>, NUM_CIRCULAR_BUFFERS>& tiles,\n        const std::unordered_set<uint8_t>& buffer_indices,\n        const std::unordered_set<uint8_t>& local_buffer_indices,\n        const std::unordered_set<uint8_t>& remote_buffer_indices,\n        bool dynamic_cb,\n        uint32_t max_size,\n        uint32_t buffer_size)",
        "Builder(CircularBufferConfig& parent, uint8_t buffer_index)",
        "CircularBufferConfig(uint32_t total_size)",
        "CircularBufferConfig(const CBDescriptor& descriptor)",
        "CircularBufferConfig(uint32_t total_size, const std::map<uint8_t, tt::DataFormat>& data_format_spec)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/command_queue.hpp": {
      "classes": [
        "CommandQueue"
      ],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/constants.hpp": {
      "classes": [],
      "constants": [
        "TILE_HEIGHT",
        "DEFAULT_PCC_THRESH",
        "FP16B_MAN_PREC",
        "DEFAULT_RTOL",
        "TILE_HW",
        "BFLOAT4_B_TILE_HW",
        "LF_MAN_PREC",
        "TILE_WIDTH",
        "DEFAULT_ATOL",
        "FACE_HW",
        "DEFAULT_PCT_MATCHED",
        "BFLOAT8_B_TILE_HW",
        "FP16_MAN_PREC",
        "FACE_HEIGHT",
        "MAX_DST_SIZE",
        "FACE_WIDTH"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [
        "tt",
        "constants"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": [
        "std::uint32_t"
      ]
    },
    "tt_metal/api/tt-metalium/control_plane.hpp": {
      "classes": [
        "GlobalControlPlane",
        "ControlPlane"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "GlobalControlPlane(const std::string& mesh_graph_desc_yaml_file)",
        "GlobalControlPlane(\n        const std::string& mesh_graph_desc_yaml_file,\n        const std::map<FabricNodeId, chip_id_t>& logical_mesh_chip_id_to_physical_chip_id_mapping)",
        "ControlPlane(\n        const std::string& mesh_graph_desc_yaml_file,\n        const std::map<FabricNodeId, chip_id_t>& logical_mesh_chip_id_to_physical_chip_id_mapping)",
        "ControlPlane(const std::string& mesh_graph_desc_yaml_file)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/core_coord.hpp": {
      "classes": [
        "CoreIterator",
        "CoreRange",
        "CoreRangeSet"
      ],
      "constants": [
        "operator",
        "row_wise"
      ],
      "enums": [],
      "functions": [
        "CoreRangeSet merge(const T& other)",
        "CoreRange(const CoreCoord& start_coord, const CoreCoord& end_coord)",
        "std::vector<CoreCoord> grid_to_cores(\n    uint32_t num_cores, uint32_t grid_size_x, uint32_t grid_size_y, bool row_wise = false)",
        "std::vector<CoreCoord> grid_to_cores_with_noop(\n    const CoreRangeSet& used_cores, const CoreRangeSet& all_cores, const bool row_wise = false)",
        "CoreRange(const CoreRange& other)",
        "std::vector<CoreCoord> corerange_to_cores(\n    const CoreRangeSet& crs, std::optional<uint32_t> max_cores = std::nullopt, bool row_wise = false)",
        "std::vector<CoreCoord> grid_to_cores(CoreCoord start, CoreCoord end, bool row_wise = false)",
        "CoreRange(const CoreCoord& point)",
        "CoreRangeSet select_from_corerange(\n    const CoreRangeSet& crs, uint32_t start_index, uint32_t end_index, bool row_wise = false)",
        "CoreRangeSet(const CoreRangeSet& other)",
        "CoreRange(CoreRange&& other)",
        "std::vector<CoreCoord> grid_to_cores_with_noop(\n    const uint32_t bbox_x,\n    const uint32_t bbox_y,\n    const uint32_t grid_size_x,\n    const uint32_t grid_size_y,\n    const bool row_wise = false)",
        "void swap(CoreRangeSet& first, CoreRangeSet& second)",
        "CoreRangeSet(tt::stl::Span<const CoreRange> core_ranges)",
        "CoreRangeSet(std::vector<CoreRange>&& core_ranges)",
        "CoreRangeSet(const std::set<CoreRange>& core_ranges)",
        "CoreRangeSet()",
        "CoreRangeSet(CoreRangeSet&& other)",
        "CoreRangeSet(const CoreRange& core_range)",
        "CoreIterator(const CoreCoord& current, const CoreRange& core_range)",
        "CoreCoord get_core_coord_from_relative(const RelativeCoreCoord& in, const CoreCoord& grid_size)"
      ],
      "namespaces": [
        "tt",
        "json",
        "stl",
        "std"
      ],
      "structs": [
        "RelativeCoreCoord"
      ],
      "template_functions": [
        "CoreRangeSet merge(const T& other)"
      ],
      "typedefs": [],
      "usings": [
        "::CoreCoord",
        "::CoreRangeSet",
        "::CoreRange"
      ]
    },
    "tt_metal/api/tt-metalium/core_descriptor.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "std::optional<uint32_t> get_storage_core_bank_size(\n    chip_id_t device_id, const uint8_t num_hw_cqs, const tt_metal::DispatchCoreConfig& dispatch_core_config)"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [
        "core_descriptor_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/data_format.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "UnpackToDestMode",
        "ExpPrecision"
      ],
      "functions": [
        "bool is_valid_conversion(DataFormat input_format, DataFormat output_format)",
        "void dump_data_formats(DataFormat data_format[NUM_CIRCULAR_BUFFERS])",
        "DataFormat check_same_format_across_buffers(DataFormat data_format[NUM_CIRCULAR_BUFFERS])",
        "DataFormat get_single_pack_src_format(\n    DataFormat input_format, DataFormat unpack_conditional_dst_format, bool fp32_dest_acc_en, tt::ARCH arch)",
        "std::vector<DataFormat> get_unpack_src_formats(DataFormat buf_formats[NUM_CIRCULAR_BUFFERS])",
        "bool is_exp_b_format(DataFormat data_format)",
        "ExpPrecision get_data_exp_precision(DataFormat data_formats[NUM_CIRCULAR_BUFFERS])",
        "std::vector<DataFormat> get_unpack_dst_formats(\n    DataFormat buf_formats[NUM_CIRCULAR_BUFFERS],\n    DataFormat unpack_conditional_dst_format,\n    bool fp32_dest_acc_en,\n    std::vector<UnpackToDestMode> unpack_to_dest_mode,\n    bool int_fpu_en = false)",
        "ExpPrecision get_exp_precison(DataFormat data_format)",
        "bool is_all_fp32_formats(const DataFormat data_format[NUM_CIRCULAR_BUFFERS])",
        "DataFormat check_valid_formats_in_out_data_formats(DataFormat data_format[NUM_CIRCULAR_BUFFERS])",
        "std::vector<DataFormat> get_pack_dst_formats(DataFormat buf_formats[NUM_CIRCULAR_BUFFERS])",
        "DataFormat check_consistent_format_across_buffers(DataFormat data_format[NUM_CIRCULAR_BUFFERS])",
        "std::vector<DataFormat> get_pack_src_formats(\n    DataFormat buf_formats[NUM_CIRCULAR_BUFFERS],\n    DataFormat unpack_conditional_dst_format,\n    bool fp32_dest_acc_en,\n    bool bfp8_pack_precise,\n    bool int_fpu_en = false,\n    tt::ARCH arch = tt::ARCH::WORMHOLE_B0)"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/data_types.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "NOC",
        "Eth",
        "NOC_MODE",
        "DataMovementProcessor"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/device.hpp": {
      "classes": [
        "IDevice"
      ],
      "constants": [
        "allocator_scheme_"
      ],
      "enums": [
        "BufferType"
      ],
      "functions": [
        "IDevice(IDevice &&other)",
        "IDevice()",
        "IDevice(const IDevice &other)"
      ],
      "namespaces": [
        "tt",
        "distributed",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/device_pool.hpp": {
      "classes": [
        "DevicePool"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "DevicePool(DevicePool&& other)",
        "DevicePool(const DevicePool&)",
        "DevicePool()"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/dispatch_core_common.hpp": {
      "classes": [
        "DispatchCoreConfig"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [
        "DispatchCoreType",
        "DispatchCoreAxis",
        "DispatchWorkerType"
      ],
      "functions": [
        "DispatchCoreConfig(DispatchCoreType type, DispatchCoreAxis axis)",
        "DispatchCoreConfig(DispatchCoreType type)",
        "CoreType get_dispatch_core_type()",
        "DispatchCoreConfig get_dispatch_core_config()",
        "DispatchCoreConfig()"
      ],
      "namespaces": [
        "std"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/distributed.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void EndTraceCapture(MeshDevice* device, uint8_t cq_id, const MeshTraceId& trace_id)",
        "void EnqueueWaitForEvent(MeshCommandQueue& mesh_cq, const MeshEvent& event)",
        "MeshEvent EnqueueRecordEventToHost(\n    MeshCommandQueue& mesh_cq,\n    tt::stl::Span<const SubDeviceId> sub_device_ids = {},\n    const std::optional<MeshCoordinateRange>& device_range = std::nullopt)",
        "MeshWorkload CreateMeshWorkload()",
        "void AddProgramToMeshWorkload(MeshWorkload& mesh_workload, Program&& program, const MeshCoordinateRange& device_range)",
        "void EventSynchronize(const MeshEvent& event)",
        "void ReleaseTrace(MeshDevice* device, const MeshTraceId& trace_id)",
        "void EnqueueMeshWorkload(MeshCommandQueue& mesh_cq, MeshWorkload& mesh_workload, bool blocking)",
        "void Synchronize(\n    MeshDevice* device, std::optional<uint8_t> cq_id, tt::stl::Span<const SubDeviceId> sub_device_ids = {})",
        "void ReplayTrace(MeshDevice* device, uint8_t cq_id, const MeshTraceId& trace_id, bool blocking)",
        "MeshTraceId BeginTraceCapture(MeshDevice* device, uint8_t cq_id)",
        "void EnqueueReadMeshBuffer(\n    MeshCommandQueue& mesh_cq,\n    std::vector<DType>& dst,\n    std::shared_ptr<MeshBuffer>& mesh_buffer,\n    bool blocking = true)",
        "MeshEvent EnqueueRecordEvent(\n    MeshCommandQueue& mesh_cq,\n    tt::stl::Span<const SubDeviceId> sub_device_ids = {},\n    const std::optional<MeshCoordinateRange>& device_range = std::nullopt)",
        "void WriteShard(\n    MeshCommandQueue& mesh_cq,\n    const std::shared_ptr<MeshBuffer>& mesh_buffer,\n    std::vector<DType>& src,\n    const MeshCoordinate& coord,\n    bool blocking = false)",
        "void EnqueueWriteMeshBuffer(\n    MeshCommandQueue& mesh_cq,\n    std::shared_ptr<MeshBuffer>& mesh_buffer,\n    const std::vector<DType>& src,\n    bool blocking = false)",
        "void Finish(MeshCommandQueue& mesh_cq, tt::stl::Span<const SubDeviceId> sub_device_ids = {})",
        "void ReadShard(\n    MeshCommandQueue& mesh_cq,\n    std::vector<DType>& dst,\n    const std::shared_ptr<MeshBuffer>& mesh_buffer,\n    const MeshCoordinate& coord,\n    bool blocking = true)"
      ],
      "namespaces": [
        "tt",
        "distributed",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [
        "void WriteShard(\n    MeshCommandQueue& mesh_cq,\n    const std::shared_ptr<MeshBuffer>& mesh_buffer,\n    std::vector<DType>& src,\n    const MeshCoordinate& coord,\n    bool blocking = false)",
        "void EnqueueWriteMeshBuffer(\n    MeshCommandQueue& mesh_cq,\n    std::shared_ptr<MeshBuffer>& mesh_buffer,\n    const std::vector<DType>& src,\n    bool blocking = false)",
        "void ReadShard(\n    MeshCommandQueue& mesh_cq,\n    std::vector<DType>& dst,\n    const std::shared_ptr<MeshBuffer>& mesh_buffer,\n    const MeshCoordinate& coord,\n    bool blocking = true)",
        "void EnqueueReadMeshBuffer(\n    MeshCommandQueue& mesh_cq,\n    std::vector<DType>& dst,\n    std::shared_ptr<MeshBuffer>& mesh_buffer,\n    bool blocking = true)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/distributed_context.hpp": {
      "classes": [
        "Request",
        "DistributedException",
        "DistributedContext"
      ],
      "constants": [
        "dtype_of_v",
        "is_supported_dtype_v",
        "value"
      ],
      "enums": [
        "ReduceOp",
        "DType"
      ],
      "functions": [
        "void reduce(tt::stl::Span<T> send_buf, tt::stl::Span<T> recv_buf, ReduceOp op, Rank root)",
        "void scan(tt::stl::Span<T> send_buf, tt::stl::Span<T> recv_buf, ReduceOp op)",
        "void reduce_scatter(tt::stl::Span<T> send_buf, tt::stl::Span<T> recv_buf, ReduceOp op)",
        "void all_reduce(tt::stl::Span<T> send_buf, tt::stl::Span<T> recv_buf, ReduceOp op)"
      ],
      "namespaces": [],
      "structs": [
        "is_supported_dtype",
        "Status"
      ],
      "template_functions": [
        "void reduce(tt::stl::Span<T> send_buf, tt::stl::Span<T> recv_buf, ReduceOp op, Rank root)",
        "void scan(tt::stl::Span<T> send_buf, tt::stl::Span<T> recv_buf, ReduceOp op)",
        "void reduce_scatter(tt::stl::Span<T> send_buf, tt::stl::Span<T> recv_buf, ReduceOp op)",
        "void all_reduce(tt::stl::Span<T> send_buf, tt::stl::Span<T> recv_buf, ReduceOp op)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/distributed_host_buffer.hpp": {
      "classes": [
        "DistributedHostBuffer"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "DistributedHostBuffer(\n        distributed::MeshShape global_shape,\n        distributed::MeshCoordinate local_offset,\n        distributed::MeshContainer<HostBuffer> local_buffers)",
        "DistributedHostBuffer(DistributedHostBuffer&&)",
        "DistributedHostBuffer(const DistributedHostBuffer&)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/edm_fabric_counters.hpp": {
      "classes": [],
      "constants": [
        "receiver_channel_counters_l1_size",
        "sender_channel_counters_l1_size"
      ],
      "enums": [],
      "functions": [
        "EdmFabricReceiverChannelCounters()"
      ],
      "namespaces": [],
      "structs": [
        "EdmFabricSenderChannelCounters",
        "EdmFabricReceiverChannelCounters"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/erisc_datamover_builder.hpp": {
      "classes": [
        "FabricEriscDatamoverBuilder"
      ],
      "constants": [
        "WR_CMD_BUF",
        "enable_fabric_pkt_header_recording",
        "MAX_EDM_NOC_VC",
        "AT_CMD_BUF",
        "default_iterations_between_ctx_switch_and_teardown_checks",
        "WR_REG_CMD_BUF",
        "default_firmware_context_switch_interval",
        "DEFAULT_NOC_VC",
        "default_mesh_packet_payload_size_bytes",
        "RD_CMD_BUF",
        "default_packet_payload_size_bytes",
        "enable_fabric_counters",
        "DEFAULT_RECEIVER_LOCAL_WRITE_NOC",
        "DEFAULT_SENDER_ACK_NOC",
        "DEFAULT_RECEIVER_FORWARDING_NOC",
        "num_virtual_channels"
      ],
      "enums": [
        "FabricEriscDatamoverType"
      ],
      "functions": [
        "void get_runtime_args_for_edm_termination_infos(\n    const std::vector<edm_termination_info_t>& edm_termination_infos, std::vector<uint32_t>& args_out)",
        "size_t log_worker_to_fabric_edm_sender_rt_args(const std::vector<uint32_t>& args, size_t starting_arg_idx = 0)",
        "FabricEriscDatamoverConfig(\n        std::size_t channel_buffer_size_bytes,\n        Topology topology = Topology::Linear,\n        FabricEriscDatamoverOptions options = {})",
        "void append_worker_to_fabric_edm_sender_rt_args(\n    const SenderWorkerAdapterSpec& connection,\n    size_t sender_worker_flow_control_semaphore_id,\n    size_t sender_worker_teardown_semaphore_id,\n    size_t sender_worker_buffer_index_semaphore_id,\n    std::vector<uint32_t>& args_out)",
        "FabricRiscConfig(uint32_t risc_id)",
        "FabricEriscDatamoverBuilder(\n        const CoreCoord& my_eth_core_logical,\n        size_t my_noc_x,\n        size_t my_noc_y,\n        size_t my_chip_id,\n        size_t peer_chip_id,\n\n        const std::array<std::optional<size_t>, FabricEriscDatamoverConfig::max_downstream_edms>&\n            receiver_channels_downstream_flow_control_semaphore_id,\n        const std::array<std::optional<size_t>, FabricEriscDatamoverConfig::max_downstream_edms>&\n            receiver_channels_downstream_teardown_semaphore_id,\n        const std::array<size_t, FabricEriscDatamoverConfig::num_sender_channels>&\n            sender_channels_flow_control_semaphore_id,\n        const std::array<size_t, FabricEriscDatamoverConfig::num_sender_channels>&\n            sender_channels_connection_semaphore_id,\n        const std::array<size_t, FabricEriscDatamoverConfig::num_sender_channels>&\n            sender_channels_buffer_index_semaphore_id,\n\n        const FabricEriscDatamoverConfig& config,\n        eth_chan_directions direction,\n        bool enable_persistent_mode,\n        bool build_in_worker_connection_mode = false,\n        bool dateline_connection = false)",
        "FabricEriscDatamoverConfig(Topology topology = Topology::Linear)"
      ],
      "namespaces": [],
      "structs": [
        "FabricEriscDatamoverConfig",
        "SenderWorkerAdapterSpec",
        "FabricEriscDatamoverOptions",
        "edm_termination_info_t",
        "FabricRiscConfig"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/event.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [
        "Event"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/fabric.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void append_fabric_connection_rt_args(\n    const chip_id_t src_chip_id,\n    const chip_id_t dst_chip_id,\n    const uint32_t link_idx,\n    tt::tt_metal::Program& worker_program,\n    const CoreCoord& worker_core,\n    std::vector<uint32_t>& worker_args,\n    CoreType core_type = CoreType::WORKER)",
        "size_t get_tt_fabric_channel_buffer_size_bytes()"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/fabric_edm_packet_header.hpp": {
      "classes": [],
      "constants": [
        "FWD_ONLY_FIELD",
        "START_DISTANCE_FIELD_BIT_WIDTH",
        "LAST_MCAST_VAL",
        "default_high_vc_distance",
        "LAST_HOP_DISTANCE_VAL",
        "WRITE_ONLY",
        "FORWARD_EAST",
        "RANGE_MASK",
        "FORWARD_WEST",
        "RANGE_HOPS_FIELD_BIT_WIDTH",
        "MAX_NUM_ENCODINGS",
        "WRITE_AND_FORWARD_NS",
        "FORWARD_SOUTH",
        "FORWARD_NORTH",
        "FIELD_WIDTH",
        "NOOP",
        "HOP_DISTANCE_MASK",
        "WRITE_AND_FORWARD_EW",
        "WRITE_AND_FORWARD",
        "FIELD_MASK",
        "FORWARD_ONLY",
        "WR_ONLY_FIELD",
        "LAST_CHIP_IN_MCAST_VAL"
      ],
      "enums": [
        "TerminationSignal",
        "EDMStatus",
        "NocSendType",
        "ChipSendType"
      ],
      "functions": [
        "NocUnicastAtomicIncCommandHeader(uint64_t noc_address, uint16_t val, uint16_t wrap, bool flush = true)",
        "NocUnicastAtomicIncFusedCommandHeader(\n        uint64_t noc_address, uint64_t semaphore_noc_address, uint16_t val, uint16_t wrap, bool flush = true)"
      ],
      "namespaces": [],
      "structs": [
        "LowLatencyRoutingFields",
        "LowLatencyMeshPacketHeader",
        "NocMulticastCommandHeader",
        "PacketHeaderBase",
        "MeshPacketHeader",
        "NocUnicastAtomicIncCommandHeader",
        "NocUnicastAtomicIncFusedCommandHeader",
        "LowLatencyPacketHeader",
        "MulticastRoutingCommandHeader",
        "NocUnicastInlineWriteCommandHeader",
        "NocMulticastAtomicIncCommandHeader",
        "LowLatencyMeshRoutingFields",
        "RoutingFields",
        "NocUnicastCommandHeader",
        "PacketHeader"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/fabric_edm_types.hpp": {
      "classes": [],
      "constants": [
        "operator"
      ],
      "enums": [
        "SendStatus",
        "Topology"
      ],
      "functions": [
        "coord_t(uint32_t x, uint32_t y)",
        "WorkerXY(uint16_t x, uint16_t y)"
      ],
      "namespaces": [],
      "structs": [
        "EDMChannelWorkerLocationInfo",
        "WorkerXY",
        "coord_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/fabric_host_interface.h": {
      "classes": [],
      "constants": [],
      "enums": [
        "eth_chan_directions",
        "packet_session_command",
        "eth_chan_magic_values"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [
        "fabric_router_l1_config_t",
        "routing_table_t",
        "port_direction_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/fabric_types.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "FabricConfig"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/global_circular_buffer.hpp": {
      "classes": [
        "GlobalCircularBuffer"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "CBHandle CreateCircularBuffer(\n    Program& program,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    const CircularBufferConfig& config,\n    const GlobalCircularBuffer& global_circular_buffer)",
        "void UpdateDynamicCircularBufferAddress(\n    Program& program, CBHandle cb_handle, const GlobalCircularBuffer& global_circular_buffer)",
        "GlobalCircularBuffer(GlobalCircularBuffer&&)",
        "GlobalCircularBuffer(\n        IDevice* device,\n        const std::vector<std::pair<CoreCoord, CoreRangeSet>>& sender_receiver_core_mapping,\n        uint32_t size,\n        BufferType buffer_type = BufferType::L1)",
        "GlobalCircularBuffer(const GlobalCircularBuffer&)",
        "GlobalCircularBuffer CreateGlobalCircularBuffer(\n    IDevice* device,\n    const std::vector<std::pair<CoreCoord, CoreRangeSet>>& sender_receiver_core_mapping,\n    uint32_t size,\n    BufferType buffer_type = BufferType::L1)"
      ],
      "namespaces": [
        "std",
        "experimental"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/global_semaphore.hpp": {
      "classes": [
        "GlobalSemaphore"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "GlobalSemaphore(GlobalSemaphore&&)",
        "GlobalSemaphore(\n        IDevice* device, CoreRangeSet&& cores, uint32_t initial_value, BufferType buffer_type = BufferType::L1)",
        "GlobalSemaphore(const GlobalSemaphore&)",
        "GlobalSemaphore(\n        IDevice* device, const CoreRangeSet& cores, uint32_t initial_value, BufferType buffer_type = BufferType::L1)"
      ],
      "namespaces": [
        "tt",
        "std",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/graph_tracking.hpp": {
      "classes": [
        "IGraphProcessor",
        "GraphTracker",
        "IGraphHooks"
      ],
      "constants": [],
      "enums": [
        "RunMode"
      ],
      "functions": [
        "IGraphHooks()",
        "GraphTracker(GraphTracker&&)",
        "GraphTracker(const GraphTracker&)",
        "void track_function_start(std::string_view function_name, Args&&... args)",
        "IGraphProcessor()",
        "GraphTracker()",
        "void track_function_end(ReturnType&& output_tensors)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [
        "void track_function_end(ReturnType&& output_tensors)",
        "void track_function_start(std::string_view function_name, Args&&... args)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/hal.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint32_t get_dram_alignment()",
        "float get_eps()",
        "uint32_t get_pcie_alignment()",
        "uint32_t get_erisc_l1_unreserved_size()",
        "uint32_t get_max_worker_l1_unreserved_size()",
        "float get_nan()",
        "tt::ARCH get_arch()",
        "float get_inf()",
        "std::string get_arch_name()",
        "uint32_t get_erisc_l1_unreserved_base()",
        "uint32_t get_l1_alignment()",
        "uint32_t get_l1_size()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/hal_types.hpp": {
      "classes": [],
      "constants": [
        "NumHalProgrammableCoreTypes"
      ],
      "enums": [
        "HalProcessorClassType",
        "HalMemType",
        "HalL1MemAddrType",
        "HalProgrammableCoreType",
        "HalTensixHarvestAxis",
        "HalDramMemAddrType"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/hlk_desc.hpp": {
      "classes": [
        "tt_hlk_desc"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "tt_hlk_desc(tt_hlk_desc& in)",
        "void hash_hlk_args(size_t& seed, void* hlk_args, size_t hlk_args_size)",
        "tt_hlk_desc()"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/host_api.hpp": {
      "classes": [],
      "constants": [
        "l1_small_size",
        "num_hw_cqs",
        "trace_region_size",
        "worker_l1_size"
      ],
      "enums": [],
      "functions": [
        "void EnqueueReadSubBuffer(\n    CommandQueue& cq,\n    std::shared_ptr<Buffer> buffer,\n    std::vector<DType>& dst,\n    const BufferRegion& region,\n    bool blocking)",
        "void EnqueueProgram(CommandQueue& cq, Program& program, bool blocking)",
        "KernelHandle CreateKernel(\n    Program& program,\n    const std::string& file_name,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    const std::variant<DataMovementConfig, ComputeConfig, EthernetConfig>& config)",
        "GlobalSemaphore CreateGlobalSemaphore(\n    IDevice* device, CoreRangeSet&& cores, uint32_t initial_value, BufferType buffer_type = BufferType::L1)",
        "void EnqueueReadSubBuffer(\n    CommandQueue& cq, Buffer& buffer, std::vector<DType>& dst, const BufferRegion& region, bool blocking)",
        "void EnqueueWriteBuffer(\n    CommandQueue& cq,\n    const std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>>& buffer,\n    std::vector<DType>& src,\n    bool blocking)",
        "void UpdateDynamicCircularBufferAddress(Program& program, CBHandle cb_handle, const Buffer& buffer)",
        "uint32_t CreateSemaphore(\n    Program& program,\n    const std::variant<CoreRange, CoreRangeSet>& core_spec,\n    uint32_t initial_value,\n    CoreType core_type = CoreType::WORKER)",
        "void SetRuntimeArgs(\n    IDevice* device,\n    const std::shared_ptr<Kernel>& kernel,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    const std::shared_ptr<RuntimeArgs>& runtime_args)",
        "void EndTraceCapture(IDevice* device, const uint8_t cq_id, const uint32_t tid)",
        "void EnqueueWriteBuffer(\n    CommandQueue& cq,\n    const std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>>& buffer,\n    HostDataType src,\n    bool blocking)",
        "void EnqueueWriteSubBuffer(\n    CommandQueue& cq,\n    const std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>>& buffer,\n    HostDataType src,\n    const BufferRegion& region,\n    bool blocking)",
        "void LoadTrace(IDevice* device, uint8_t cq_id, uint32_t trace_id, const TraceDescriptor& trace_desc)",
        "size_t GetNumAvailableDevices()",
        "void EnqueueTrace(CommandQueue& cq, uint32_t trace_id, bool blocking)",
        "void AssignGlobalBufferToProgram(const std::shared_ptr<Buffer>& buffer, Program& program)",
        "Program CreateProgram()",
        "void UpdateCircularBufferPageSize(Program& program, CBHandle cb_handle, uint8_t buffer_index, uint32_t page_size)",
        "std::shared_ptr<Buffer> CreateBuffer(const ShardedBufferConfig& config)",
        "size_t GetNumPCIeDevices()",
        "void Synchronize(\n    IDevice* device,\n    const std::optional<uint8_t> cq_id = std::nullopt,\n    tt::stl::Span<const SubDeviceId> sub_device_ids = {})",
        "void SetRuntimeArgs(\n    const Program& program,\n    KernelHandle kernel,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    stl::Span<const uint32_t> runtime_args)",
        "std::shared_ptr<Buffer> CreateBuffer(const InterleavedBufferConfig& config)",
        "void EnqueueReadBuffer(CommandQueue& cq, Buffer& buffer, std::vector<DType>& dst, bool blocking)",
        "void EnqueueReadSubBuffer(\n    CommandQueue& cq,\n    std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>> buffer,\n    void* dst,\n    const BufferRegion& region,\n    bool blocking)",
        "void LightMetalBeginCapture()",
        "bool CloseDevice(IDevice* device)",
        "GlobalSemaphore CreateGlobalSemaphore(\n    IDevice* device, const CoreRangeSet& cores, uint32_t initial_value, BufferType buffer_type = BufferType::L1)",
        "bool EventQuery(const std::shared_ptr<Event>& event)",
        "std::shared_ptr<Buffer> CreateBuffer(const InterleavedBufferConfig& config, DeviceAddr address)",
        "void SetRuntimeArgs(\n    IDevice* device,\n    const std::shared_ptr<Kernel>& kernel,\n    const std::vector<CoreCoord>& core_spec,\n    const std::vector<std::shared_ptr<RuntimeArgs>>& runtime_args)",
        "KernelHandle CreateKernelFromString(\n    Program& program,\n    const std::string& kernel_src_code,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    const std::variant<DataMovementConfig, ComputeConfig, EthernetConfig>& config)",
        "std::shared_ptr<Buffer> CreateBuffer(const ShardedBufferConfig& config, SubDeviceId sub_device_id)",
        "void DumpMeshDeviceProfileResults(\n    distributed::MeshDevice& mesh_device,\n    ProfilerDumpState state = ProfilerDumpState::NORMAL,\n    const std::optional<ProfilerOptionalMetadata>& metadata = {})",
        "void EventSynchronize(const std::shared_ptr<Event>& event)",
        "uint32_t BeginTraceCapture(IDevice* device, const uint8_t cq_id)",
        "bool IsGalaxyCluster()",
        "void SetCommonRuntimeArgs(const Program& program, KernelHandle kernel_id, stl::Span<const uint32_t> runtime_args)",
        "std::shared_ptr<Buffer> CreateBuffer(const InterleavedBufferConfig& config, SubDeviceId sub_device_id)",
        "void EnqueueWriteSubBuffer(\n    CommandQueue& cq,\n    const std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>>& buffer,\n    std::vector<DType>& src,\n    const BufferRegion& region,\n    bool blocking)",
        "CBHandle CreateCircularBuffer(\n    Program& program,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    const CircularBufferConfig& config)",
        "void Finish(CommandQueue& cq, tt::stl::Span<const SubDeviceId> sub_device_ids = {})",
        "chip_id_t GetPCIeDeviceID(chip_id_t device_id)",
        "std::shared_ptr<Buffer> CreateBuffer(const ShardedBufferConfig& config, DeviceAddr address)",
        "void DeallocateBuffer(Buffer& buffer)",
        "void SetRuntimeArgs(\n    const Program& program,\n    KernelHandle kernel,\n    const std::vector<CoreCoord>& core_spec,\n    const std::vector<std::vector<uint32_t>>& runtime_args)",
        "LightMetalBinary LightMetalEndCapture()",
        "void UpdateDynamicCircularBufferAddressAndTotalSize(Program& program, CBHandle cb_handle, const Buffer& buffer, uint32_t total_size)",
        "void EnqueueRecordEvent(\n    CommandQueue& cq, const std::shared_ptr<Event>& event, tt::stl::Span<const SubDeviceId> sub_device_ids = {})",
        "void EnqueueReadBuffer(\n    CommandQueue& cq,\n    const std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>>& buffer,\n    void* dst,\n    bool blocking)",
        "void ReleaseTrace(IDevice* device, const uint32_t tid)",
        "void UpdateCircularBufferTotalSize(Program& program, CBHandle cb_handle, uint32_t total_size)",
        "void EnqueueReadBuffer(CommandQueue& cq, std::shared_ptr<Buffer> buffer, std::vector<DType>& dst, bool blocking)",
        "void ReplayTrace(IDevice* device, const uint8_t cq_id, const uint32_t tid, const bool blocking)",
        "void EnqueueWaitForEvent(CommandQueue& cq, const std::shared_ptr<Event>& event)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [
        "void EnqueueReadSubBuffer(\n    CommandQueue& cq,\n    std::shared_ptr<Buffer> buffer,\n    std::vector<DType>& dst,\n    const BufferRegion& region,\n    bool blocking)",
        "void EnqueueWriteSubBuffer(\n    CommandQueue& cq,\n    const std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>>& buffer,\n    std::vector<DType>& src,\n    const BufferRegion& region,\n    bool blocking)",
        "void EnqueueReadSubBuffer(\n    CommandQueue& cq, Buffer& buffer, std::vector<DType>& dst, const BufferRegion& region, bool blocking)",
        "void EnqueueWriteBuffer(\n    CommandQueue& cq,\n    const std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>>& buffer,\n    std::vector<DType>& src,\n    bool blocking)",
        "void EnqueueReadBuffer(CommandQueue& cq, std::shared_ptr<Buffer> buffer, std::vector<DType>& dst, bool blocking)",
        "void EnqueueReadBuffer(CommandQueue& cq, Buffer& buffer, std::vector<DType>& dst, bool blocking)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/host_buffer.hpp": {
      "classes": [
        "HostBuffer"
      ],
      "constants": [
        "size_bytes"
      ],
      "enums": [],
      "functions": [
        "HostBuffer()",
        "HostBuffer(tt::stl::Span<T> borrowed_data, MemoryPin pin)",
        "HostBuffer(const std::vector<T>& data)",
        "tt::stl::Span<T> view_as()",
        "HostBuffer(HostBuffer&& other)",
        "HostBuffer(const HostBuffer& other)",
        "void swap(HostBuffer& lhs, HostBuffer& rhs)",
        "tt::stl::Span<const T> view_as()",
        "HostBuffer(std::shared_ptr<std::vector<T>> data)",
        "HostBuffer(std::vector<T>&& data)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "HostBuffer(const std::vector<T>& data)",
        "tt::stl::Span<T> view_as()",
        "HostBuffer(tt::stl::Span<T> borrowed_data, MemoryPin pin)",
        "tt::stl::Span<const T> view_as()",
        "HostBuffer(std::shared_ptr<std::vector<T>> data)",
        "HostBuffer(std::vector<T>&& data)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/kernel.hpp": {
      "classes": [
        "Kernel"
      ],
      "constants": [
        "max_runtime_args"
      ],
      "enums": [
        "DataMovementProcessor",
        "SourceType"
      ],
      "functions": [
        "KernelSource(const std::string &source, const SourceType &source_type)",
        "Kernel(\n        const KernelSource& kernel_src,\n        const CoreRangeSet& core_range_set,\n        const std::vector<uint32_t>& compile_args,\n        const std::map<std::string, std::string>& defines)"
      ],
      "namespaces": [
        "ll_api",
        "tt",
        "tt_metal"
      ],
      "structs": [
        "KernelSource"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/kernel_types.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "KernelBuildOptLevel"
      ],
      "functions": [
        "WriterDataMovementConfig(\n        std::vector<uint32_t> compile_args = {},\n        std::map<std::string, std::string> defines = {},\n        KernelBuildOptLevel opt_level = KernelBuildOptLevel::O2)",
        "ReaderDataMovementConfig(\n        std::vector<uint32_t> compile_args = {},\n        std::map<std::string, std::string> defines = {},\n        KernelBuildOptLevel opt_level = KernelBuildOptLevel::O2)"
      ],
      "namespaces": [],
      "structs": [
        "EthernetConfig",
        "DataMovementConfig",
        "WriterDataMovementConfig",
        "ReaderDataMovementConfig",
        "ComputeConfig"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/lightmetal_binary.hpp": {
      "classes": [
        "LightMetalBinary"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "LightMetalBinary(std::vector<uint8_t> data)",
        "std::ofstream outFile(filename, std::ios::binary)",
        "std::vector<uint8_t> buffer(file_size)",
        "LightMetalBinary()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/lightmetal_capture_utils.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void LightMetalCompareToGolden(\n    CommandQueue& cq,\n    const std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>>& buffer,\n    void* golden_data)",
        "void LightMetalCompareToCapture(\n    CommandQueue& cq,\n    const std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>>& buffer,\n    void* dst = nullptr)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/lightmetal_replay.hpp": {
      "classes": [
        "LightMetalReplay"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "LightMetalReplay(const LightMetalReplay&)",
        "LightMetalReplay(LightMetalReplay&&)",
        "LightMetalReplay(LightMetalBinary&& binary, IDevice* device = nullptr)"
      ],
      "namespaces": [
        "detail"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/logger.hpp": {
      "classes": [
        "Logger"
      ],
      "constants": [
        "level_str",
        "use_styles",
        "type_str",
        "src_info_stylized",
        "type_style",
        "level_style"
      ],
      "enums": [
        "Level",
        "LogType"
      ],
      "functions": [
        "void log_debug(fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_error(char const* str)",
        "void log_fatal(LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_info(LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_fatal(char const* str)",
        "void log_debug(LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_trace_(\n    LogType type,\n    const fmt::text_style src_style,\n    const std::string& src_info,\n    fmt::format_string<const std::string&, Args...> fmt,\n    Args&&... args)",
        "void log_level_type(Level level, LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log(Logger::Level log_level, LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "Logger()",
        "void log_error(LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_warning(LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_info(char const* str)",
        "void log_fatal(fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_error(fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_info(fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_warning(char const* str)",
        "void log_warning(fmt::format_string<Args...> fmt, Args&&... args)"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [
        "void log_debug(fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_fatal(LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_info(LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_level_type(Level level, LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_debug(LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_trace_(\n    LogType type,\n    const fmt::text_style src_style,\n    const std::string& src_info,\n    fmt::format_string<const std::string&, Args...> fmt,\n    Args&&... args)",
        "void log(Logger::Level log_level, LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_error(LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_warning(LogType type, fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_fatal(fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_error(fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_info(fmt::format_string<Args...> fmt, Args&&... args)",
        "void log_warning(fmt::format_string<Args...> fmt, Args&&... args)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/math.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint32_t round_down(uint32_t a, uint32_t b)",
        "uint32_t round_up(uint32_t a, uint32_t b)",
        "uint32_t div_up(uint32_t a, uint32_t b)"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/memory_pin.hpp": {
      "classes": [
        "MemoryPin"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "MemoryPin(std::shared_ptr<void> resource)",
        "MemoryPin(std::function<void()> increment_ref_count, std::function<void()> decrement_ref_count)",
        "MemoryPin(MemoryPin&& other)",
        "MemoryPin(const MemoryPin& other)",
        "MemoryPin()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/memory_reporter.hpp": {
      "classes": [
        "MemoryReporter"
      ],
      "constants": [],
      "enums": [
        "BufferType"
      ],
      "functions": [
        "void DumpDeviceMemoryState(const IDevice* device, const std::string& prefix = \"\")",
        "MemoryReporter(const MemoryReporter&)",
        "MemoryReporter()",
        "void DisableMemoryReports()",
        "void EnableMemoryReports()",
        "MemoryView GetMemoryView(const IDevice* device, const BufferType& buffer_type)",
        "MemoryReporter(MemoryReporter&& other)"
      ],
      "namespaces": [
        "tt",
        "detail",
        "tt_metal"
      ],
      "structs": [
        "MemoryView"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/mesh_buffer.hpp": {
      "classes": [
        "MeshBuffer",
        "AnyBuffer"
      ],
      "constants": [],
      "enums": [
        "MeshBufferLayout"
      ],
      "functions": [
        "AnyBuffer(std::shared_ptr<Buffer> buffer)",
        "AnyBuffer(std::shared_ptr<MeshBuffer> buffer)",
        "MeshBuffer(\n        const MeshBufferConfig& config,\n        const DeviceLocalBufferConfig& device_local_config,\n        DeviceAddr device_local_size,\n        MeshDevice* mesh_device,\n        std::shared_ptr<Buffer> backing_buffer)",
        "MeshBuffer(\n        const MeshBufferConfig& config,\n        const DeviceLocalBufferConfig& device_local_config,\n        DeviceAddr address,\n        DeviceAddr device_local_size,\n        MeshDevice* mesh_device)",
        "AnyBuffer()"
      ],
      "namespaces": [],
      "structs": [
        "DeviceLocalBufferConfig",
        "ShardedBufferConfig",
        "ReplicatedBufferConfig",
        "ExternallyOwnedState",
        "OwnedBufferState",
        "DeallocatedState"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/mesh_command_queue.hpp": {
      "classes": [
        "MeshCommandQueue"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "MeshCommandQueue(const MeshCommandQueue& other)",
        "MeshCommandQueue(MeshDevice* mesh_device, uint32_t id)"
      ],
      "namespaces": [
        "tt",
        "distributed",
        "tt_metal"
      ],
      "structs": [
        "ShardDataTransfer"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/mesh_config.hpp": {
      "classes": [
        "MeshDeviceConfig"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "MeshDeviceConfig(\n        const MeshShape& mesh_shape,\n        const std::optional<MeshCoordinate>& offset = std::nullopt,\n        const std::vector<chip_id_t>& physical_device_ids = {})"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/mesh_coord.hpp": {
      "classes": [
        "MeshCoordinate",
        "ConstIterator",
        "MeshShape",
        "MeshCoordinateValueProxy",
        "MeshContainer",
        "MeshCoordinateRangeSet",
        "MeshCoordinateRange",
        "Iterator"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "MeshCoordinateValueProxy(const MeshCoordinate* coord, T* value_ptr)",
        "MeshCoordinate(uint32_t x, uint32_t y, uint32_t z)",
        "auto get()",
        "MeshCoordinateRangeSet subtract(const MeshCoordinateRange& parent, const MeshCoordinateRange& intersection)",
        "MeshShape(std::initializer_list<uint32_t> ilist)",
        "MeshShape(uint32_t x)",
        "MeshContainer(const MeshShape& shape, std::vector<T> values)",
        "MeshCoordinateRange(const MeshShape& shape)",
        "MeshShape(uint32_t x, uint32_t y)",
        "bool is_line_topology(const MeshShape& shape)",
        "ConstIterator(\n            const MeshContainer* container, const MeshCoordinateRange::Iterator& coord_iter, size_t linear_index)",
        "MeshCoordinate(tt::stl::Span<const uint32_t> coords)",
        "MeshCoordinate(uint32_t x, uint32_t y)",
        "MeshShape(const tt::stl::SmallVector<uint32_t>& shape)",
        "MeshCoordinate(uint32_t x)",
        "Iterator(MeshContainer* container, const MeshCoordinateRange::Iterator& coord_iter, size_t linear_index)",
        "size_t to_linear_index(const MeshShape& shape, const MeshCoordinate& coord)",
        "MeshCoordinateRange(const MeshCoordinate& start, const MeshCoordinate& end)",
        "MeshCoordinateRangeSet()",
        "MeshContainer(const MeshShape& shape, const T& fill_value)",
        "MeshShape(uint32_t x, uint32_t y, uint32_t z)",
        "MeshShape(tt::stl::SmallVector<uint32_t>&& shape)",
        "MeshShape(tt::stl::Span<const uint32_t> span)",
        "MeshCoordinateRangeSet(const MeshCoordinateRange&)",
        "Iterator(const MeshCoordinateRange* range, const MeshCoordinate& current_coord, size_t linear_index)",
        "MeshCoordinateRange(const MeshCoordinate& coord)",
        "decltype(auto) get()"
      ],
      "namespaces": [
        "detail",
        "std"
      ],
      "structs": [],
      "template_functions": [
        "auto get()",
        "decltype(auto) get()"
      ],
      "typedefs": [],
      "usings": [
        "ShapeBase::size",
        "ShapeBase::operator[]",
        "ShapeBase::ShapeBase",
        "ShapeBase::empty"
      ]
    },
    "tt_metal/api/tt-metalium/mesh_device.hpp": {
      "classes": [
        "MeshDevice",
        "ScopedDevices"
      ],
      "constants": [],
      "enums": [
        "CoreType"
      ],
      "functions": [
        "MeshDevice(MeshDevice&&)",
        "ScopedDevices(const ScopedDevices&)",
        "ScopedDevices(\n            const std::vector<int>& device_ids,\n            size_t l1_small_size,\n            size_t trace_region_size,\n            size_t num_command_queues,\n            size_t worker_l1_size,\n            const DispatchCoreConfig& dispatch_core_config)",
        "MeshDevice(\n        std::shared_ptr<ScopedDevices> scoped_devices,\n        std::unique_ptr<MeshDeviceView> mesh_device_view,\n        std::shared_ptr<MeshDevice> parent_mesh = {})",
        "MeshDevice(const MeshDevice&)",
        "ScopedDevices(\n            size_t l1_small_size,\n            size_t trace_region_size,\n            size_t num_command_queues,\n            size_t worker_l1_size,\n            const DispatchCoreConfig& dispatch_core_config,\n            const MeshDeviceConfig& config)"
      ],
      "namespaces": [
        "tt",
        "program_cache",
        "distributed",
        "detail",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/mesh_device_view.hpp": {
      "classes": [
        "MeshDeviceView"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "MeshDeviceView(const MeshContainer<IDevice*>& devices)",
        "MeshDeviceView(const MeshDevice& mesh_device)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/mesh_event.hpp": {
      "classes": [
        "MeshEvent"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "MeshEvent(uint32_t id, MeshDevice* device, uint32_t mesh_cq_id, const MeshCoordinateRange& device_range)"
      ],
      "namespaces": [
        "tt",
        "distributed",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/mesh_graph.hpp": {
      "classes": [
        "MeshGraph"
      ],
      "constants": [],
      "enums": [
        "FabricType",
        "RoutingDirection",
        "ARCH"
      ],
      "functions": [
        "MeshGraph()",
        "MeshGraph(const std::string& mesh_graph_desc_file_path)"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [
        "ChipSpec",
        "hash_pair",
        "RouterEdge"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": [
        "tt::tt_metal::distributed::MeshContainer",
        "tt::tt_metal::distributed::MeshCoordinateRange",
        "tt::tt_metal::distributed::MeshCoordinate",
        "tt::tt_metal::distributed::MeshShape"
      ]
    },
    "tt_metal/api/tt-metalium/mesh_socket.hpp": {
      "classes": [
        "MeshSocket"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "MeshSocket(\n        std::shared_ptr<MeshBuffer> data_buffer,\n        std::shared_ptr<MeshBuffer> config_buffer,\n        const SocketConfig& config)"
      ],
      "namespaces": [],
      "structs": [
        "SocketMemoryConfig",
        "SocketConnection",
        "MeshCoreCoord",
        "SocketConfig"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/mesh_workload.hpp": {
      "classes": [
        "MeshWorkload"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "void EnqueueMeshWorkload(MeshCommandQueue& mesh_cq, MeshWorkload& mesh_workload, bool blocking)",
        "MeshWorkload(MeshWorkload&& other)",
        "MeshWorkload()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/metal_soc_descriptor.h": {
      "classes": [],
      "constants": [],
      "enums": [
        "BoardType"
      ],
      "functions": [
        "metal_SocDescriptor()",
        "metal_SocDescriptor(const tt_SocDescriptor& other, const BoardType& board_type)"
      ],
      "namespaces": [],
      "structs": [
        "metal_SocDescriptor"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/persistent_kernel_cache.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void DisablePersistentKernelCache()",
        "void EnablePersistentKernelCache()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/profiler_optional_metadata.hpp": {
      "classes": [
        "ProfilerOptionalMetadata"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "ProfilerOptionalMetadata(std::map<std::pair<chip_id_t, RuntimeID>, std::string>&& runtime_map)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/profiler_types.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "ProfilerDataBufferSource",
        "ProfilerSyncState",
        "ProfilerDumpState"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/program.hpp": {
      "classes": [
        "Program"
      ],
      "constants": [],
      "enums": [
        "ProgramBinaryStatus"
      ],
      "functions": [
        "std::shared_ptr<CircularBuffer> GetCircularBuffer(const Program& program, CBHandle id)",
        "Program(const Program& other)",
        "CBHandle CreateCircularBuffer(\n    Program& program,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    const CircularBufferConfig& config,\n    const GlobalCircularBuffer& global_circular_buffer)",
        "KernelHandle AddKernel(\n    Program& program, const std::shared_ptr<Kernel>& kernel, const HalProgrammableCoreType core_type)",
        "Program(const ProgramDescriptor& descriptor)",
        "Program()",
        "CBHandle CreateCircularBuffer(\n        Program& program,\n        const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n        const CircularBufferConfig& config)",
        "void ValidateCircularBufferRegion(const Program& program, const IDevice* device)",
        "uint32_t CreateSemaphore(\n        Program& program,\n        const std::variant<CoreRange, CoreRangeSet>& core_spec,\n        uint32_t initial_value,\n        CoreType core_type)",
        "uint32_t program_base_addr_on_core(\n    WorkloadType& workload, DeviceType generic_device, HalProgrammableCoreType core_type)",
        "std::shared_ptr<Kernel> GetKernel(const Program& program, KernelHandle kernel_id)",
        "Program(Program&& other)"
      ],
      "namespaces": [
        "tt",
        "distributed",
        "detail",
        "experimental",
        "program_dispatch",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [
        "uint32_t program_base_addr_on_core(\n    WorkloadType& workload, DeviceType generic_device, HalProgrammableCoreType core_type)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/program_cache.hpp": {
      "classes": [],
      "constants": [
        "MAX_SIZE",
        "ALIGNMENT"
      ],
      "enums": [],
      "functions": [
        "CachedProgram(CachedProgram&& other)",
        "CachedProgram(tt::tt_metal::Program&& program, shared_variables_t&& shared_variables)",
        "AdaptedCachedMeshWorkload(\n        tt::tt_metal::distributed::MeshWorkload&& workload,\n        std::unordered_map<distributed::MeshCoordinateRange, shared_variables_t>&& shared_variables)",
        "CachedProgram(const CachedProgram&)",
        "CachedProgram(tt::tt_metal::Program& program, shared_variables_t& shared_variables)",
        "CachedProgramFactory(\n        AdaptedCachedMeshWorkload<shared_variables_t>&& cached_workload, std::size_t program_factory_index)",
        "CachedProgramFactory(CachedMeshWorkload<shared_variables_t>&& cached_workload, std::size_t program_factory_index)",
        "CachedProgramFactory(CachedProgram<shared_variables_t>&& cached_program, std::size_t program_factory_index)",
        "CachedMeshWorkload(tt::tt_metal::distributed::MeshWorkload&& workload, shared_variables_t&& shared_variables)"
      ],
      "namespaces": [],
      "structs": [
        "CachedProgramFactory",
        "ProgramCache",
        "CachedMeshWorkload",
        "CachedProgram",
        "AdaptedCachedMeshWorkload"
      ],
      "template_functions": [
        "CachedProgramFactory(CachedProgram<shared_variables_t>&& cached_program, std::size_t program_factory_index)",
        "CachedProgramFactory(CachedMeshWorkload<shared_variables_t>&& cached_workload, std::size_t program_factory_index)",
        "CachedProgramFactory(\n        AdaptedCachedMeshWorkload<shared_variables_t>&& cached_workload, std::size_t program_factory_index)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/program_descriptors.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "SourceType"
      ],
      "functions": [
        "TileDescriptor()",
        "TileDescriptor(const Tile& tile)",
        "TileDescriptor(uint32_t height, uint32_t width, bool transpose)"
      ],
      "namespaces": [
        "experimental"
      ],
      "structs": [
        "CBFormatDescriptor",
        "SemaphoreDescriptor",
        "KernelDescriptor",
        "ComputeConfigDescriptor",
        "ReaderConfigDescriptor",
        "CBDescriptor",
        "EthernetConfigDescriptor",
        "WriterConfigDescriptor",
        "ProgramDescriptor",
        "DataMovementConfigDescriptor",
        "TileDescriptor"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/routing_table_generator.hpp": {
      "classes": [
        "RoutingTableGenerator",
        "FabricNodeId"
      ],
      "constants": [
        "max_nodes_in_mesh_",
        "max_num_meshes_"
      ],
      "enums": [],
      "functions": [
        "FabricNodeId(MeshId mesh_id, std::uint32_t chip_id)",
        "RoutingTableGenerator(const std::string& mesh_graph_desc_yaml_file)"
      ],
      "namespaces": [
        "std"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/runtime_args_data.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [
        "RuntimeArgsData"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/semaphore.hpp": {
      "classes": [
        "Semaphore"
      ],
      "constants": [],
      "enums": [
        "CoreType"
      ],
      "functions": [
        "Semaphore(const CoreRangeSet& core_range_set, uint32_t id, uint32_t initial_value, CoreType core_type)",
        "Semaphore(Semaphore&& other)",
        "Semaphore(const Semaphore& other)",
        "Semaphore(const CoreRangeSet& core_range_set, uint32_t id, uint32_t initial_value)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/shape.hpp": {
      "classes": [
        "Shape"
      ],
      "constants": [
        "sameSize",
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "tt::stl::SmallVector<uint32_t> compute_strides(const tt::tt_metal::Shape& shape)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": [
        "ShapeBase::cend",
        "ShapeBase::cbegin",
        "ShapeBase::view",
        "ShapeBase::ShapeBase",
        "ShapeBase::size",
        "ShapeBase::empty",
        "ShapeBase::operator[]"
      ]
    },
    "tt_metal/api/tt-metalium/shape2d.hpp": {
      "classes": [
        "Shape2D"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "Shape2D(const std::array<std::uint32_t, 2>& size)",
        "Shape2D(std::size_t height, std::size_t width)",
        "size_t get()",
        "Shape2D(const std::array<std::size_t, 2>& size)",
        "Shape2D(const std::pair<std::size_t, std::size_t>& size)"
      ],
      "namespaces": [
        "std"
      ],
      "structs": [],
      "template_functions": [
        "size_t get()"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/shape_base.hpp": {
      "classes": [
        "ShapeBase"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "ShapeBase()",
        "ShapeBase(Container&& shape)",
        "ShapeBase(tt::stl::Span<const uint32_t> span)",
        "ShapeBase(std::initializer_list<uint32_t> ilist)",
        "ShapeBase(const Container& shape)",
        "ShapeBase(const std::array<uint32_t, N>& arr)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "ShapeBase(const std::array<uint32_t, N>& arr)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/small_vector.hpp": {
      "classes": [],
      "constants": [
        "SMALL_VECTOR_SIZE"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [
        "ttnn"
      ],
      "structs": [
        "SmallVector"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": [
        "tt::stl::SmallVector",
        "tt::stl::reflection::operator<<",
        "boost::container::small_vector<T, PREALLOCATED_SIZE>::small_vector"
      ]
    },
    "tt_metal/api/tt-metalium/sub_device.hpp": {
      "classes": [
        "SubDevice"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "SubDevice(std::array<CoreRangeSet, NumHalProgrammableCoreTypes>&& cores)",
        "SubDevice(const SubDevice& sub_device)",
        "SubDevice(tt::stl::Span<const CoreRangeSet> cores)",
        "SubDevice(SubDevice&& sub_device)",
        "SubDevice(const std::array<CoreRangeSet, NumHalProgrammableCoreTypes>& cores)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/system_mesh.hpp": {
      "classes": [
        "SystemMesh"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "SystemMesh()",
        "SystemMesh(const SystemMesh&)",
        "SystemMesh(SystemMesh&&)"
      ],
      "namespaces": [
        "tt",
        "stl"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/tile.hpp": {
      "classes": [],
      "constants": [
        "attribute_names"
      ],
      "enums": [
        "DataFormat"
      ],
      "functions": [
        "Tile(\n        std::array<uint32_t, 2> tile_shape = {constants::TILE_HEIGHT, constants::TILE_WIDTH},\n        bool transpose_tile = false)"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [
        "Tile"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/tilize_utils.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "TensorLayoutType"
      ],
      "functions": [
        "std::uint32_t round_up_to_mul32(std::uint32_t val)",
        "std::vector<T> convert_layout(\n    tt::stl::Span<const T> data,\n    tt::stl::Span<const uint32_t> shape,\n    TensorLayoutType inL,\n    TensorLayoutType outL,\n    std::optional<PhysicalSize> tile_shape = std::nullopt,\n    std::optional<PhysicalSize> face_shape = std::nullopt,\n    bool transpose_within_face = false,\n    bool transpose_of_faces = false)",
        "std::vector<T> convert_layout_tile_nfaces_to_tile_swizzled(\n    tt::stl::Span<const T> data,\n    std::optional<PhysicalSize> tile_shape = std::nullopt,\n    std::optional<PhysicalSize> face_shape = std::nullopt,\n    bool transpose_face = false,\n    bool transpose_face_order = false)",
        "std::uint32_t round_up_to_mul16(std::uint32_t val)",
        "std::vector<T> untilize_swizzled(const std::vector<T>& input, uint32_t m, uint32_t n)",
        "std::vector<T> tilize_swizzled(const std::vector<T>& input, uint32_t m, uint32_t n)",
        "std::vector<T> tilize_nfaces(const std::vector<T>& input, uint32_t m, uint32_t n)",
        "std::vector<T> untilize_nfaces(const std::vector<T>& input, uint32_t m, uint32_t n)",
        "std::uint32_t round_up_to_tile(int val, int tile_val)",
        "TensAddr(const std::vector<std::uint32_t>& shape)",
        "std::vector<T> convert_layout(\n    tt::stl::Span<const T> data,\n    const PhysicalSize& shape,\n    TensorLayoutType inL,\n    TensorLayoutType outL,\n    std::optional<PhysicalSize> tile_shape = std::nullopt,\n    std::optional<PhysicalSize> face_shape = std::nullopt,\n    bool transpose_within_face = false,\n    bool transpose_of_faces = false)",
        "std::vector<T> convert_layout_tile_swizzled_to_tile_nfaces(\n    tt::stl::Span<const T> data,\n    std::optional<PhysicalSize> tile_shape = std::nullopt,\n    std::optional<PhysicalSize> face_shape = std::nullopt,\n    bool transpose_face = false,\n    bool transpose_face_order = false)"
      ],
      "namespaces": [],
      "structs": [
        "TensAddr"
      ],
      "template_functions": [
        "std::vector<T> convert_layout_tile_nfaces_to_tile_swizzled(\n    tt::stl::Span<const T> data,\n    std::optional<PhysicalSize> tile_shape = std::nullopt,\n    std::optional<PhysicalSize> face_shape = std::nullopt,\n    bool transpose_face = false,\n    bool transpose_face_order = false)",
        "std::vector<T> convert_layout(\n    tt::stl::Span<const T> data,\n    tt::stl::Span<const uint32_t> shape,\n    TensorLayoutType inL,\n    TensorLayoutType outL,\n    std::optional<PhysicalSize> tile_shape = std::nullopt,\n    std::optional<PhysicalSize> face_shape = std::nullopt,\n    bool transpose_within_face = false,\n    bool transpose_of_faces = false)",
        "std::vector<T> untilize_swizzled(const std::vector<T>& input, uint32_t m, uint32_t n)",
        "std::vector<T> tilize_swizzled(const std::vector<T>& input, uint32_t m, uint32_t n)",
        "std::vector<T> tilize_nfaces(const std::vector<T>& input, uint32_t m, uint32_t n)",
        "std::vector<T> untilize_nfaces(const std::vector<T>& input, uint32_t m, uint32_t n)",
        "std::vector<T> convert_layout(\n    tt::stl::Span<const T> data,\n    const PhysicalSize& shape,\n    TensorLayoutType inL,\n    TensorLayoutType outL,\n    std::optional<PhysicalSize> tile_shape = std::nullopt,\n    std::optional<PhysicalSize> face_shape = std::nullopt,\n    bool transpose_within_face = false,\n    bool transpose_of_faces = false)",
        "std::vector<T> convert_layout_tile_swizzled_to_tile_nfaces(\n    tt::stl::Span<const T> data,\n    std::optional<PhysicalSize> tile_shape = std::nullopt,\n    std::optional<PhysicalSize> face_shape = std::nullopt,\n    bool transpose_face = false,\n    bool transpose_face_order = false)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/tt_align.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint32_t align(uint32_t addr, uint32_t alignment)"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/tt_backend_api_types.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "RISCV",
        "DataFormat"
      ],
      "functions": [
        "std::string get_alias(ARCH arch)",
        "std::string get_string_lowercase(ARCH arch)",
        "bool is_integer_format(DataFormat format)",
        "uint32_t tile_size(const DataFormat& format)",
        "uint32_t datum_size(const DataFormat& format)",
        "ARCH get_arch_from_string(const std::string& arch_str)",
        "std::string get_string(ARCH arch)"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/tt_metal.hpp": {
      "classes": [],
      "constants": [
        "l1_small_size",
        "num_hw_cqs",
        "trace_region_size",
        "worker_l1_size"
      ],
      "enums": [
        "FabricConfig"
      ],
      "functions": [
        "void ReadFromBuffer(Buffer& buffer, uint8_t* host_buffer, bool shard_order = false)",
        "void SetDeviceProfilerDir(const std::string& output_dir = \"\")",
        "bool DispatchStateCheck(bool isFastDispatch)",
        "bool WriteToDeviceL1(\n    IDevice* device,\n    const CoreCoord& logical_core,\n    uint32_t address,\n    std::vector<uint32_t>& host_buffer,\n    CoreType core_type = CoreType::WORKER)",
        "void ReadShard(Buffer& buffer, std::vector<DType>& host_buffer, const uint32_t& core_id)",
        "bool ConfigureDeviceWithProgram(IDevice* device, Program& program, bool force_slow_dispatch = false)",
        "void DumpDeviceProfileResults(\n    IDevice* device,\n    ProfilerDumpState = ProfilerDumpState::NORMAL,\n    const std::optional<ProfilerOptionalMetadata>& metadata = {})",
        "void ReadShard(Buffer& buffer, uint8_t* host_buffer, const uint32_t& core_id)",
        "void ReadFromBuffer(Buffer& buffer, std::vector<DType>& host_buffer, bool shard_order = false)",
        "bool ReadFromDeviceL1(\n    IDevice* device,\n    const CoreCoord& logical_core,\n    uint32_t address,\n    uint32_t size,\n    std::vector<uint32_t>& host_buffer,\n    CoreType core_type = CoreType::WORKER)",
        "bool WriteRegToDevice(IDevice* device, const CoreCoord& logical_core, uint32_t address, const uint32_t& regval)",
        "bool ReadRegFromDevice(IDevice* device, const CoreCoord& logical_core, uint32_t address, uint32_t& regval)",
        "void ClearProfilerControlBuffer(IDevice* device)",
        "void FreshProfilerDeviceLog()",
        "void ProfilerSync(ProfilerSyncState state)",
        "void WaitProgramDone(IDevice* device, Program& program, bool dump_device_profile_results = true)",
        "bool WriteToDeviceDRAMChannel(IDevice* device, int dram_channel, uint32_t address, std::vector<uint32_t>& host_buffer)",
        "uint32_t EncodePerDeviceProgramID(uint32_t base_program_id, uint32_t device_id, bool is_host_fallback_op = false)",
        "void InitializeFabricConfig(FabricConfig fabric_config)",
        "void WriteToBuffer(Buffer& buffer, tt::stl::Span<const uint8_t> host_buffer)",
        "void LaunchProgram(\n    IDevice* device,\n    const std::shared_ptr<Program>& program,\n    bool wait_until_cores_done = true,\n    bool force_slow_dispatch = false)",
        "void WriteToBuffer(Buffer& buffer, const std::vector<DType>& host_buffer)",
        "void LaunchProgram(\n    IDevice* device, Program& program, bool wait_until_cores_done = true, bool force_slow_dispatch = false)",
        "void ReadFromBuffer(std::shared_ptr<Buffer> buffer, std::vector<DType>& host_buffer, bool shard_order = false)",
        "void CloseDevices(const std::map<chip_id_t, IDevice*>& devices)",
        "void WriteRuntimeArgsToDevice(IDevice* device, Program& program, bool force_slow_dispatch = false)",
        "void CompileProgram(IDevice* device, Program& program, bool force_slow_dispatch = false)",
        "void InitDeviceProfiler(IDevice* device)",
        "void DumpDeviceProfileResults(\n    IDevice* device,\n    std::vector<CoreCoord>& worker_cores,\n    ProfilerDumpState = ProfilerDumpState::NORMAL,\n    const std::optional<ProfilerOptionalMetadata>& metadata = {})",
        "std::map<chip_id_t, IDevice*> CreateDevices(\n    // TODO: delete this in favour of DevicePool\n    const std::vector<chip_id_t>& device_ids,\n    const uint8_t num_hw_cqs = 1,\n    const size_t l1_small_size = DEFAULT_L1_SMALL_SIZE,\n    const size_t trace_region_size = DEFAULT_TRACE_REGION_SIZE,\n    const tt_metal::DispatchCoreConfig& dispatch_core_config = tt_metal::DispatchCoreConfig{},\n    const std::vector<uint32_t>& l1_bank_remap = {},\n    const size_t worker_l1_size = DEFAULT_WORKER_L1_SIZE,\n    bool init_profiler = true,\n    bool use_max_eth_core_count_on_all_devices = false,\n    bool initialize_fabric_and_dispatch_fw = true)",
        "bool ReadFromDeviceDRAMChannel(\n    IDevice* device, int dram_channel, uint32_t address, uint32_t size, std::vector<uint32_t>& host_buffer)",
        "void WriteToBuffer(std::shared_ptr<Buffer> buffer, const std::vector<DType>& host_buffer)"
      ],
      "namespaces": [
        "tt",
        "detail",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [
        "void ReadShard(Buffer& buffer, std::vector<DType>& host_buffer, const uint32_t& core_id)",
        "void ReadFromBuffer(Buffer& buffer, std::vector<DType>& host_buffer, bool shard_order = false)",
        "void WriteToBuffer(Buffer& buffer, const std::vector<DType>& host_buffer)",
        "void WriteToBuffer(std::shared_ptr<Buffer> buffer, const std::vector<DType>& host_buffer)",
        "void ReadFromBuffer(std::shared_ptr<Buffer> buffer, std::vector<DType>& host_buffer, bool shard_order = false)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/util.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "HalProgrammableCoreType hal_programmable_core_type_from_core_type(CoreType core_type)",
        "NOC GetPreferredNOCForDRAMRead(ARCH arch)",
        "uint32_t TileSize(const DataFormat& data_format)",
        "NOC GetPreferredNOCForDRAMWrite(ARCH arch)",
        "DeviceAddr SizeBytesPerBank(\n    DeviceAddr size_bytes, DeviceAddr page_size_bytes, uint32_t num_banks, uint32_t alignment_bytes)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/utils.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void hash_combine(std::size_t& seed, const T& value)",
        "void create_file(const string& file_path_str)",
        "auto underlying_type(const E& e)",
        "bool run_command(const string& cmd, const string& log_file, const bool verbose)"
      ],
      "namespaces": [
        "tt",
        "utils"
      ],
      "structs": [],
      "template_functions": [
        "void hash_combine(std::size_t& seed, const T& value)",
        "auto underlying_type(const E& e)"
      ],
      "typedefs": [],
      "usings": [
        "std::string"
      ]
    },
    "tt_metal/api/tt-metalium/vector_aligned.hpp": {
      "classes": [],
      "constants": [
        "MEMCPY_ALIGNMENT"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/api/tt-metalium/work_split.hpp": {
      "classes": [],
      "constants": [
        "row_wise"
      ],
      "enums": [],
      "functions": [
        "int find_max_divisor(uint32_t val, uint32_t start_max_div)",
        "std::tuple<uint32_t, CoreRangeSet, CoreRangeSet, CoreRangeSet, uint32_t, uint32_t> split_work_to_cores(\n    const CoreCoord grid_size, const uint32_t units_to_divide, const bool row_wise = false)",
        "uint32_t merge_num_sticks_to_read(uint32_t num_sticks_to_read, uint32_t stick_size_bytes, uint32_t max_read_size)",
        "CoreRangeSet num_cores_to_corerangeset_in_subcoregrids(\n    const CoreCoord start_core,\n    const uint32_t target_num_cores,\n    const CoreRangeSet& sub_core_grids,\n    const bool row_wise = false)",
        "int find_max_block_size(uint32_t val, uint32_t max_block_size = 8)",
        "std::tuple<uint32_t, CoreRangeSet, CoreRangeSet, CoreRangeSet, uint32_t, uint32_t> split_work_to_cores(\n    const CoreRangeSet& core_grid, const uint32_t units_to_divide, const bool row_wise = false)",
        "CoreRangeSet num_cores_to_corerangeset(\n    const CoreCoord start_core,\n    const uint32_t target_num_cores,\n    const CoreCoord grid_size,\n    const bool row_wise = false)",
        "std::tuple<uint32_t, uint32_t> get_max_cores_divisible_by_tiles_per_core_tiles(\n    const uint32_t& num_tiles, const uint32_t& num_cores_max, bool request_even = false)",
        "CoreRangeSet num_cores_to_corerangeset(\n    const uint32_t target_num_cores, const CoreCoord grid_size, const bool row_wise = false)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/accessor/detail.h": {
      "classes": [],
      "constants": [
        "shard_shape",
        "packed_xy_coords",
        "strides",
        "num_banks",
        "shard_volume",
        "shard_grid_strides",
        "tensor_shape",
        "shard_strides",
        "tensor_volume",
        "volume",
        "rank",
        "tensor_strides",
        "shard_grid"
      ],
      "enums": [],
      "functions": [
        "auto make_struct_from_sequence_wrapper(std::index_sequence<Is...>)"
      ],
      "namespaces": [
        "detail"
      ],
      "structs": [
        "DistributionSpec",
        "DistributionSpecWrapper",
        "BankCoordWrapper",
        "ShapeWrapper"
      ],
      "template_functions": [
        "auto make_struct_from_sequence_wrapper(std::index_sequence<Is...>)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/accessor/sharded_accessor.h": {
      "classes": [],
      "constants": [
        "compile_time_args_skip",
        "page_size"
      ],
      "enums": [],
      "functions": [
        "FORCE_INLINE noc_async_write_page(const uint32_t id, const uint32_t src_addr, uint8_t noc = noc_index)",
        "struct ShardedAccessor {\n    static constexpr DSpec dspec{};\n    static constexpr auto page_size = PageSize;\n\n    // Runtime args\n    const size_t bank_base_address;\n\n    // Helpers\n    struct PageMapping {\n        size_t bank_id;\n        size_t bank_page_offset;\n    };\n\n    PageMapping get_bank_and_offset(uint32_t page_id) const {\n        // Check that page_id is within bounds\n        ASSERT(page_id < dspec.tensor_volume);\n        // TODO: Should be possible to directly implement get_bank_and_offset logic with page_id and skip computing the\n        // page_coord\n        std::array<uint32_t, dspec.rank> page_coord;\n        for (int i = dspec.rank - 1; i >= 0; --i) {\n            page_coord[i] = page_id % dspec.tensor_shape[i];\n            page_id /= dspec.tensor_shape[i];\n        }\n        return get_bank_and_offset(page_coord);\n    }\n\n    PageMapping get_bank_and_offset(const std::array<uint32_t, dspec.rank> page_coord) const {\n        // Flattened shard id is used to compute the bank id and shard id within a bank\n        // - First, get the shard coordinate with page_coord[i] / dspec.shard_shape[i]\n        // - Then, multiply by the shard grid strides and accumulate\n        // - Repeat for all dims\n        // Page offset within shard refers to the offset within the shard the page belongs to\n        // - First, get the page coordinate within the shard with page_coord[i] % dspec.shard_shape[i]\n        // - Then, multiple by the shard strides and accumulate\n        // - Repeat for all dims\n        // Final page offset within the bank is simply: bank_shard_id * shard_volume + page_offset_within_shard\n\n        size_t flattened_shard_id = 0;\n        size_t page_offset_within_shard = 0;\n        for (size_t i = 0; i < dspec.rank; ++i) {\n            // Check that page_coord is within bounds\n            ASSERT(page_coord[i] < dspec.tensor_shape[i]);\n            flattened_shard_id += (page_coord[i] / dspec.shard_shape[i]) * dspec.shard_grid_strides[i];\n            page_offset_within_shard += (page_coord[i] % dspec.shard_shape[i]) * dspec.shard_strides[i];\n        }\n\n        // NOTE: This assumes shards are round-robin assigned across banks\n        size_t bank_id = flattened_shard_id % dspec.num_banks;\n        size_t bank_shard_id = flattened_shard_id / dspec.num_banks;\n\n        size_t bank_page_offset = bank_shard_id * dspec.shard_volume + page_offset_within_shard;\n\n        return {bank_id, bank_page_offset};\n    }\n\n    // NOC APIs\n    FORCE_INLINE\n    std::uint64_t get_noc_addr(const uint32_t id, uint8_t noc = noc_index) const {\n        const auto [bank_id, bank_offset] = this->get_bank_and_offset(id);\n        return NOC_XY_ADDR(\n            DYNAMIC_NOC_X(noc, (dspec.packed_xy_coords[bank_id] >> 16) & 0xFFFF),\n            DYNAMIC_NOC_Y(noc, dspec.packed_xy_coords[bank_id] & 0xFFFF),\n            bank_base_address + bank_offset * page_size);\n    } noc_async_read_page(const uint32_t id, const uint32_t dest_addr, uint8_t noc = noc_index)"
      ],
      "namespaces": [],
      "structs": [
        "PageMapping",
        "ShardedAccessor"
      ],
      "template_functions": [
        "struct ShardedAccessor {\n    static constexpr DSpec dspec{};\n    static constexpr auto page_size = PageSize;\n\n    // Runtime args\n    const size_t bank_base_address;\n\n    // Helpers\n    struct PageMapping {\n        size_t bank_id;\n        size_t bank_page_offset;\n    };\n\n    PageMapping get_bank_and_offset(uint32_t page_id) const {\n        // Check that page_id is within bounds\n        ASSERT(page_id < dspec.tensor_volume);\n        // TODO: Should be possible to directly implement get_bank_and_offset logic with page_id and skip computing the\n        // page_coord\n        std::array<uint32_t, dspec.rank> page_coord;\n        for (int i = dspec.rank - 1; i >= 0; --i) {\n            page_coord[i] = page_id % dspec.tensor_shape[i];\n            page_id /= dspec.tensor_shape[i];\n        }\n        return get_bank_and_offset(page_coord);\n    }\n\n    PageMapping get_bank_and_offset(const std::array<uint32_t, dspec.rank> page_coord) const {\n        // Flattened shard id is used to compute the bank id and shard id within a bank\n        // - First, get the shard coordinate with page_coord[i] / dspec.shard_shape[i]\n        // - Then, multiply by the shard grid strides and accumulate\n        // - Repeat for all dims\n        // Page offset within shard refers to the offset within the shard the page belongs to\n        // - First, get the page coordinate within the shard with page_coord[i] % dspec.shard_shape[i]\n        // - Then, multiple by the shard strides and accumulate\n        // - Repeat for all dims\n        // Final page offset within the bank is simply: bank_shard_id * shard_volume + page_offset_within_shard\n\n        size_t flattened_shard_id = 0;\n        size_t page_offset_within_shard = 0;\n        for (size_t i = 0; i < dspec.rank; ++i) {\n            // Check that page_coord is within bounds\n            ASSERT(page_coord[i] < dspec.tensor_shape[i]);\n            flattened_shard_id += (page_coord[i] / dspec.shard_shape[i]) * dspec.shard_grid_strides[i];\n            page_offset_within_shard += (page_coord[i] % dspec.shard_shape[i]) * dspec.shard_strides[i];\n        }\n\n        // NOTE: This assumes shards are round-robin assigned across banks\n        size_t bank_id = flattened_shard_id % dspec.num_banks;\n        size_t bank_shard_id = flattened_shard_id / dspec.num_banks;\n\n        size_t bank_page_offset = bank_shard_id * dspec.shard_volume + page_offset_within_shard;\n\n        return {bank_id, bank_page_offset};\n    }\n\n    // NOC APIs\n    FORCE_INLINE\n    std::uint64_t get_noc_addr(const uint32_t id, uint8_t noc = noc_index) const {\n        const auto [bank_id, bank_offset] = this->get_bank_and_offset(id);\n        return NOC_XY_ADDR(\n            DYNAMIC_NOC_X(noc, (dspec.packed_xy_coords[bank_id] >> 16) & 0xFFFF),\n            DYNAMIC_NOC_Y(noc, dspec.packed_xy_coords[bank_id] & 0xFFFF),\n            bank_base_address + bank_offset * page_size);\n    } noc_async_read_page(const uint32_t id, const uint32_t dest_addr, uint8_t noc = noc_index)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/atomic_rwptr.h": {
      "classes": [
        "atomic_rwptr"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "atomic_rwptr(uint address, modelt::l1_cache& l1)",
        "atomic_rwptr()",
        "atomic_rwptr(const atomic_rwptr&)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/bit_utils.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void extract_bit_array(uint32_t* src_array, int src_element_bits, uint32_t* dest_array, int num_dest_elements)",
        "void pack_bit_array(uint32_t* src_array, int src_element_bits, uint32_t* dest_array, int num_src_elements)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/c_tensix_core.h": {
      "classes": [
        "c_tensix_core"
      ],
      "constants": [
        "is_emulated"
      ],
      "enums": [],
      "functions": [
        "T l1_cast(uint32_t l1_offset)",
        "std::uint32_t l1_cast(T* l1_pointer)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "T l1_cast(uint32_t l1_offset)",
        "std::uint32_t l1_cast(T* l1_pointer)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/cmd_params.h": {
      "classes": [],
      "constants": [
        "MAX_NUM_PACKS",
        "size"
      ],
      "enums": [],
      "functions": [
        "std::uint32_t unpack_fifo_address(std::uint32_t fifo_address)",
        "StreamBinaryParams()",
        "std::uint32_t unpack_field(std::uint32_t x, unsigned int bits, unsigned int to_shift)",
        "NopClrOperationParams()",
        "StreamUnaryBinaryCommonParams()",
        "BinaryOperationParams()",
        "std::uint16_t pack_address(std::uint32_t address)",
        "std::uint32_t pack_32b_field(std::uint32_t x, unsigned int bits, unsigned int to_shift)",
        "StreamPoolParams()",
        "StreamConvParams()",
        "std::uint32_t unpack_address(std::uint32_t address)",
        "UnaryOperationParams()",
        "PackParams()"
      ],
      "namespaces": [],
      "structs": [
        "StreamFullConnParams",
        "UnaryOperationParams",
        "SfpuParams",
        "StreamBinaryParams",
        "BinaryOperationParams_added",
        "TernaryOperationWithBiasParams_added",
        "SliceZParams_added",
        "NopClrOperationParams",
        "StreamUnaryBinaryCommonParams",
        "PackParams",
        "StreamConvParams",
        "BinaryOperationParams",
        "StreamUnaryParams",
        "TernaryOperationParams_added",
        "StreamPoolParams",
        "PackOperation",
        "QuinaryOperationParams_added"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/core_config.h": {
      "classes": [],
      "constants": [
        "noc_size_x",
        "tensix_harvest_axis",
        "MaxProcessorsPerCoreType",
        "MaxDMProcessorsPerCoreType",
        "NumDramDispatchClasses",
        "NumEthDispatchClasses",
        "NumTensixDispatchClasses",
        "noc_size_y"
      ],
      "enums": [
        "DramProcessorTypes",
        "ProgrammableCoreType",
        "EthProcessorTypes",
        "TensixProcessorTypes"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/dram_address_map.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [
        "dram_mem"
      ],
      "structs": [
        "address_map"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/eth_fw_api.h": {
      "classes": [],
      "constants": [],
      "enums": [
        "eth_mailbox_e"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [
        "all_eth_mailbox_t",
        "eth_mailbox_t",
        "eth_api_table_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/eth_l1_address_map.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [
        "eth_l1_mem"
      ],
      "structs": [
        "address_map"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/noc/noc.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void noc_atomic_increment(uint32_t noc_coordinate, uint64_t addr, uint32_t incr, uint32_t wrap, bool linked)",
        "uint32_t noc_get_cmd_buf()",
        "void noc_set_active_instance(uint32_t noc_id)",
        "void noc_multicast_copy_src_include(\n    uint32_t src_coordinate,\n    uint64_t src_addr,\n    uint32_t dst_coordinate,\n    uint64_t dst_addr,\n    uint32_t multicast_mode,\n    uint32_t size,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "uint32_t noc_ecc_get_num_header_sec()",
        "void noc_atomic_read_and_increment(\n    uint32_t noc_coordinate,\n    uint64_t addr,\n    uint32_t incr,\n    uint32_t wrap,\n    uint32_t read_coordinate,\n    uint64_t read_addr,\n    bool linked,\n    uint8_t transaction_id)",
        "uint32_t noc_get_cfg_reg(uint32_t cfg_reg_id)",
        "void noc_write_dw_inline(\n    uint32_t dst_coordinate,\n    uint64_t dst_addr,\n    uint32_t val,\n    uint8_t be,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "void noc_ecc_clear_err(bool clear_mem_parity_err, bool clear_header_sec, bool clear_header_ded)",
        "void noc_ecc_cfg_stage_1(bool header_ckh_bits_en)",
        "bool noc_command_ready()",
        "void noc_set_cmd_buf(uint32_t cmd_buf_id)",
        "uint32_t noc_wr_ack_received()",
        "void noc_multicast_atomic_increment(\n    uint32_t noc_coordinate, uint64_t addr, uint32_t multicast_mode, uint32_t incr, uint32_t wrap, bool linked)",
        "void noc_multicast_copy(\n    uint32_t src_coordinate,\n    uint64_t src_addr,\n    uint32_t dst_coordinate,\n    uint64_t dst_addr,\n    uint32_t multicast_mode,\n    uint32_t size,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "uint32_t noc_ecc_get_num_header_ded()",
        "uint32_t noc_local_node_id()",
        "uint32_t noc_atomic_read_updates_completed()",
        "void noc_copy_word_be(\n    uint32_t src_coordinate,\n    uint64_t src_addr,\n    uint32_t dst_coordinate,\n    uint64_t dst_addr,\n    uint64_t be,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "void noc_accumulate(\n    uint32_t src_coordinate,\n    uint64_t src_addr,\n    uint32_t dst_coordinate,\n    uint64_t dst_addr,\n    uint32_t size,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    bool multicast,\n    uint32_t multicast_mode,\n    uint32_t vc_arb_priority,\n    uint8_t transaction_id,\n    uint8_t data_format,\n    bool disable_saturation)",
        "void noc_set_cfg_reg(uint32_t cfg_reg_id, uint32_t val)",
        "void noc_ecc_force_err(bool force_mem_parity_err, bool force_header_sec, bool force_header_ded)",
        "void noc_multicast_copy_word_be(\n    uint32_t src_coordinate,\n    uint64_t src_addr,\n    uint32_t dst_coordinate,\n    uint64_t dst_addr,\n    uint32_t multicast_mode,\n    uint64_t be,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "void noc_multicast_write_dw_inline(\n    uint32_t dst_coordinate,\n    uint64_t dst_addr,\n    uint32_t val,\n    uint32_t multicast_mode,\n    uint8_t be,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "uint32_t noc_status_reg(uint32_t status_reg_id)",
        "uint32_t noc_get_active_instance()",
        "void noc_clear_req_id_cnt(uint32_t id_mask)",
        "void noc_copy(\n    uint32_t src_coordinate,\n    uint64_t src_addr,\n    uint32_t dst_coordinate,\n    uint64_t dst_addr,\n    uint32_t size,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint32_t vc_arb_priority,\n    uint8_t transaction_id)",
        "void noc_multicast_atomic_read_and_increment(\n    uint32_t noc_coordinate,\n    uint64_t addr,\n    uint32_t multicast_mode,\n    uint32_t incr,\n    uint32_t wrap,\n    uint32_t read_coordinate,\n    uint64_t read_addr,\n    bool linked,\n    uint8_t transaction_id)",
        "void noc_ecc_cfg_stage_2(\n    bool niu_mem_parity_en,\n    bool router_mem_parity_en,\n    bool header_secded_en,\n    bool mem_parity_int_en,\n    bool header_sec_int_en,\n    bool header_ded_int_en)",
        "uint32_t noc_rd_resp_received()",
        "uint32_t noc_ecc_get_num_mem_parity_errs()",
        "void noc_multicast_copy_exclude(\n    uint32_t src_coordinate,\n    uint64_t src_addr,\n    uint32_t dst_coordinate,\n    uint64_t dst_addr,\n    uint32_t multicast_mode,\n    uint32_t multicast_exclude,\n    uint32_t size,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/noc/noc_overlay_parameters.hpp": {
      "classes": [
        "OLP"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "OLP()"
      ],
      "namespaces": [
        "Noc"
      ],
      "structs": [
        "OverlayField",
        "OverlayReg"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/noc_nonblocking_api.h": {
      "classes": [],
      "constants": [
        "dm0",
        "NCRISC_WR_REG_CMD_BUF",
        "BRISC_WR_REG_CMD_BUF",
        "BRISC_RD_CMD_BUF",
        "BRISC_WR_CMD_BUF",
        "dm1",
        "NUM_BARRIER_TYPES",
        "DYNAMIC_NOC_BRISC_WR_REG_CMD_BUF",
        "NOC_TARG_ADDR_COORDINATE",
        "BRISC_AT_CMD_BUF",
        "DYNAMIC_NOC_NCRISC_AT_CMD_BUF",
        "DYNAMIC_NOC_NCRISC_WR_REG_CMD_BUF",
        "DYNAMIC_NOC_NCRISC_RD_CMD_BUF",
        "NOC_ADDR_COORD_SHIFT",
        "NCRISC_WR_CMD_BUF",
        "NCRISC_RD_CMD_BUF",
        "NCRISC_AT_CMD_BUF",
        "DYNAMIC_NOC_BRISC_AT_CMD_BUF",
        "DYNAMIC_NOC_BRISC_RD_CMD_BUF",
        "DYNAMIC_NOC_NCRISC_WR_CMD_BUF",
        "offset",
        "NOC_COORDINATE_MASK",
        "NOC_RET_ADDR_COORDINATE",
        "DYNAMIC_NOC_BRISC_WR_CMD_BUF"
      ],
      "enums": [
        "NocBarrierType"
      ],
      "functions": [
        "bool ncrisc_noc_nonposted_write_with_transaction_id_sent(\n    uint32_t noc, uint32_t transcation_id)",
        "void ncrisc_noc_blitz_write_setup(\n    uint32_t noc, uint32_t cmd_buf, uint64_t dest_addr, uint32_t len_bytes, uint32_t vc, uint32_t num_times_to_write)",
        "void ncrisc_noc_fast_read_with_transaction_id(\n    uint32_t noc, uint32_t cmd_buf, uint32_t src_base_addr, uint32_t src_addr, uint32_t dest_addr, uint32_t trid)",
        "bool ncrisc_dynamic_noc_nonposted_writes_flushed(uint32_t noc)",
        "void dynamic_noc_local_barrier_init(\n    uint32_t noc0_status_reg, uint32_t noc1_status_reg)",
        "void noc_init(uint32_t atomic_ret_val)",
        "void ncrisc_noc_counters_init()",
        "bool ncrisc_noc_posted_writes_sent(uint32_t noc)",
        "bool ncrisc_noc_nonposted_writes_sent(uint32_t noc)",
        "bool noc_cmd_buf_ready(uint32_t noc, uint32_t cmd_buf)",
        "void ncrisc_noc_fast_write_any_len(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve,\n    bool posted = false,\n    uint32_t trid = 0)",
        "bool ncrisc_dynamic_noc_reads_flushed(uint32_t noc)",
        "bool ncrisc_dynamic_noc_nonposted_atomics_flushed(uint32_t noc)",
        "void ncrisc_noc_fast_write(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve,\n    bool posted = false,\n    uint32_t trid = 0)",
        "void set_noc_counter_val(uint32_t noc, uint32_t val)",
        "void NOC_CMD_BUF_WRITE_REG(\n    uint32_t noc, uint32_t buf, uint32_t addr, uint32_t val)",
        "bool ncrisc_noc_nonposted_write_with_transaction_id_flushed(\n    uint32_t noc, uint32_t transcation_id)",
        "uint32_t get_noc_counter_val(uint32_t noc)",
        "void inc_noc_counter_val(uint32_t noc, uint32_t inc = 1)",
        "void ncrisc_noc_fast_read_any_len(\n    uint32_t noc, uint32_t cmd_buf, uint64_t src_addr, uint32_t dest_addr, uint32_t len_bytes)",
        "uint32_t get_noc_counter_address(uint32_t noc)",
        "void ncrisc_noc_full_sync()",
        "void ncrisc_noc_fast_write_any_len_loopback_src(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve)",
        "void noc_fast_write_dw_inline(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t val,\n    uint64_t dest_addr,\n    uint32_t be,\n    uint32_t static_vc,\n    bool mcast,\n    bool posted = false)",
        "bool ncrisc_noc_read_with_transaction_id_flushed(\n    uint32_t noc, uint32_t transcation_id)",
        "bool ncrisc_noc_reads_flushed(uint32_t noc)",
        "bool ncrisc_noc_nonposted_writes_flushed(uint32_t noc)",
        "void noc_fast_atomic_increment(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint64_t addr,\n    uint32_t vc,\n    uint32_t incr,\n    uint32_t wrap,\n    bool linked,\n    bool posted = false,\n    uint32_t atomic_ret_val = 0)",
        "bool ncrisc_dynamic_noc_posted_writes_sent(uint32_t noc)",
        "void ncrisc_noc_fast_read(\n    uint32_t noc, uint32_t cmd_buf, uint64_t src_addr, uint32_t dest_addr, uint32_t len_bytes)",
        "void dynamic_noc_init()",
        "void ncrisc_noc_set_transaction_id(\n    uint32_t noc, uint32_t cmd_buf, uint32_t trid)",
        "void noc_local_state_init(int noc)",
        "void dynamic_noc_local_state_init()",
        "bool ncrisc_dynamic_noc_nonposted_writes_sent(uint32_t noc)",
        "bool ncrisc_noc_nonposted_atomics_flushed(uint32_t noc)",
        "uint32_t noc_get_interim_inline_value_addr(uint32_t noc, uint64_t dst_noc_addr)",
        "void ncrisc_noc_fast_write_loopback_src(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve)",
        "uint32_t NOC_CFG_READ_REG(uint32_t noc, uint32_t reg_id)",
        "void ncrisc_noc_fast_write_exclude_region(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve,\n    uint32_t exclude_region)",
        "uint32_t NOC_CMD_BUF_READ_REG(uint32_t noc, uint32_t buf, uint32_t addr)",
        "uint32_t NOC_STATUS_READ_REG(uint32_t noc, uint32_t reg_id)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "uint32_t get_noc_counter_address(uint32_t noc)",
        "void ncrisc_noc_fast_write_any_len_loopback_src(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve)",
        "void inc_noc_counter_val(uint32_t noc, uint32_t inc = 1)",
        "void noc_fast_write_dw_inline(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t val,\n    uint64_t dest_addr,\n    uint32_t be,\n    uint32_t static_vc,\n    bool mcast,\n    bool posted = false)",
        "void ncrisc_noc_blitz_write_setup(\n    uint32_t noc, uint32_t cmd_buf, uint64_t dest_addr, uint32_t len_bytes, uint32_t vc, uint32_t num_times_to_write)",
        "void ncrisc_noc_fast_write_any_len(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve,\n    bool posted = false,\n    uint32_t trid = 0)",
        "void ncrisc_noc_fast_read_with_transaction_id(\n    uint32_t noc, uint32_t cmd_buf, uint32_t src_base_addr, uint32_t src_addr, uint32_t dest_addr, uint32_t trid)",
        "void noc_fast_atomic_increment(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint64_t addr,\n    uint32_t vc,\n    uint32_t incr,\n    uint32_t wrap,\n    bool linked,\n    bool posted = false,\n    uint32_t atomic_ret_val = 0)",
        "void ncrisc_noc_fast_write(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve,\n    bool posted = false,\n    uint32_t trid = 0)",
        "void set_noc_counter_val(uint32_t noc, uint32_t val)",
        "void ncrisc_noc_fast_write_loopback_src(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve)",
        "void dynamic_noc_local_barrier_init(\n    uint32_t noc0_status_reg, uint32_t noc1_status_reg)",
        "void ncrisc_noc_fast_read(\n    uint32_t noc, uint32_t cmd_buf, uint64_t src_addr, uint32_t dest_addr, uint32_t len_bytes)",
        "void ncrisc_noc_fast_write_exclude_region(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve,\n    uint32_t exclude_region)",
        "uint32_t get_noc_counter_val(uint32_t noc)",
        "void ncrisc_noc_fast_read_any_len(\n    uint32_t noc, uint32_t cmd_buf, uint64_t src_addr, uint32_t dest_addr, uint32_t len_bytes)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/risc_chip_specific.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint16_t op_pack_tiles_ptr_sub(uint16_t a, uint16_t b)",
        "int get_epoch_table_y(int my_x, int my_y)",
        "int get_epoch_table_x(int my_x, int my_y)",
        "uint16_t op_pack_tiles_ptr_add(uint16_t a, uint16_t b)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/stream_interface.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint32_t get_fork_num_msgs_in_block(uint32_t stream_id)",
        "void stream_push_tiles(\n    uint32_t stream_id, uint32_t num_tiles, uint32_t num_words)",
        "uint32_t stream_get_buf_space_available_words(uint32_t stream_id)",
        "void stream_receiver_endpoint_single_clear_op(\n    uint32_t stream_id, uint32_t num_tiles)",
        "void stream_set_tiles_left_in_phase(uint32_t stream_id, uint32_t num_tiles)",
        "uint32_t stream_get_auto_cfg_header_phase_num_cfg_regs(uint32_t stream_id)",
        "bool reset_tile_header_buffer(\n    uint32_t stream_id,\n    uint32_t msg_info_buf_addr,\n    uint32_t buf_size_tiles,\n    uint32_t& prev_phases_tiles_received_inc,\n    uint32_t& prev_ack_thresh,\n    uint32_t num_iter_tiles)",
        "void stream_reset(uint32_t stream_id)",
        "void stream_set_curr_phase_num_msgs(uint32_t stream_id, uint32_t val)",
        "bool stream_is_receiver_endpoint(uint32_t stream_id)",
        "bool stream_dram_write_ok(uint32_t stream_id)",
        "void stream_receiver_endpoint_tiles_clear_b0(uint32_t stream_id, uint32_t num_tiles)",
        "void stream_get_remote_src_coord(uint32_t stream_id, uint32_t& x, uint32_t& y)",
        "bool stream_is_dram_read_opt_enabled(uint32_t stream_id)",
        "void stream_dram_writes_write_scratch(uint32_t stream_id, uint32_t scratch_reg_index, uint32_t val)",
        "void stream_rec_endpoint_set_phase_tiles_count(uint32_t stream_id, uint32_t val)",
        "uint32_t stream_get_data_buf_size(uint32_t stream_id)",
        "uint32_t stream_tiles_outstanding(uint32_t stream_id)",
        "bool stream_phase_id_is_active(uint32_t stream_id, uint32_t phase_id)",
        "void stream_receiver_endpoint_tiles_clear(uint32_t stream_id, uint32_t num_tiles)",
        "uint32_t stream_rec_endpoint_get_phase_tiles_count(uint32_t stream_id)",
        "uint32_t stream_phase_advance_wait(uint32_t stream_id)",
        "uint32_t stream_get_remote_data_buf_space_available(uint32_t stream_id)",
        "void stream_dram_write(\n    uint32_t stream_id,\n    uint32_t noc,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t len_tiles,\n    uint32_t vc,\n    uint32_t tile_header_buf_addr_word)",
        "bool stream_done_hint()",
        "uint32_t stream_get_remote_data_buf_size(uint32_t stream_id)",
        "void stream_signal_flushed_tiles(\n    uint32_t stream_id, uint32_t num_tiles, uint32_t num_words)",
        "uint32_t stream_get_free_words(uint32_t stream_id)",
        "uint32_t stream_get_output_noc(uint32_t stream_id)",
        "bool is_dummy_phase(uint32_t stream_id)",
        "uint32_t stream_get_auto_cfg_ptr(uint32_t stream_id)",
        "void stream_relay_tiles(\n    uint32_t stream_id, uint32_t num_tiles, uint32_t num_words)",
        "uint32_t stream_dram_read_should_reset_pointers(uint32_t stream_id)",
        "uint32_t stream_src_endpoint_get_phase_tiles_count(uint32_t stream_id)",
        "uint32_t stream_phase_next_recved_tile_addr(uint32_t stream_id)",
        "uint32_t stream_get_input_noc(uint32_t stream_id)",
        "uint32_t get_fork_scatter_inner_loop_count(uint32_t stream_id)",
        "uint32_t stream_phase_next_recved_tile_size(uint32_t stream_id)",
        "void stream_get_remote_dest_coord(uint32_t stream_id, uint32_t& x, uint32_t& y)",
        "bool stream_dram_writes_sent(uint32_t stream_id)",
        "void check_dummy_phase(uint32_t stream_id)",
        "uint32_t stream_dram_writes_read_scratch(uint32_t stream_id, uint32_t scratch_reg_index)",
        "void stream_phase_blob_run(\n    uint32_t stream_id, uint32_t blob_start_addr, uint32_t start_phase_num_cfg_regs)",
        "bool stream_receiver_endpoint_tile_clearing_finished(uint32_t stream_id)",
        "void stream_src_endpoint_set_phase_tiles_count(uint32_t stream_id, uint32_t val)",
        "uint32_t stream_get_auto_cfg_header(uint32_t stream_id)",
        "void set_fork_num_msgs_in_block(uint32_t stream_id, uint32_t val)",
        "uint32_t stream_get_curr_phase(uint32_t stream_id)",
        "uint32_t stream_should_packer_reset_pointers(uint32_t stream_id)",
        "uint32_t stream_get_buf_space_available(uint32_t stream_id)",
        "bool stream_next_phase_src_change(uint32_t stream_id)",
        "uint32_t stream_dram_write_should_reset_pointers(uint32_t stream_id)",
        "uint32_t stream_get_remote_data_buf_addr(uint32_t stream_id)",
        "void stream_set_auto_cfg_header(uint32_t stream_id, uint32_t val)",
        "void stream_clear_all_tiles(uint32_t stream_id)",
        "uint32_t stream_get_msg_info_rd_ptr(uint32_t stream_id)",
        "void stream_force_next_phase(uint32_t stream_id)",
        "bool stream_get_push_flushed(\n    uint32_t stream_id, uint32_t exp_rd_ptr = 0)",
        "int stream_get_curr_phase_num_msgs(uint32_t stream_id)",
        "void stream_phase_blob_run_offset(\n    uint32_t stream_id, uint32_t blob_base_addr, uint32_t blob_start_addr, uint32_t blob_size)",
        "bool should_stall_for_tile_header_buffer_reset(\n    uint32_t stream_id, uint32_t msg_info_buf_addr, uint32_t buf_size_tiles, uint32_t& prev_ack_thresh)",
        "void set_fork_scatter_inner_loop_count(uint32_t stream_id, uint32_t val)",
        "uint32_t stream_phase_is_active(uint32_t stream_id)",
        "bool assert_check(uint32_t stream_id, bool hang)",
        "uint32_t stream_get_data_buf_addr(uint32_t stream_id)",
        "void stream_dram_write_init(uint32_t stream_id, uint32_t tile_header_buffer_addr)",
        "uint32_t stream_get_output_unicast_vc(uint32_t stream_id)",
        "uint32_t stream_phase_tiles_received(uint32_t stream_id, uint32_t msg_info_buf_start_addr)",
        "void stream_update_remote_dest_buf_space_available(\n    uint32_t stream_id, uint32_t dest_num, uint32_t inc_val)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "bool stream_get_push_flushed(\n    uint32_t stream_id, uint32_t exp_rd_ptr = 0)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/stream_io_map.h": {
      "classes": [],
      "constants": [
        "OPERAND_START_STREAM"
      ],
      "enums": [],
      "functions": [
        "uint32_t get_operand_stream_id(int operand)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/tdma_xmov.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void wait_tdma_movers_done(uint mover_busy_mask)",
        "void tdma_xmov(uint mover_number, uint source_addr, uint dest_addr, uint size, xmov_direction_t direction)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/tensix.h": {
      "classes": [],
      "constants": [],
      "enums": [
        "cnt_id_t"
      ],
      "functions": [
        "u_T pack_field(x)",
        "u_T u_x(x)",
        "T bitmask(unsigned int bits)",
        "typename std::make_unsigned<T>::type u_x(x)"
      ],
      "namespaces": [],
      "structs": [
        "riscv_debug_reg_dbg_l1_mem_reg2_t",
        "riscv_debug_reg_dbg_dbus_cntl_t"
      ],
      "template_functions": [
        "typename std::make_unsigned<T>::type pack_field(T x, unsigned int to_shift)",
        "typename std::make_unsigned<T>::type pack_field(\n    T x, unsigned int bits, unsigned int from_shift, unsigned int to_shift)",
        "typename std::make_unsigned<T>::type pack_field(T x, unsigned int bits, unsigned int to_shift)",
        "T bitmask(unsigned int bits)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/blackhole/tensix_types.h": {
      "classes": [],
      "constants": [],
      "enums": [
        "math_fidelity_t",
        "tdma_mover_id_t",
        "DataFormat",
        "relu_mode_t",
        "stochastic_round_settings_t",
        "xmov_direction_t"
      ],
      "functions": [
        "TileHeader()",
        "TileHeader_u()"
      ],
      "namespaces": [],
      "structs": [
        "tile_descriptor_t",
        "fifo_ctl_t",
        "packer_config_t",
        "io_queue_pointers_t",
        "mover_config_u",
        "mover_config_t",
        "packer_config_u",
        "SectionHeader",
        "TileHeader"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/circular_buffer.h": {
      "classes": [],
      "constants": [
        "cb_addr_shift"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [
        "CBInterface",
        "RemoteSenderCBInterface",
        "RemoteReceiverCBInterface",
        "LocalCBInterface"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/circular_buffer_init.h": {
      "classes": [],
      "constants": [
        "is_sender"
      ],
      "enums": [],
      "functions": [
        "void setup_remote_cb_interfaces(\n    uint32_t tt_l1_ptr* cb_l1_base, uint32_t start_cb_index, uint8_t noc, uint8_t nm, bool posted, uint8_t cmd_buf)",
        "FORCE_INLINE setup_local_cb_read_write_interfaces(\n    uint32_t tt_l1_ptr* cb_l1_base,\n    uint32_t start_cb_index,\n    uint32_t max_cb_index,\n    bool read,\n    bool write,\n    bool init_wr_tile_ptr)"
      ],
      "namespaces": [
        "experimental"
      ],
      "structs": [],
      "template_functions": [
        "void setup_remote_cb_interfaces(\n    uint32_t tt_l1_ptr* cb_l1_base, uint32_t start_cb_index, uint8_t noc, uint8_t nm, bool posted, uint8_t cmd_buf)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/cmd_defs.h": {
      "classes": [],
      "constants": [],
      "enums": [
        "cmd_code"
      ],
      "functions": [
        "std::uint32_t getCmdSize(std::uint32_t first_cmd_word)",
        "std::uint32_t getCmdSize(cmd_code cmd)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/compile_time_args.h": {
      "classes": [],
      "constants": [
        "kernel_compile_time_args"
      ],
      "enums": [],
      "functions": [
        "uint32_t get_ct_arg()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "uint32_t get_ct_arg()"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/dataflow_api.h": {
      "classes": [],
      "constants": [
        "multicast_path_reserve",
        "vc",
        "noc_cmd_field",
        "offset"
      ],
      "enums": [],
      "functions": [
        "FORCE_INLINE cb_wait_front(int32_t operand, int32_t num_pages)",
        "FORCE_INLINE noc_async_read_tile_dram_sharded_set_state(\n    uint32_t bank_base_address,\n    uint32_t page_size,\n    uint32_t bank_id = 0,\n    const uint32_t vc = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE cb_pop_front(int32_t operand, int32_t num_pages)",
        "FORCE_INLINE noc_async_read_tile(\n    const uint32_t id,\n    const InterleavedAddrGenFast<DRAM, tile_hw>& s,\n    std::uint32_t dst_local_l1_addr,\n    uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "void wait_for_sync_register_value(uint32_t addr, int32_t val)",
        "FORCE_INLINE cb_reserve_back(int32_t operand, int32_t num_pages)",
        "uint8_t get_absolute_logical_y()",
        "FORCE_INLINE noc_async_read_one_packet(\n    std::uint64_t src_noc_addr, std::uint32_t dst_local_l1_addr, std::uint32_t size, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_read_barrier_with_trid(uint32_t trid, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_read_set_state(std::uint64_t src_noc_addr, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_read_inc_num_issued(std::uint32_t num_issued_reads_inc, uint8_t noc = noc_index)",
        "void RISC_POST_HEARTBEAT(uint32_t& heartbeat)",
        "uint32_t get_tile_num_faces(const std::int32_t operand)",
        "FORCE_INLINE noc_async_write_barrier_with_trid(uint32_t trid, uint8_t noc = noc_index)",
        "void noc_async_write_multicast(\n    std::uint32_t src_local_l1_addr,\n    std::uint64_t dst_noc_addr_multicast,\n    std::uint32_t size,\n    std::uint32_t num_dests,\n    bool linked = false,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_read_one_packet_set_state(std::uint64_t src_noc_addr, std::uint32_t size, uint8_t noc = noc_index)",
        "FORCE_INLINE get_arg_addr(int arg_idx)",
        "FORCE_INLINE noc_async_atomic_barrier(uint8_t noc_idx = noc_index)",
        "uint8_t get_absolute_logical_x()",
        "void noc_async_read_barrier(uint8_t noc = noc_index)",
        "FORCE_INLINE noc_inline_dw_write_set_state(\n    uint64_t addr,\n    uint32_t val = 0,\n    uint8_t be = 0xF,\n    uint8_t cmd_buf = write_at_cmd_buf,\n    uint8_t noc = noc_index,\n    uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "FORCE_INLINE cb_push_back(const int32_t operand, const int32_t num_pages)",
        "FORCE_INLINE noc_semaphore_wait(volatile tt_l1_ptr uint32_t* sem_addr, uint32_t val)",
        "FORCE_INLINE noc_async_full_barrier(uint8_t noc_idx = noc_index)",
        "FORCE_INLINE noc_async_write_one_packet_with_trid_set_state(\n    std::uint64_t dst_noc_addr,\n    uint8_t cmd_buf = write_cmd_buf,\n    uint8_t noc = noc_index,\n    uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "FORCE_INLINE noc_async_write_one_packet_with_state(\n    std::uint32_t src_local_l1_addr, std::uint32_t dst_noc_addr, uint8_t noc = noc_index)",
        "void noc_async_read(\n    std::uint64_t src_noc_addr, std::uint32_t dst_local_l1_addr, std::uint32_t size, uint8_t noc = noc_index)",
        "std::int32_t get_tile_size(const std::int32_t operand)",
        "FORCE_INLINE cb_pages_reservable_at_back(int32_t operand, int32_t num_pages)",
        "FORCE_INLINE noc_inline_dw_write(\n    uint64_t addr, uint32_t val, uint8_t be = 0xF, uint8_t noc = noc_index, uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "FORCE_INLINE noc_async_read_page(\n    const uint32_t id,\n    const InterleavedAddrGen<DRAM>& s,\n    std::uint32_t dst_local_l1_addr,\n    uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "void noc_semaphore_set_multicast_loopback_src(\n    std::uint32_t src_local_l1_addr,\n    std::uint64_t dst_noc_addr_multicast,\n    std::uint32_t num_dests,\n    bool linked = false,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_write_one_packet_with_trid_with_state(\n    std::uint32_t src_local_l1_addr,\n    std::uint32_t dst_noc_addr,\n    std::uint32_t size,\n    std::uint32_t trid,\n    uint8_t cmd_buf = write_cmd_buf,\n    uint8_t noc = noc_index)",
        "uint32_t get_tile_hw(const std::int32_t operand)",
        "FORCE_INLINE noc_async_write_barrier(uint8_t noc = noc_index)",
        "uint8_t get_relative_logical_y()",
        "FORCE_INLINE noc_async_write_multicast_one_packet(\n    std::uint32_t src_local_l1_addr,\n    std::uint64_t dst_noc_addr_multicast,\n    std::uint32_t size,\n    std::uint32_t num_dests,\n    bool linked = false,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE min(uint32_t a, uint32_t b)",
        "FORCE_INLINE noc_async_writes_flushed(uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_write_one_packet(\n    std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr, std::uint32_t size, uint8_t noc = noc_index)",
        "FORCE_INLINE get_common_arg_val(int arg_idx)",
        "FORCE_INLINE get_semaphore(uint32_t semaphore_id)",
        "DataFormat get_dataformat(const std::int32_t operand)",
        "FORCE_INLINE get_arg_val(int arg_idx)",
        "FORCE_INLINE noc_async_write_page(\n    const uint32_t id,\n    const InterleavedPow2AddrGenFast<DRAM>& s,\n    std::uint32_t src_local_l1_addr,\n    const uint32_t write_size_bytes,\n    const uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_semaphore_wait_min(volatile tt_l1_ptr uint32_t* sem_addr, uint32_t val)",
        "FORCE_INLINE get_read_ptr(uint32_t operand)",
        "FORCE_INLINE noc_semaphore_set(volatile tt_l1_ptr uint32_t* sem_addr, uint32_t val)",
        "FORCE_INLINE noc_async_read_page(\n    const uint32_t id,\n    const InterleavedPow2AddrGenFast<DRAM>& s,\n    std::uint32_t dst_local_l1_addr,\n    uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_read_partial_page(\n    const uint32_t id,\n    const InterleavedPow2AddrGenFast<DRAM>& s,\n    std::uint32_t dst_local_l1_addr,\n    const uint32_t size,\n    const uint32_t offset,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_inline_dw_write_with_state(\n    uint32_t val, uint32_t addr = 0, uint8_t cmd_buf = write_at_cmd_buf, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_write_tile(\n    const uint32_t id,\n    const InterleavedAddrGenFast<DRAM, tile_hw>& s,\n    std::uint32_t src_local_l1_addr,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_write_one_packet_with_trid(\n    std::uint32_t src_local_l1_addr,\n    std::uint64_t dst_noc_addr,\n    std::uint32_t size,\n    std::uint32_t trid,\n    uint8_t cmd_buf = write_cmd_buf,\n    uint8_t noc = noc_index,\n    uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "FORCE_INLINE noc_async_read_tile_dram_sharded_set_trid(uint32_t trid = 0, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_read_tile_dram_sharded_with_state_with_trid(\n    uint32_t src_base_addr, uint32_t src_addr, uint32_t dest_addr, uint32_t trid = 0, uint8_t noc = noc_index)",
        "FORCE_INLINE get_common_arg_addr(int arg_idx)",
        "FORCE_INLINE get_write_ptr(uint32_t operand)",
        "void noc_async_write(\n    std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr, std::uint32_t size, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_write_one_packet_set_state(\n    std::uint64_t dst_noc_addr, std::uint32_t size, uint8_t noc = noc_index, uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "void noc_semaphore_set_multicast(\n    std::uint32_t src_local_l1_addr,\n    std::uint64_t dst_noc_addr_multicast,\n    std::uint32_t num_dests,\n    bool linked = false,\n    uint8_t noc = noc_index)",
        "void noc_semaphore_set_remote(\n    std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_posted_writes_flushed(uint8_t noc = noc_index)",
        "void noc_async_write_multicast_loopback_src(\n    std::uint32_t src_local_l1_addr,\n    std::uint64_t dst_noc_addr_multicast,\n    std::uint32_t size,\n    std::uint32_t num_dests,\n    bool linked = false,\n    uint8_t noc = noc_index)",
        "uint8_t get_relative_logical_x()",
        "FORCE_INLINE noc_async_read_tile_dram_sharded_with_state(\n    uint32_t src_base_addr, uint32_t src_addr, uint32_t dest_addr, uint32_t trid = 0, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_read_with_state(\n    std::uint32_t src_noc_addr, std::uint32_t dst_local_l1_addr, std::uint32_t size, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_semaphore_inc(\n    uint64_t addr, uint32_t incr, uint8_t noc_id = noc_index, uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "FORCE_INLINE cb_pages_available_at_front(int32_t operand, int32_t num_pages)",
        "FORCE_INLINE noc_async_read_one_packet_with_state(\n    std::uint32_t src_noc_addr, std::uint32_t dst_local_l1_addr, uint8_t noc = noc_index)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "FORCE_INLINE noc_async_read_tile_dram_sharded_set_state(\n    uint32_t bank_base_address,\n    uint32_t page_size,\n    uint32_t bank_id = 0,\n    const uint32_t vc = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_read_tile(\n    const uint32_t id,\n    const InterleavedAddrGenFast<DRAM, tile_hw>& s,\n    std::uint32_t dst_local_l1_addr,\n    uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_inline_dw_write_set_state(\n    uint64_t addr,\n    uint32_t val = 0,\n    uint8_t be = 0xF,\n    uint8_t cmd_buf = write_at_cmd_buf,\n    uint8_t noc = noc_index,\n    uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "void noc_async_write_multicast(\n    std::uint32_t src_local_l1_addr,\n    std::uint64_t dst_noc_addr_multicast,\n    std::uint32_t size,\n    std::uint32_t num_dests,\n    bool linked = false,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_write_one_packet_with_trid_set_state(\n    std::uint64_t dst_noc_addr,\n    uint8_t cmd_buf = write_cmd_buf,\n    uint8_t noc = noc_index,\n    uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "FORCE_INLINE noc_async_write_one_packet_with_state(\n    std::uint32_t src_local_l1_addr, std::uint32_t dst_noc_addr, uint8_t noc = noc_index)",
        "void noc_async_read(\n    std::uint64_t src_noc_addr, std::uint32_t dst_local_l1_addr, std::uint32_t size, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_inline_dw_write(\n    uint64_t addr, uint32_t val, uint8_t be = 0xF, uint8_t noc = noc_index, uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "FORCE_INLINE noc_async_read_page(\n    const uint32_t id,\n    const InterleavedAddrGen<DRAM>& s,\n    std::uint32_t dst_local_l1_addr,\n    uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_write_one_packet_with_trid_with_state(\n    std::uint32_t src_local_l1_addr,\n    std::uint32_t dst_noc_addr,\n    std::uint32_t size,\n    std::uint32_t trid,\n    uint8_t cmd_buf = write_cmd_buf,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE get_semaphore(uint32_t semaphore_id)",
        "FORCE_INLINE get_common_arg_val(int arg_idx)",
        "FORCE_INLINE noc_async_write_page(\n    const uint32_t id,\n    const InterleavedPow2AddrGenFast<DRAM>& s,\n    std::uint32_t src_local_l1_addr,\n    const uint32_t write_size_bytes,\n    const uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE get_arg_val(int arg_idx)",
        "FORCE_INLINE noc_async_read_partial_page(\n    const uint32_t id,\n    const InterleavedPow2AddrGenFast<DRAM>& s,\n    std::uint32_t dst_local_l1_addr,\n    const uint32_t size,\n    const uint32_t offset,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_read_page(\n    const uint32_t id,\n    const InterleavedPow2AddrGenFast<DRAM>& s,\n    std::uint32_t dst_local_l1_addr,\n    uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_inline_dw_write_with_state(\n    uint32_t val, uint32_t addr = 0, uint8_t cmd_buf = write_at_cmd_buf, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_write_tile(\n    const uint32_t id,\n    const InterleavedAddrGenFast<DRAM, tile_hw>& s,\n    std::uint32_t src_local_l1_addr,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_write_one_packet_with_trid(\n    std::uint32_t src_local_l1_addr,\n    std::uint64_t dst_noc_addr,\n    std::uint32_t size,\n    std::uint32_t trid,\n    uint8_t cmd_buf = write_cmd_buf,\n    uint8_t noc = noc_index,\n    uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "FORCE_INLINE noc_async_read_tile_dram_sharded_with_state_with_trid(\n    uint32_t src_base_addr, uint32_t src_addr, uint32_t dest_addr, uint32_t trid = 0, uint8_t noc = noc_index)",
        "void noc_async_write(\n    std::uint32_t src_local_l1_addr, std::uint64_t dst_noc_addr, std::uint32_t size, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_async_write_one_packet_set_state(\n    std::uint64_t dst_noc_addr, std::uint32_t size, uint8_t noc = noc_index, uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "FORCE_INLINE noc_async_read_with_state(\n    std::uint32_t src_noc_addr, std::uint32_t dst_local_l1_addr, std::uint32_t size, uint8_t noc = noc_index)",
        "FORCE_INLINE noc_semaphore_inc(\n    uint64_t addr, uint32_t incr, uint8_t noc_id = noc_index, uint8_t vc = NOC_UNICAST_WRITE_VC)",
        "FORCE_INLINE noc_async_read_one_packet_with_state(\n    std::uint32_t src_noc_addr, std::uint32_t dst_local_l1_addr, uint8_t noc = noc_index)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/dataflow_api_addrgen.h": {
      "classes": [],
      "constants": [
        "aligned_log_base_2_of_page_size",
        "exp_shift",
        "datum_shift",
        "log2_page_size",
        "log_base_2_of_allocator_alignment",
        "aligned_page_size",
        "offset",
        "is_pow_2"
      ],
      "enums": [],
      "functions": [
        "FORCE_INLINE auto get_interleaved_addr_gen(uint32_t base_addr, uint32_t page_size, uint32_t log2_page_size)",
        "uint64_t get_dram_noc_addr(\n    const uint32_t id,\n    const uint32_t page_size,\n    const uint32_t bank_base_address,\n    const uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE get_noc_xy(uint32_t bank_index, uint8_t noc = noc_index)",
        "FORCE_INLINE get_noc_addr_from_bank_id(uint32_t bank_id, uint32_t bank_address_offset, uint8_t noc = noc_index)",
        "FORCE_INLINE get_allocator_alignment()",
        "FORCE_INLINE get_bank_index(uint32_t id, uint32_t bank_offset_index)",
        "FORCE_INLINE auto get_interleaved_addr_gen(uint32_t base_addr)",
        "FORCE_INLINE auto get_interleaved_addr_gen(uint32_t base_addr, uint32_t size)",
        "uint64_t get_system_memory_noc_addr(\n    const uint32_t id,\n    const uint32_t page_size,\n    const uint32_t base_addr,\n    const uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE get_bank_offset(uint32_t bank_index)",
        "uint64_t get_l1_noc_addr(\n    const uint32_t id,\n    const uint32_t page_size,\n    const uint32_t bank_base_address,\n    const uint32_t offset = 0,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE get_bank_offset_index(uint32_t id)",
        "FORCE_INLINE get_log_base2_of_allocator_alignment()"
      ],
      "namespaces": [
        "interleaved_addr_gen"
      ],
      "structs": [
        "InterleavedPow2AddrGen",
        "InterleavedPow2AddrGenFast",
        "InterleavedAddrGenFast",
        "InterleavedAddrGen"
      ],
      "template_functions": [
        "FORCE_INLINE auto get_interleaved_addr_gen(uint32_t base_addr, uint32_t page_size, uint32_t log2_page_size)",
        "FORCE_INLINE get_noc_addr_from_bank_id(uint32_t bank_id, uint32_t bank_address_offset, uint8_t noc = noc_index)",
        "FORCE_INLINE get_noc_xy(uint32_t bank_index, uint8_t noc = noc_index)",
        "FORCE_INLINE get_allocator_alignment()",
        "FORCE_INLINE get_bank_index(uint32_t id, uint32_t bank_offset_index)",
        "FORCE_INLINE auto get_interleaved_addr_gen(uint32_t base_addr)",
        "FORCE_INLINE auto get_interleaved_addr_gen(uint32_t base_addr, uint32_t size)",
        "FORCE_INLINE get_bank_offset(uint32_t bank_index)",
        "FORCE_INLINE get_bank_offset_index(uint32_t id)",
        "FORCE_INLINE get_log_base2_of_allocator_alignment()"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/dataflow_api_common.h": {
      "classes": [],
      "constants": [
        "noc_index",
        "noc_mode"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/dataflow_cmd_bufs.h": {
      "classes": [],
      "constants": [
        "write_reg_cmd_buf",
        "write_cmd_buf",
        "read_cmd_buf",
        "write_at_cmd_buf"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/dataflow_internal.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "FORCE_INLINE noc_fast_write_set_len(uint32_t len_bytes)",
        "FORCE_INLINE noc_fast_read(uint32_t src_addr, uint32_t dest_addr)",
        "FORCE_INLINE noc_fast_read_set_src_xy(uint64_t src_addr)",
        "FORCE_INLINE noc_fast_write_set_cmd_field(uint32_t vc, bool mcast, bool linked)",
        "FORCE_INLINE noc_fast_write(uint32_t src_addr, uint64_t dest_addr)",
        "FORCE_INLINE noc_fast_write_set_dst_xy(uint64_t dest_addr)",
        "FORCE_INLINE noc_fast_read_wait_ready()",
        "FORCE_INLINE noc_fast_write_wait_ready()",
        "FORCE_INLINE noc_fast_write_inc_num_dests(uint32_t num_issued)",
        "FORCE_INLINE noc_fast_read_set_len(uint32_t len_bytes)",
        "FORCE_INLINE noc_fast_read_inc_num_issued(uint32_t num_issued)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/assert.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void assert_and_hang(uint32_t line_num, debug_assert_type_t assert_type = DebugAssertTripped)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/dprint.h": {
      "classes": [],
      "constants": [
        "sz_sz",
        "code_sz",
        "curr_payload_size"
      ],
      "enums": [],
      "functions": [
        "U32(uint32_t val)",
        "uint32_t DebugPrintStrLen(const char* val)",
        "void risc_context_switch()",
        "SETPRECISION(char pa)",
        "WAIT(uint32_t val)",
        "BF16(uint16_t val)",
        "uint8_t DebugPrintTypeToId()",
        "DebugPrinter()",
        "TYPED_U32_ARRAY(uint16_t my_type, uint16_t my_subtype, uint32_t* ptr, uint32_t len)",
        "U32_ARRAY(uint32_t* ptr, uint32_t len)",
        "uint32_t DebugPrintTypeToSize(T val)",
        "RAISE(uint32_t val)",
        "void debug_print(DebugPrinter& dp, DebugPrintData data)",
        "F32(float val)",
        "SETW(char w)"
      ],
      "namespaces": [
        "internal_"
      ],
      "structs": [
        "OCT",
        "TYPED_U32_ARRAY",
        "ENDL",
        "FIXED",
        "DEC",
        "U32",
        "SETPRECISION",
        "DebugPrinter",
        "U32_ARRAY",
        "DebugPrintData",
        "DEFAULTFLOAT",
        "RAISE",
        "WAIT",
        "F32",
        "HEX",
        "SETW",
        "BF16"
      ],
      "template_functions": [
        "uint8_t DebugPrintTypeToId()",
        "uint32_t DebugPrintTypeToSize(T val)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/dprint_pages.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void print_f32_pages(uint32_t l1_addr, uint32_t elts_per_page, uint32_t npages, uint32_t start = 0)",
        "void print_bf16_pages(uint32_t l1_addr, uint32_t elts_per_page, uint32_t npages, uint32_t start = 0)",
        "void print_tile_rows(uint32_t cb_id, uint32_t rows = 32, uint32_t tile_id = 0, bool untilize = false)",
        "void print_u8_pages(uint32_t l1_addr, uint32_t bytes_per_page, uint32_t npages, uint32_t start = 0)",
        "void print_full_tile(uint32_t cb_id, uint32_t tile_id = 0, bool untilize = false)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/dprint_tensix.h": {
      "classes": [],
      "constants": [
        "NUM_ROWS_PER_TILE",
        "WIDTH",
        "ARRAY_LEN",
        "PRECISION",
        "NUM_FACES_PER_TILE",
        "NUM_ROWS_PER_FACE"
      ],
      "enums": [],
      "functions": [
        "uint16_t get_remapped_row_id(uint16_t row_id)",
        "void dprint_data_format(uint8_t data_format)",
        "uint16_t lo_word(uint32_t dword)",
        "void dprint_tensix_struct_field(\n    uint32_t word, uint32_t mask, uint8_t shamt, const char* name, bool printDec = false)",
        "uint16_t get_swizzled_row_id(uint16_t row_id)",
        "uint32_t reconstruct_float32(uint32_t float16, uint32_t mantissa16)",
        "void dprint_array_with_data_type(uint32_t data_format, uint32_t* data, uint32_t count)",
        "void dprint_tensix_dest_reg_row_float32(uint16_t row)",
        "uint16_t get_dest_row_id(\n    uint16_t tile_id, uint16_t face_id, uint16_t row_id, bool is_float32, bool is_remap, bool is_swizzle)",
        "void dprint_tensix_dest_reg_row_float16(uint32_t data_format, uint16_t row)",
        "uint16_t hi_word(uint32_t dword)",
        "void dprint_tensix_dest_reg(int tile_id = 0)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "void dprint_tensix_dest_reg(int tile_id = 0)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/dprint_tensix_pack.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void dprint_tensix_pack_config_l1_dest_addr(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_dis_shared_exp_assembler(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_downsample_mask(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_relu_config_disable_risc_bp_disable_main(const ckernel::packer::relu_config_t& config)",
        "void dprint_tensix_pack_dest_rd_ctrl_pck_dest_rd_ctrl_read_int8(const ckernel::packer::dest_rd_ctrl_t& dest)",
        "void dprint_tensix_pack_relu_config_alu_acc_ctrl_zero_flag_disabled_dst(\n    const ckernel::packer::relu_config_t& config)",
        "void dprint_tensix_pack_dest_rd_ctrl_pck_dest_rd_ctrl_round_10b_mant(\n    const ckernel::packer::dest_rd_ctrl_t& dest)",
        "void dprint_tensix_pack_relu_config_disable_risc_bp_disable_ncrisc(\n    const ckernel::packer::relu_config_t& config)",
        "void dprint_tensix_pack_relu_config_alu_acc_ctrl_zero_flag_disabled_src(\n    const ckernel::packer::relu_config_t& config)",
        "void dprint_tensix_pack_edge_offset_helper(const ckernel::packer::pck_edge_offset_t& edge, uint reg_id)",
        "void dprint_tensix_pack_config(uint reg_id = 0)",
        "void dprint_tensix_pack_config_add_l1_dest_addr_offset(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_src_if_sel(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_downsample_shift_count(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_sub_l1_tile_header_size(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_counters_pack_per_xy_plane_offset(const ckernel::packer::pack_counters_t& counters)",
        "void PACK(\n        // Get pointer to registers for current state ID\n        volatile uint tt_reg_ptr* cfg = get_cfg_pointer();\n\n        if (reg_id >= 1 && reg_id <= 2)",
        "void dprint_tensix_pack_relu_config_disable_risc_bp_disable_bmp_clear_trisc(\n    const ckernel::packer::relu_config_t& config)",
        "void dprint_tensix_pack_relu_config()",
        "void dprint_tensix_pack_config_disable_pack_zero_flag(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_exp_threshold(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_dest_rd_ctrl_pck_dest_rd_ctrl_read_unsigned(\n    const ckernel::packer::dest_rd_ctrl_t& dest)",
        "void dprint_tensix_pack_config_out_data_format(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_add_tile_header_size(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_counters_helper(const ckernel::packer::pack_counters_t& counters)",
        "void dprint_tensix_pack_counters_pack_reads_per_xy_plane(const ckernel::packer::pack_counters_t& counters)",
        "void dprint_tensix_pack_config_uncompressed(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_exp_section_size(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_edge_offset_mask(const ckernel::packer::pck_edge_offset_t& edge)",
        "void dprint_tensix_pack_config_reserved_2(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_exp_threshold_en(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_strides_z_stride(const uint32_t& word)",
        "void dprint_tensix_pack_counters_pack_per_xy_plane(const ckernel::packer::pack_counters_t& counters)",
        "void dprint_tensix_pack_config_in_data_format(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_edge_offset_tile_row_set_select_pack3(const ckernel::packer::pck_edge_offset_t& edge)",
        "void dprint_tensix_pack_strides_y_stride(const uint32_t& word)",
        "void dprint_tensix_pack_config_pack_dis_y_pos_start_offset(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_enable_out_fifo(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_l1_acc_disable_pack_zero_flag(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_read_mode(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_row_ptr_section_size(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_dest_rd_ctrl_pck_dest_rd_ctrl_reserved(const ckernel::packer::dest_rd_ctrl_t& dest)",
        "void dprint_tensix_pack_edge_offset_reserved(const ckernel::packer::pck_edge_offset_t& edge)",
        "void dprint_tensix_pack_config_all_pack_disable_zero_compress_ovrd(\n    const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_relu_config_stacc_relu_relu_threshold(const ckernel::packer::relu_config_t& config)",
        "void dprint_tensix_pack_edge_offset_mode(const ckernel::packer::pck_edge_offset_t& edge)",
        "void dprint_tensix_pack_strides_helper(uint reg_id, const volatile uint tt_reg_ptr* cfg)",
        "void dprint_tensix_pack_edge_offset_tile_row_set_select_pack1(const ckernel::packer::pck_edge_offset_t& edge)",
        "void dprint_tensix_pack_config_reserved_1(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_config_pack_per_xy_plane(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_edge_offset_tile_row_set_select_pack2(const ckernel::packer::pck_edge_offset_t& edge)",
        "void dprint_tensix_pack_config_helper(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_strides_x_stride(const uint32_t& word)",
        "void dprint_tensix_dest_rd_ctrl()",
        "void dprint_tensix_pack_config_l1_src_addr(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_edge_offset(uint reg_id = 0)",
        "void dprint_tensix_pack_counters(uint reg_id = 0)",
        "void dprint_tensix_pack_relu_config_disable_risc_bp_disable_trisc(const ckernel::packer::relu_config_t& config)",
        "void dprint_tensix_pack_relu_config_stacc_relu_apply_relu(const ckernel::packer::relu_config_t& config)",
        "void dprint_tensix_pack_relu_config_disable_risc_bp_disable_bmp_clear_ncrisc(\n    const ckernel::packer::relu_config_t& config)",
        "void dprint_tensix_pack_edge_offset_tile_row_set_select_pack0(const ckernel::packer::pck_edge_offset_t& edge)",
        "void dprint_tensix_pack_strides_w_stride(const uint32_t& word)",
        "void dprint_tensix_pack_counters_pack_yz_transposed(const ckernel::packer::pack_counters_t& counters)",
        "void dprint_tensix_pack_config_pack_start_intf_pos(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_relu_config_disable_risc_bp_disable_bmp_clear_main(\n    const ckernel::packer::relu_config_t& config)",
        "void dprint_tensix_pack_config_auto_set_last_pacr_intf_sel(const ckernel::packer::pack_config_t& config)",
        "void dprint_tensix_pack_counters_pack_xys_per_til(const ckernel::packer::pack_counters_t& counters)",
        "void dprint_tensix_pack_dest_rd_ctrl_pck_dest_rd_ctrl_read_32b_data(\n    const ckernel::packer::dest_rd_ctrl_t& dest)",
        "PACK(\n        // Get pointer to registers for current state ID\n        volatile uint tt_reg_ptr* cfg = get_cfg_pointer();\n\n        if (reg_id >= 1 && reg_id <= 2)",
        "void dprint_tensix_pack_config_reserved_0(const ckernel::packer::pack_config_t& config)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/dprint_tensix_unpack.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void dprint_tensix_unpack_config_unpack_if_sel_cntx4_7(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_tile_descriptor(uint reg_id = 0)",
        "void dprint_tensix_unpack_tile_descriptor_reserved_0(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_unpack_config_reserved_3(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_alu_config_alu_format_spec_reg1_srcb(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_unpack_config_upsample_and_interlave(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_tile_descriptor_reserved_1(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_alu_config_alu_rounding_mode_packer_srnd_en(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_unpack_config_uncompress_cntx0_3(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_tileize_mode(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_tile_descriptor_w_dim(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_unpack_tile_descriptor_x_dim(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_unpack_config_unpack_src_reg_set_update(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_out_data_format(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_reserved_4(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_unpack_if_sel_cntx0_3(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_alu_config_alu_acc_ctrl_fp32_enabled(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_unpack_config_haloize_mode(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_alu_config_alu_rounding_mode_fpu_srnd_en(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_unpack_config_context_count(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_fifo_size(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_throttle_mode(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_uncompress_cntx4_7(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_alu_config_alu_rounding_mode_gasket_srnd_en(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_unpack_config_reserved_1(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_shift_amount(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config(uint reg_id = 0)",
        "void dprint_tensix_alu_config_alu_format_spec_reg0_srcbunsigned(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_alu_config_alu_acc_ctrl_sfpu_fp32_enabled(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_alu_config_alu_format_spec_reg0_srcaunsigned(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_alu_config_alu_rounding_mode_gs_lf(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_unpack_config_helper(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_tile_descriptor_z_dim(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_unpack_tile_descriptor_helper(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_alu_config_alu_format_spec_reg2_dstacc(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_alu_config_alu_format_spec_reg0_srca(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_unpack_tile_descriptor_digest_type(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_unpack_config_reserved_2(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_unpack_if_sel(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_upsample_rate(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_alu_config_alu_rounding_mode_padding(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_unpack_tile_descriptor_blobs_per_xy_plane(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_unpack_tile_descriptor_y_dim(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_unpack_tile_descriptor_uncompressed(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_unpack_tile_descriptor_digest_size(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_alu_config_alu_rounding_mode_bfp8_hf(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_unpack_config_force_shared_exp(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_unpack_config_reserved_5(const ckernel::unpacker::unpack_config_t& config)",
        "void dprint_tensix_alu_config_alu_acc_ctrl_int8_math_enabled(const ckernel::unpacker::alu_config_t& config)",
        "void dprint_tensix_unpack_tile_descriptor_blobs_y_start(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_alu_config()",
        "void dprint_tensix_unpack_tile_descriptor_in_data_format(\n    const ckernel::unpacker::unpack_tile_descriptor_t& tile_descriptor)",
        "void dprint_tensix_unpack_config_limit_addr(const ckernel::unpacker::unpack_config_t& config)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/dprint_test_common.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void print_test_data()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/dprint_tile.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "TileSlice(\n        uint8_t cb,\n        int tile_idx,\n        const SliceRange& slice_range,\n    // For NCRISC and BRISC, CBs could be inputs or outputs, need user to specify so that we know what the DataFormat\n    // is. This isn't a problem for PACK/UNPACK because they always treat CBs as input/output. Additionally, NCRISC and\n    // BRISC have access to both rd and wr ptr, let user choose w/ arg.\n#if defined(COMPILE_FOR_NCRISC)",
        "for(uint32_t h = slice_range.h0",
        "uint8_t get_datum(DataFormat data_format, volatile tt_l1_ptr uint8_t* data, uint32_t idx)"
      ],
      "namespaces": [],
      "structs": [
        "tile_info_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/noc_logging.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void log_noc_xfer(uint32_t len)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/pause.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void watcher_pause()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/ring_buffer.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void push_to_ring_buffer(uint32_t val)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/sanitize_noc.h": {
      "classes": [],
      "constants": [
        "mem_mailbox_end"
      ],
      "enums": [],
      "functions": [
        "bool debug_valid_reg_addr(uint64_t addr, uint64_t len)",
        "void debug_sanitize_post_noc_addr_and_hang(\n    uint8_t noc_id,\n    uint64_t noc_addr,\n    uint32_t l1_addr,\n    uint32_t len,\n    debug_sanitize_noc_cast_t multicast,\n    debug_sanitize_noc_dir_t dir,\n    debug_sanitize_noc_which_core_t which_core,\n    uint16_t return_code)",
        "void debug_insert_delay(uint8_t transaction_type)",
        "uint16_t debug_valid_eth_addr(uint64_t addr, uint64_t len, bool write)",
        "void debug_throw_on_dram_addr(uint8_t noc_id, uint64_t addr, uint32_t len)",
        "uint16_t debug_valid_worker_addr(uint64_t addr, uint64_t len, bool write)",
        "uint16_t debug_valid_dram_addr(uint64_t addr, uint64_t len)",
        "uint16_t debug_valid_pcie_addr(uint64_t addr, uint64_t len)",
        "AddressableCoreType get_core_type(uint8_t noc_id, uint8_t x, uint8_t y, bool& is_virtual_coord)",
        "void debug_sanitize_noc_and_worker_addr(\n    uint8_t noc_id,\n    uint64_t noc_addr,\n    uint32_t worker_addr,\n    uint32_t len,\n    debug_sanitize_noc_cast_t multicast,\n    debug_sanitize_noc_dir_t dir)",
        "uint32_t debug_sanitize_noc_addr(\n    uint8_t noc_id,\n    uint64_t noc_addr,\n    uint32_t l1_addr,\n    uint32_t noc_len,\n    debug_sanitize_noc_cast_t multicast,\n    debug_sanitize_noc_dir_t dir)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/stack_usage.h": {
      "classes": [],
      "constants": [
        "stack_usage_pattern"
      ],
      "enums": [],
      "functions": [
        "void mark_stack_usage()",
        "int measure_stack_usage()",
        "void record_stack_usage(uint32_t)",
        "void record_stack_usage(uint32_t stack_free)",
        "uint32_t measure_stack_usage()",
        "uint32_t get_dispatch_class()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/watcher_common.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void clear_previous_launch_message_entry_for_watcher()",
        "void risc_context_switch()",
        "void disable_erisc_app()",
        "uint32_t debug_get_which_riscv()"
      ],
      "namespaces": [
        "internal_"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/debug/waypoint.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint32_t fold(const char (&s)[N], std::index_sequence<Is...>)",
        "void write_debug_waypoint(volatile tt_l1_ptr uint32_t* debug_waypoint)",
        "uint32_t helper(const char (&s)[N])"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "uint32_t fold(const char (&s)[N], std::index_sequence<Is...>)",
        "void write_debug_waypoint(volatile tt_l1_ptr uint32_t* debug_waypoint)",
        "uint32_t helper(const char (&s)[N])"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/dev_msgs.h": {
      "classes": [],
      "constants": [
        "RUN_MSG_RESET_READ_PTR_FROM_HOST",
        "RUN_SYNC_MSG_INIT",
        "TT_ARCH_MAX_NOC_WRITE_ALIGNMENT",
        "NUM_PROGRAMMABLE_CORE_TYPES",
        "launch_msg_buffer_num_entries",
        "RUN_MSG_DONE",
        "num_waypoint_bytes_per_riscv",
        "RUN_MSG_INIT",
        "RUN_SYNC_MSG_DONE",
        "RUN_SYNC_MSG_ALL_GO",
        "RUN_MSG_RESET_READ_PTR",
        "PROFILER_RISC_COUNT",
        "RUN_MSG_GO",
        "PROFILER_NOC_ALIGNMENT_PAD_COUNT",
        "RUN_SYNC_MSG_GO",
        "RUN_SYNC_MSG_LOAD",
        "NUM_PROCESSORS_PER_CORE_TYPE",
        "RUN_SYNC_MSG_INIT_SYNC_REGISTERS",
        "RUN_SYNC_MSG_WAITING_FOR_RESET",
        "RUN_SYNC_MSG_ALL_SUBORDINATES_DONE"
      ],
      "enums": [
        "watcher_enable_msg_t",
        "debug_transaction_type_t",
        "dispatch_mode",
        "debug_sanitize_noc_return_code_enum",
        "riscv_id_t",
        "SyncCBConfigRegion",
        "noc_index",
        "dispatch_enable_flags",
        "debug_assert_type_t",
        "dispatch_core_processor_masks",
        "dispatch_core_processor_classes",
        "AddressableCoreType",
        "noc_mode"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [
        "go_msg_t",
        "debug_waypoint_msg_t",
        "rta_offset_t",
        "mailboxes_t",
        "debug_pause_msg_t",
        "kernel_config_msg_t",
        "usage_t",
        "debug_stack_usage_t",
        "watcher_msg_t",
        "eth_word_t",
        "dprint_buf_msg_t",
        "launch_msg_t",
        "subordinate_sync_msg_t",
        "debug_assert_msg_t",
        "debug_sanitize_noc_addr_msg_t",
        "ncrisc_halt_msg_t",
        "profiler_msg_t",
        "core_info_msg_t",
        "debug_ring_buf_msg_t",
        "routing_info_t",
        "addressable_core_t",
        "debug_insert_delays_msg_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/ethernet/dataflow_api.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "FORCE_INLINE eth_send_bytes_over_channel_payload_only_unsafe(\n    uint32_t src_addr,\n    uint32_t dst_addr,\n    uint32_t num_bytes,\n    uint32_t num_bytes_per_send = 16,\n    uint32_t num_bytes_per_send_word_size = 1)",
        "FORCE_INLINE eth_send_bytes_over_channel(\n    uint32_t src_addr,\n    uint32_t dst_addr,\n    uint32_t num_bytes,\n    uint32_t channel,\n    uint32_t num_bytes_per_send = 16,\n    uint32_t num_bytes_per_send_word_size = 1)",
        "FORCE_INLINE eth_receiver_channel_ack(uint32_t channel, uint32_t eth_transaction_ack_word_addr)",
        "FORCE_INLINE eth_send_bytes(\n    uint32_t src_addr,\n    uint32_t dst_addr,\n    uint32_t num_bytes,\n    uint32_t num_bytes_per_send = 16,\n    uint32_t num_bytes_per_send_word_size = 1)",
        "FORCE_INLINE eth_send_payload_complete_signal_over_channel(uint32_t channel, uint32_t num_bytes)",
        "FORCE_INLINE eth_noc_semaphore_wait(volatile tt_l1_ptr uint32_t* sem_addr, uint32_t val, uint32_t wait_min = 0)",
        "FORCE_INLINE eth_is_receiver_channel_send_done(uint32_t channel)",
        "FORCE_INLINE eth_clear_sender_channel_ack(uint32_t channel)",
        "FORCE_INLINE eth_write_remote_reg(uint32_t reg_addr, uint32_t value)",
        "FORCE_INLINE eth_wait_for_receiver_done(uint32_t wait_min = 0)",
        "FORCE_INLINE eth_receiver_done()",
        "FORCE_INLINE eth_noc_async_write_barrier()",
        "FORCE_INLINE wait_for_eth_txq_cmd_space(uint32_t wait_min = 0)",
        "FORCE_INLINE eth_send_bytes_over_channel_payload_only_unsafe_one_packet(\n    uint32_t src_addr, uint32_t dst_addr, uint32_t num_bytes)",
        "FORCE_INLINE eth_receiver_channel_done(uint32_t channel)",
        "FORCE_INLINE eth_wait_receiver_acknowledge(uint8_t channel = 0)",
        "FORCE_INLINE eth_send_bytes_over_channel_payload_only(\n    uint32_t src_addr,\n    uint32_t dst_addr,\n    uint32_t num_bytes,\n    uint32_t num_bytes_per_send = 16,\n    uint32_t num_bytes_per_send_word_size = 1)",
        "FORCE_INLINE eth_is_receiver_channel_send_acked(uint32_t channel)",
        "FORCE_INLINE eth_wait_for_bytes_on_channel(uint32_t num_bytes, uint8_t channel, uint32_t wait_min = 1000000)",
        "FORCE_INLINE eth_wait_receiver_done(uint32_t wait_min = 0)",
        "FORCE_INLINE eth_txq_is_busy()",
        "FORCE_INLINE eth_wait_for_bytes(uint32_t num_bytes, uint32_t wait_min = 0)",
        "FORCE_INLINE eth_receiver_acknowledge(uint8_t channel = 0)",
        "FORCE_INLINE eth_noc_semaphore_wait_min(volatile tt_l1_ptr uint32_t* sem_addr, uint32_t val, uint32_t wait_min = 0)",
        "FORCE_INLINE send_eth_receiver_channel_done(volatile eth_channel_sync_t* channel_sync)",
        "FORCE_INLINE eth_bytes_are_available_on_channel(uint8_t channel)",
        "FORCE_INLINE eth_noc_async_read_barrier()",
        "FORCE_INLINE eth_wait_for_bytes_on_channel_sync_addr(\n    uint32_t num_bytes, volatile eth_channel_sync_t* eth_channel_syncs, uint32_t wait_min = 1000000)",
        "FORCE_INLINE eth_wait_for_receiver_channel_done(uint32_t channel)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/ethernet/erisc.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void risc_context_switch_without_noc_sync()",
        "void risc_context_switch()",
        "void disable_erisc_app()"
      ],
      "namespaces": [
        "internal_"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/ethernet/tt_eth_api.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint32_t eth_txq_reg_read(uint32_t qnum, uint32_t offset)",
        "void eth_txq_reg_write(uint32_t qnum, uint32_t offset, uint32_t val)",
        "void eth_risc_reg_write(uint32_t offset, uint32_t val)",
        "void eth_wait_cycles(uint32_t wait_cycles)",
        "uint32_t eth_risc_reg_read(uint32_t offset)",
        "uint64_t eth_read_wall_clock()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/ethernet/tunneling.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "FORCE_INLINE eth_write_remote_reg(uint32_t q_num, uint32_t reg_addr, uint32_t val)",
        "FORCE_INLINE eth_write_remote_reg_no_txq_check(uint32_t q_num, uint32_t reg_addr, uint32_t val)",
        "FORCE_INLINE run_routing()",
        "FORCE_INLINE run_routing_without_noc_sync()",
        "void RISC_POST_STATUS(uint32_t status)",
        "void check_and_context_switch()",
        "FORCE_INLINE eth_send_packet_byte_addr(uint32_t q_num, uint32_t src_addr, uint32_t dest_addr, uint32_t num_words)",
        "FORCE_INLINE eth_send_packet(uint32_t q_num, uint32_t src_word_addr, uint32_t dest_word_addr, uint32_t num_words)",
        "FORCE_INLINE notify_dispatch_core_done(uint64_t dispatch_addr)",
        "FORCE_INLINE eth_send_packet_bytes_unsafe(uint32_t q_num, uint32_t src_addr, uint32_t dest_addr, uint32_t num_bytes)",
        "FORCE_INLINE eth_send_packet_unsafe(uint32_t q_num, uint32_t src_word_addr, uint32_t dest_word_addr, uint32_t num_words)",
        "FORCE_INLINE eth_txq_is_busy(uint32_t q_num)"
      ],
      "namespaces": [
        "internal_"
      ],
      "structs": [
        "erisc_info_t",
        "eth_channel_sync_t"
      ],
      "template_functions": [
        "FORCE_INLINE eth_write_remote_reg(uint32_t q_num, uint32_t reg_addr, uint32_t val)",
        "FORCE_INLINE eth_send_packet(uint32_t q_num, uint32_t src_word_addr, uint32_t dest_word_addr, uint32_t num_words)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/firmware_common.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "FORCE_INLINE firmware_config_init(\n    tt_l1_ptr mailboxes_t* const mailboxes, uint32_t core_type_index, uint32_t dispatch_class)",
        "FORCE_INLINE calculate_dispatch_addr(volatile go_msg_t* go_message_in)",
        "FORCE_INLINE wait_for_go_message()",
        "void noc_bank_table_init(uint64_t mem_bank_to_noc_addr)",
        "FORCE_INLINE is_message_go()",
        "FORCE_INLINE notify_dispatch_core_done(uint64_t dispatch_addr, uint8_t noc_index)",
        "void do_crt1(uint32_t tt_l1_ptr* data_image)",
        "void configure_gathering()",
        "void disable_relaxed_memory_ordering()",
        "void configure_csr()",
        "void configure_l1_data_cache()",
        "void l1_to_local_mem_copy(uint32_t* dst, uint32_t tt_l1_ptr* src, int32_t len)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/mod_div_lib.h": {
      "classes": [],
      "constants": [
        "n_uword_bits"
      ],
      "enums": [],
      "functions": [
        "unsigned int mulsi3(unsigned int a, unsigned int b)",
        "uint32_t fast_udiv_12(uint32_t n)",
        "uint32_t fast_udiv_63(uint32_t n)",
        "uint32_t udivsi3_const_divisor(uint32_t n)",
        "uint32_t fast_udiv_140(uint32_t n)",
        "uint32_t fast_udiv_110(uint32_t n)",
        "uint32_t fast_udiv_120(uint32_t n)",
        "uint32_t fast_udiv_124(uint32_t n)",
        "uint32_t fast_udiv_94(uint32_t n)",
        "uint32_t fast_udiv_56(uint32_t n)",
        "uint32_t fast_udiv_80(uint32_t n)",
        "uint32_t umodsi3_const_divisor(uint32_t a)",
        "uint32_t fast_udiv_70(uint32_t n)",
        "uint32_t fast_udiv_7(uint32_t n)",
        "uint32_t fast_udiv_130(uint32_t n)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "uint32_t umodsi3_const_divisor(uint32_t a)",
        "uint32_t udivsi3_const_divisor(uint32_t n)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/remote_circular_buffer_api.h": {
      "classes": [],
      "constants": [
        "default_noc_mode",
        "default_cmd_buf",
        "non_posted",
        "posted"
      ],
      "enums": [],
      "functions": [
        "FORCE_INLINE resize_remote_receiver_cb_interface(\n    uint32_t cb_id,\n    uint32_t page_size,\n    uint8_t noc,\n    uint8_t nm = detail::default_noc_mode,\n    bool posted = true,\n    uint8_t cmd_buf = detail::default_cmd_buf)",
        "FORCE_INLINE update_remote_cb_config_in_l1(uint32_t remote_cb_index)",
        "FORCE_INLINE update_pages_sent(\n    const RemoteSenderCBInterface& sender_cb_interface,\n    uint32_t aligned_page_adjustment,\n    uint8_t noc,\n    bool posted,\n    uint8_t cmd_buf)",
        "FORCE_INLINE align_local_cbs_to_remote_cb(\n    uint32_t remote_cb_index, const uint32_t (&local_cb_indices)[num_local_cbs])",
        "FORCE_INLINE update_pages_acked(\n    const RemoteReceiverCBInterface& receiver_cb_interface,\n    uint32_t aligned_page_adjustment,\n    uint8_t noc,\n    bool posted,\n    uint8_t cmd_buf)",
        "FORCE_INLINE remote_cb_wait_front(uint32_t cb_id, uint32_t num_pages)",
        "FORCE_INLINE remote_cb_pop_front(uint32_t cb_id, uint32_t num_pages, uint8_t noc = noc_index)",
        "FORCE_INLINE remote_cb_sender_barrier(uint32_t cb_id)",
        "FORCE_INLINE remote_cb_push_back_and_write_pages(\n    uint32_t cb_id,\n    uint32_t local_cb_addr,\n    uint32_t num_pages,\n    uint32_t num_rows,\n    uint32_t coalesced_num_pages_per_row,\n    uint32_t coalesced_page_size,\n    uint8_t noc = noc_index)",
        "FORCE_INLINE resize_remote_sender_cb_interface(\n    uint32_t cb_id,\n    uint32_t page_size,\n    uint8_t noc,\n    uint8_t nm = detail::default_noc_mode,\n    bool posted = true,\n    uint8_t cmd_buf = detail::default_cmd_buf)",
        "FORCE_INLINE remote_cb_reserve_back(uint32_t cb_id, uint32_t num_pages)"
      ],
      "namespaces": [
        "detail",
        "experimental"
      ],
      "structs": [],
      "template_functions": [
        "FORCE_INLINE resize_remote_receiver_cb_interface(\n    uint32_t cb_id,\n    uint32_t page_size,\n    uint8_t noc,\n    uint8_t nm = detail::default_noc_mode,\n    bool posted = true,\n    uint8_t cmd_buf = detail::default_cmd_buf)",
        "FORCE_INLINE update_pages_sent(\n    const RemoteSenderCBInterface& sender_cb_interface,\n    uint32_t aligned_page_adjustment,\n    uint8_t noc,\n    bool posted,\n    uint8_t cmd_buf)",
        "FORCE_INLINE align_local_cbs_to_remote_cb(\n    uint32_t remote_cb_index, const uint32_t (&local_cb_indices)[num_local_cbs])",
        "FORCE_INLINE update_pages_acked(\n    const RemoteReceiverCBInterface& receiver_cb_interface,\n    uint32_t aligned_page_adjustment,\n    uint8_t noc,\n    bool posted,\n    uint8_t cmd_buf)",
        "FORCE_INLINE resize_remote_sender_cb_interface(\n    uint32_t cb_id,\n    uint32_t page_size,\n    uint8_t noc,\n    uint8_t nm = detail::default_noc_mode,\n    bool posted = true,\n    uint8_t cmd_buf = detail::default_cmd_buf)",
        "FORCE_INLINE remote_cb_push_back_and_write_pages(\n    uint32_t cb_id,\n    uint32_t local_cb_addr,\n    uint32_t num_pages,\n    uint32_t num_rows,\n    uint32_t coalesced_num_pages_per_row,\n    uint32_t coalesced_page_size,\n    uint8_t noc = noc_index)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/risc_attribs.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint64_t tt_l1_load(tt_uint64_t tt_l1_ptr* p)",
        "uint64_t tt_l1_load(volatile tt_uint64_t* tt_l1_ptr p)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/risc_common.h": {
      "classes": [],
      "constants": [
        "MAX_TILES_PER_PHASE"
      ],
      "enums": [],
      "functions": [
        "uint32_t dram_io_incr_ptr(uint32_t curr_ptr, uint32_t incr, uint32_t buf_size_q_slots)",
        "uint32_t buf_ptr_inc_wrap(uint32_t buf_ptr, uint32_t inc, uint32_t buf_size)",
        "void risc_init()",
        "void invalidate_l1_cache()",
        "uint32_t dram_io_empty(uint32_t rd_ptr, uint32_t wr_ptr)",
        "void deassert_all_reset()",
        "void assert_just_ncrisc_reset()",
        "void flush_erisc_icache()",
        "void assert_trisc_reset()",
        "void WRITE_REG(uint32_t addr, uint32_t val)",
        "uint32_t dram_io_full(uint32_t rd_ptr, uint32_t wr_ptr, uint32_t buf_size_q_slots)",
        "uint32_t special_mult(uint32_t a, uint32_t special_b)",
        "void deassert_trisc_reset()",
        "void riscv_wait(uint32_t cycles)",
        "uint32_t buf_ptr_dec_wrap(uint32_t buf_ptr, uint32_t dec, uint32_t buf_size)",
        "uint32_t dram_io_local_empty(uint32_t local_rd_ptr, uint32_t rd_ptr, uint32_t wr_ptr)",
        "uint32_t reg_read(uint32_t addr)",
        "uint32_t READ_REG(uint32_t addr)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/socket.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [
        "SocketReceiverInterface",
        "SocketSenderInterface",
        "sender_socket_md",
        "receiver_socket_md"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/socket_api.h": {
      "classes": [],
      "constants": [
        "always_false"
      ],
      "enums": [],
      "functions": [
        "void fabric_socket_notify_receiver(\n    const SocketSenderInterface& socket,\n    tt::tt_fabric::WorkerToFabricEdmSender& fabric_connection,\n    volatile tt_l1_ptr PACKET_HEADER_TYPE* fabric_header_addr)",
        "SocketReceiverInterface create_receiver_socket_interface(uint32_t config_addr)",
        "void fabric_set_unicast_route(volatile tt_l1_ptr PACKET_HEADER_TYPE* fabric_header_addr, const SocketT& socket)",
        "void socket_notify_receiver(const SocketSenderInterface& socket)",
        "void set_sender_socket_page_size(SocketSenderInterface& socket, uint32_t page_size)",
        "void fabric_socket_notify_sender(\n    const SocketReceiverInterface& socket,\n    tt::tt_fabric::WorkerToFabricEdmSender& fabric_connection,\n    volatile tt_l1_ptr PACKET_HEADER_TYPE* fabric_header_addr)",
        "void set_receiver_socket_page_size(SocketReceiverInterface& socket, uint32_t page_size)",
        "void assign_local_cb_to_socket(const SocketReceiverInterface& socket, uint32_t cb_id)",
        "void update_socket_config(const SocketReceiverInterface& socket)",
        "void socket_notify_sender(const SocketReceiverInterface& socket)",
        "void socket_pop_pages(SocketReceiverInterface& socket, uint32_t num_pages)",
        "SocketSenderInterface create_sender_socket_interface(uint32_t config_addr)",
        "void update_socket_config(const SocketSenderInterface& socket)",
        "void socket_reserve_pages(const SocketSenderInterface& socket, uint32_t num_pages)",
        "void socket_push_pages(SocketSenderInterface& socket, uint32_t num_pages)",
        "void socket_barrier(const SocketSenderInterface& socket)",
        "void socket_wait_for_pages(const SocketReceiverInterface& socket, uint32_t num_pages)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "void fabric_set_unicast_route(volatile tt_l1_ptr PACKET_HEADER_TYPE* fabric_header_addr, const SocketT& socket)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/tensix_functions.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void breakpoint_set_condition_op(uint thread, uint bkpt_index, uint opcode, uint opcode_mask = 0xFF)",
        "void ex_sem_init(uint semaphore, uint max_value, uint init_value, vptr_uint instrn_buffer)",
        "void thcon_write_32b_reg(uint addr /*32b quants*/, uint val)",
        "void memory_write(uint addr, uint value)",
        "void thcon_cas(\n    vptr_uint instrn_buffer,\n    uint8_t address_register_index,\n    uint8_t data_register_index,\n    uint8_t word_select,\n    uint8_t compare_value,\n    uint8_t swap_value,\n    bool mem_heirarchy_select)",
        "void ex_zerosrc(uint src, vptr_uint instrn_buf)",
        "void ex_flush(vptr_uint instrn_buf)",
        "void ex_rmw_cfg(uint cfg_addr32, uint cfg_shamt, uint32_t cfg_mask, uint wr_val, vptr_uint cfg_regs)",
        "void ex_nop(vptr_uint instrn_buf)",
        "void thcon_sigwrite_16b_reg(vptr_uint instrn_buffer, uint addr /* 16b quants */, uint sig_addr)",
        "void ex_sync_kernel(vptr_mailbox mailbox)",
        "void dbg_dump_array_disable()",
        "void ex_encc(vptr_uint instrn_buf)",
        "void dbg_dump_array_to_l1(uint thread, uint addr)",
        "void ex_rmw_cfg_gpr(\n    uint cfg_addr32, uint cfg_shamt, uint32_t cfg_mask, uint gpr_index, vptr_uint regfile, vptr_uint cfg_regs)",
        "void thcon_flush_dma(vptr_uint instrn_buffer, uint arg)",
        "void breakpoint_set_condition_other_thread(uint thread, uint bkpt_index)",
        "void ex_instrn_rdcfg(uint gpr, uint cfg_addr, vptr_uint instrn_buf)",
        "void breakpoint_set(uint thread, uint bkpt_index, bool pc_valid, uint pc = 0)",
        "void ex_instrn_wrcfg(uint gpr, uint cfg_addr, vptr_uint instrn_buf)",
        "void breakpoint_clear_condition_op(uint thread, uint bkpt_index)",
        "void thcon_write_tile_addr(vptr_uint instrn_buf, uint reg_index, uint unpacker_id)",
        "void ex_stallwait(uint wait_res, uint stall_res, vptr_uint instrn_buf)",
        "void thcon_set_descriptor(vptr_uint instrn_buf, uint reg_index, uint unpacker_id)",
        "void clobber_all_memory(void)",
        "void breakpoint_clear_condition_loop(uint thread, uint bkpt_index)",
        "void thcon_set_unpacker_misc_conf(vptr_uint instrn_buf, uint out_data_format, uint unpacker_id)",
        "void ex_setpkedgof(uint edge_mask, vptr_uint instrn_buf)",
        "void ex_push_insn(vptr_uint instrn_buffer, uint instrn)",
        "void dbg_instrn_buf_push_instrn(uint instrn)",
        "void thcon_load_ind(\n    vptr_uint instrn_buffer, uint base_addr_index, uint dst_data_index, uint offset_index, uint autoinc, uint size)",
        "void ex_mova2d(uint addr_mode, uint srca_transp, uint dest_index, uint srca_index, vptr_uint instrn_buf)",
        "void breakpoint_resume_execution(uint thread)",
        "uint memory_read(uint addr)",
        "void dbg_instrn_buf_set_override_en()",
        "void breakpoint_clear(uint thread, uint bkpt_index)",
        "void ex_setadczw(cnt_id_t cntset_ind, uint srcb_w, uint srcb_z, uint srca_w, uint srca_z, vptr_uint instrn_buf)",
        "void thcon_set_packer_misc_conf(\n    vptr_uint instrn_buf, uint disable_zcomp, uint in_data_format, uint out_data_format, uint dest_digest_offset)",
        "void thcon_reg_to_flops(\n    vptr_uint instrn_buffer,\n    uint mode_32b_16B,\n    uint reg_index,\n    uint flop_index,\n    uint target_select = 0,\n    uint byte_offset = 0)",
        "void breakpoint_clear_condition_other_thread(uint thread, uint bkpt_index)",
        "void ex_clear_dvalid(uint clear_ab, uint reset, vptr_uint instrn_buffer)",
        "void thcon_store_ind(\n    vptr_uint instrn_buffer,\n    uint base_index,\n    uint src_data_index,\n    uint offset_index,\n    uint autoinc,\n    uint mode_32b_16B,\n    bool l0_l1_sel,\n    uint tile_mode)",
        "uint breakpoint_status()",
        "void wzeromem(uint32_t start, uint32_t len)",
        "void execute_instruction(vptr_uint instrn_buffer, unsigned int instruction)",
        "void execute_kernel_sync(vptr_pc_buf pc_buf, vptr_mailbox mailbox)",
        "void ex_push_insn(vptr_uint instrn_buffer, uint instrn1, uint instrn2)",
        "void thcon_set_packer_section_conf(vptr_uint instrn_buf, uint rowstart_size, uint exp_size)",
        "void ex_xsearch(uint block_sel, vptr_uint instrn_buf)",
        "void thcon_write_16b_reg(\n    vptr_uint instrn_buffer, uint addr /* 16b quants */, uint val, bool set_signals_mode = false)",
        "void ex_setc16(uint addr, uint val, vptr_uint instrn_buf)",
        "void dbg_instrn_buf_wait_for_ready()",
        "void thcon_write_16B_reg(uint addr, const uint* val)",
        "void thcon_write_descriptor_to_reg(\n    uint reg_index,\n    uint tile_id,\n    uint tile_type,\n    uint x_dim,\n    uint y_dim,\n    uint z_dim,\n    uint w_dim,\n    uint digest_type,\n    uint digest_size)",
        "void dbg_dump_array_enable()",
        "void thcon_incr_get_ptr_noinc(\n    vptr_uint instrn_buffer,\n    uint mem_addr_index,\n    uint data_reg_index,\n    uint incr_val,\n    uint wrap_val,\n    bool rd_wr,\n    bool l0_l1_sel)",
        "void execute_kernel_loop(uint kernel_count, uint loop_count, vptr_pc_buf pc_buf)",
        "void ex_pacr(uint addr_mode, uint zero_write, uint flush, uint last, vptr_uint instrn_buf)",
        "void wzerorange(uint32_t* start, uint32_t* end)",
        "void ex_upacr(uint block_sel, uint addr_mode, uint zero_write, uint last, vptr_uint instrn_buf)",
        "uint breakpoint_status(uint thread, uint bkpt_index)",
        "void thcon_write_descriptor_to_l1(\n    uint addr,\n    uint tile_id,\n    uint tile_type,\n    uint x_dim,\n    uint y_dim,\n    uint z_dim,\n    uint w_dim,\n    uint digest_type,\n    uint digest_size)",
        "void ex_setadc(cnt_id_t cnt_ind, uint chan_ind, uint dim_ind, uint val, vptr_uint instrn_buf)",
        "void thcon_incr_get_ptr(\n    vptr_uint instrn_buffer,\n    uint mem_addr_index,\n    uint data_reg_index,\n    uint incr_val,\n    uint wrap_val,\n    bool rd_wr,\n    bool l0_l1_sel)",
        "void breakpoint_set_condition_loop(uint thread, uint bkpt_index, uint loop)",
        "uint breakpoint_data()",
        "void ex_zeroacc(vptr_uint instrn_buf, uint clear_mode = 3, uint dest_register = 0, uint addressing_mode = 0)",
        "void ex_setadcxy(cnt_id_t cntset_ind, uint srcb_y, uint srcb_x, uint srca_y, uint srca_x, vptr_uint instrn_buf)",
        "void dbg_instrn_buf_clear_override_en()",
        "tile_descriptor_u thcon_build_descriptor(\n    uint tile_id, uint tile_type, uint x_dim, uint y_dim, uint z_dim, uint w_dim, uint digest_type, uint digest_size)",
        "void unhalt_tensix()",
        "uint32_t rmw_cfg_value(uint cfg_shamt, uint32_t cfg_mask, uint32_t wrdata, uint32_t l_cfg_data)",
        "void thcon_at_swap(\n    vptr_uint instrn_buffer, uint mem_addr_index, uint src_data_index, uint mask_16b, bool l0_l1_sel)",
        "void dbg_dump_array_rd_cmd(uint thread, uint array_id, uint addr)",
        "void breakpoint_set_data(uint thread, uint bkpt_index, uint data_index)",
        "void thcon_set_packer_l1_dest_addr(vptr_uint instrn_buf, uint l1_dest_addr)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/utils/bfloat16.h": {
      "classes": [],
      "constants": [
        "NEG_INF_BFLOAT16",
        "NAN_BFLOAT16",
        "POS_INF_BFLOAT16"
      ],
      "enums": [],
      "functions": [
        "bool bfloat16_greater(uint16_t bf16_a, uint16_t bf16_b)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/utils/utils.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint32_t align(uint32_t addr, uint32_t alignment)",
        "bool is_power_of_2(uint32_t n)",
        "uint32_t align_power_of_2(uint32_t addr, uint32_t alignment)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/c_tensix_core.h": {
      "classes": [
        "c_tensix_core"
      ],
      "constants": [
        "is_emulated"
      ],
      "enums": [],
      "functions": [
        "T l1_cast(uint32_t l1_offset)",
        "std::uint32_t l1_cast(T* l1_pointer)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "T l1_cast(uint32_t l1_offset)",
        "std::uint32_t l1_cast(T* l1_pointer)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/cmd_params.h": {
      "classes": [],
      "constants": [
        "MAX_NUM_PACKS",
        "size"
      ],
      "enums": [],
      "functions": [
        "std::uint32_t unpack_fifo_address(std::uint32_t fifo_address)",
        "std::uint16_t pack_address(std::uint32_t address)",
        "std::uint32_t pack_32b_field(std::uint32_t x, unsigned int bits, unsigned int to_shift)",
        "std::uint32_t unpack_field(std::uint32_t x, unsigned int bits, unsigned int to_shift)",
        "std::uint32_t unpack_address(std::uint32_t address)"
      ],
      "namespaces": [],
      "structs": [
        "StreamFullConnParams",
        "UnaryOperationParams",
        "SfpuParams",
        "StreamBinaryParams",
        "BinaryOperationParams_added",
        "TernaryOperationWithBiasParams_added",
        "SliceZParams_added",
        "BinaryOperationParams",
        "StreamUnaryBinaryCommonParams",
        "StreamConvParams",
        "PackParams",
        "StreamPoolParams",
        "StreamUnaryParams",
        "TernaryOperationParams_added",
        "PackOperation",
        "QuinaryOperationParams_added"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/core_config.h": {
      "classes": [],
      "constants": [
        "noc_size_x",
        "tensix_harvest_axis",
        "MaxProcessorsPerCoreType",
        "MaxDMProcessorsPerCoreType",
        "NumEthDispatchClasses",
        "NumTensixDispatchClasses",
        "noc_size_y"
      ],
      "enums": [
        "ProgrammableCoreType",
        "EthProcessorTypes",
        "TensixProcessorTypes"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/dram_address_map.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [
        "dram_mem"
      ],
      "structs": [
        "address_map"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/eth_l1_address_map.h": {
      "classes": [],
      "constants": [
        "_cResult"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [
        "eth_iram_mem",
        "eth_l1_mem"
      ],
      "structs": [
        "address_map",
        "TAssertEquality"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/noc/noc.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint32_t noc_get_cmd_buf()",
        "void noc_set_active_instance(uint32_t noc_id)",
        "uint32_t noc_ecc_get_num_header_sec()",
        "uint32_t noc_get_cfg_reg(uint32_t cfg_reg_id)",
        "void noc_copy_word_be(\n    uint64_t src_addr,\n    uint64_t dst_addr,\n    uint32_t be,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "void noc_multicast_copy_word_be(\n    uint64_t src_addr,\n    uint64_t dst_addr,\n    uint32_t multicast_mode,\n    uint32_t be,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "void noc_ecc_clear_err(bool clear_mem_parity_err, bool clear_header_sec, bool clear_header_ded)",
        "void noc_atomic_increment(uint64_t addr, uint32_t incr, uint32_t wrap, bool linked)",
        "void noc_ecc_cfg_stage_1(bool header_ckh_bits_en)",
        "bool noc_command_ready()",
        "void noc_set_cmd_buf(uint32_t cmd_buf_id)",
        "uint32_t noc_wr_ack_received()",
        "uint32_t noc_ecc_get_num_header_ded()",
        "uint32_t noc_local_node_id()",
        "uint32_t noc_atomic_read_updates_completed()",
        "void noc_copy(\n    uint64_t src_addr,\n    uint64_t dst_addr,\n    uint32_t size,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint32_t vc_arb_priority,\n    uint8_t transaction_id)",
        "void noc_set_cfg_reg(uint32_t cfg_reg_id, uint32_t val)",
        "void noc_write_dw_inline(\n    uint64_t dst_addr,\n    uint32_t val,\n    uint8_t be,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "void noc_ecc_force_err(bool force_mem_parity_err, bool force_header_sec, bool force_header_ded)",
        "void noc_multicast_write_dw_inline(\n    uint64_t dst_addr,\n    uint32_t val,\n    uint32_t multicast_mode,\n    uint8_t be,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "uint32_t noc_status_reg(uint32_t status_reg_id)",
        "void noc_multicast_copy(\n    uint64_t src_addr,\n    uint64_t dst_addr,\n    uint32_t multicast_mode,\n    uint32_t size,\n    bool linked,\n    bool posted,\n    bool static_vc_alloc,\n    uint32_t static_vc,\n    uint8_t transaction_id)",
        "uint32_t noc_get_active_instance()",
        "void noc_clear_req_id_cnt(uint32_t id_mask)",
        "void noc_multicast_atomic_read_and_increment(\n    uint64_t addr,\n    uint32_t multicast_mode,\n    uint32_t incr,\n    uint32_t wrap,\n    uint64_t read_addr,\n    bool linked,\n    uint8_t transaction_id)",
        "void noc_atomic_read_and_increment(\n    uint64_t addr, uint32_t incr, uint32_t wrap, uint64_t read_addr, bool linked, uint8_t transaction_id)",
        "void noc_multicast_atomic_increment(uint64_t addr, uint32_t multicast_mode, uint32_t incr, uint32_t wrap, bool linked)",
        "void noc_ecc_cfg_stage_2(\n    bool niu_mem_parity_en,\n    bool router_mem_parity_en,\n    bool header_secded_en,\n    bool mem_parity_int_en,\n    bool header_sec_int_en,\n    bool header_ded_int_en)",
        "uint32_t noc_rd_resp_received()",
        "uint32_t noc_ecc_get_num_mem_parity_errs()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/noc/noc_overlay_parameters.hpp": {
      "classes": [
        "OLP"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "OLP()"
      ],
      "namespaces": [
        "Noc"
      ],
      "structs": [
        "OverlayField",
        "OverlayReg"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/noc_nonblocking_api.h": {
      "classes": [],
      "constants": [
        "dm0",
        "NCRISC_WR_REG_CMD_BUF",
        "BRISC_WR_REG_CMD_BUF",
        "BRISC_RD_CMD_BUF",
        "BRISC_WR_CMD_BUF",
        "dm1",
        "NUM_BARRIER_TYPES",
        "DYNAMIC_NOC_BRISC_WR_REG_CMD_BUF",
        "NOC_TARG_ADDR_COORDINATE",
        "BRISC_AT_CMD_BUF",
        "DYNAMIC_NOC_NCRISC_AT_CMD_BUF",
        "DYNAMIC_NOC_NCRISC_WR_REG_CMD_BUF",
        "DYNAMIC_NOC_NCRISC_RD_CMD_BUF",
        "NOC_ADDR_COORD_SHIFT",
        "NCRISC_WR_CMD_BUF",
        "NCRISC_RD_CMD_BUF",
        "NCRISC_AT_CMD_BUF",
        "DYNAMIC_NOC_BRISC_AT_CMD_BUF",
        "DYNAMIC_NOC_BRISC_RD_CMD_BUF",
        "DYNAMIC_NOC_NCRISC_WR_CMD_BUF",
        "offset",
        "NOC_COORDINATE_MASK",
        "NOC_RET_ADDR_COORDINATE",
        "DYNAMIC_NOC_BRISC_WR_CMD_BUF"
      ],
      "enums": [
        "NocBarrierType"
      ],
      "functions": [
        "bool ncrisc_noc_nonposted_write_with_transaction_id_sent(\n    uint32_t noc, uint32_t transcation_id)",
        "void ncrisc_noc_blitz_write_setup(\n    uint32_t noc, uint32_t cmd_buf, uint64_t dest_addr, uint32_t len_bytes, uint32_t vc, uint32_t num_times_to_write)",
        "void ncrisc_noc_fast_read_with_transaction_id(\n    uint32_t noc, uint32_t cmd_buf, uint32_t src_base_addr, uint32_t src_addr, uint32_t dest_addr, uint32_t trid)",
        "bool ncrisc_dynamic_noc_nonposted_writes_flushed(uint32_t noc)",
        "void dynamic_noc_local_barrier_init(\n    uint32_t noc0_status_reg, uint32_t noc1_status_reg)",
        "void ncrisc_noc_counters_init()",
        "void noc_init(uint32_t atomic_ret_val)",
        "bool ncrisc_noc_posted_writes_sent(uint32_t noc)",
        "void ncrisc_noc_fast_write_any_len(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve,\n    bool posted = false,\n    uint32_t trid = 0)",
        "bool noc_cmd_buf_ready(uint32_t noc, uint32_t cmd_buf)",
        "bool ncrisc_noc_nonposted_writes_sent(uint32_t noc)",
        "bool ncrisc_dynamic_noc_nonposted_atomics_flushed(uint32_t noc)",
        "bool ncrisc_dynamic_noc_reads_flushed(uint32_t noc)",
        "void ncrisc_noc_fast_write(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve,\n    bool posted = false,\n    uint32_t trid = 0)",
        "void set_noc_counter_val(uint32_t noc, uint32_t val)",
        "void NOC_CMD_BUF_WRITE_REG(\n    uint32_t noc, uint32_t buf, uint32_t addr, uint32_t val)",
        "bool ncrisc_noc_nonposted_write_with_transaction_id_flushed(\n    uint32_t noc, uint32_t transcation_id)",
        "uint32_t get_noc_counter_val(uint32_t noc)",
        "void inc_noc_counter_val(uint32_t noc, uint32_t inc = 1)",
        "void ncrisc_noc_fast_read_any_len(\n    uint32_t noc, uint32_t cmd_buf, uint64_t src_addr, uint32_t dest_addr, uint32_t len_bytes)",
        "uint32_t get_noc_counter_address(uint32_t noc)",
        "void ncrisc_noc_full_sync()",
        "void ncrisc_noc_fast_write_any_len_loopback_src(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve)",
        "void noc_fast_write_dw_inline(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t val,\n    uint64_t dest_addr,\n    uint32_t be,\n    uint32_t static_vc,\n    bool mcast,\n    bool posted = false)",
        "bool ncrisc_noc_read_with_transaction_id_flushed(\n    uint32_t noc, uint32_t transcation_id)",
        "bool ncrisc_noc_reads_flushed(uint32_t noc)",
        "bool ncrisc_noc_nonposted_writes_flushed(uint32_t noc)",
        "void noc_fast_atomic_increment(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint64_t addr,\n    uint32_t vc,\n    uint32_t incr,\n    uint32_t wrap,\n    bool linked,\n    bool posted = false,\n    uint32_t atomic_ret_val = 0)",
        "bool ncrisc_dynamic_noc_posted_writes_sent(uint32_t noc)",
        "void ncrisc_noc_fast_read(\n    uint32_t noc, uint32_t cmd_buf, uint64_t src_addr, uint32_t dest_addr, uint32_t len_bytes)",
        "void dynamic_noc_init()",
        "void ncrisc_noc_set_transaction_id(\n    uint32_t noc, uint32_t cmd_buf, uint32_t trid)",
        "void noc_local_state_init(int noc)",
        "void dynamic_noc_local_state_init()",
        "bool ncrisc_dynamic_noc_nonposted_writes_sent(uint32_t noc)",
        "bool ncrisc_noc_nonposted_atomics_flushed(uint32_t noc)",
        "void ncrisc_noc_fast_write_loopback_src(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve)",
        "uint32_t NOC_CFG_READ_REG(uint32_t noc, uint32_t reg_id)",
        "uint32_t NOC_CMD_BUF_READ_REG(uint32_t noc, uint32_t buf, uint32_t addr)",
        "uint32_t NOC_STATUS_READ_REG(uint32_t noc, uint32_t reg_id)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "uint32_t get_noc_counter_address(uint32_t noc)",
        "void ncrisc_noc_fast_write_any_len_loopback_src(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve)",
        "void inc_noc_counter_val(uint32_t noc, uint32_t inc = 1)",
        "void noc_fast_write_dw_inline(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t val,\n    uint64_t dest_addr,\n    uint32_t be,\n    uint32_t static_vc,\n    bool mcast,\n    bool posted = false)",
        "void ncrisc_noc_blitz_write_setup(\n    uint32_t noc, uint32_t cmd_buf, uint64_t dest_addr, uint32_t len_bytes, uint32_t vc, uint32_t num_times_to_write)",
        "void ncrisc_noc_fast_write_any_len(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve,\n    bool posted = false,\n    uint32_t trid = 0)",
        "void ncrisc_noc_fast_read_with_transaction_id(\n    uint32_t noc, uint32_t cmd_buf, uint32_t src_base_addr, uint32_t src_addr, uint32_t dest_addr, uint32_t trid)",
        "void noc_fast_atomic_increment(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint64_t addr,\n    uint32_t vc,\n    uint32_t incr,\n    uint32_t wrap,\n    bool linked,\n    bool posted = false,\n    uint32_t atomic_ret_val = 0)",
        "void ncrisc_noc_fast_write(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve,\n    bool posted = false,\n    uint32_t trid = 0)",
        "void set_noc_counter_val(uint32_t noc, uint32_t val)",
        "void ncrisc_noc_fast_write_loopback_src(\n    uint32_t noc,\n    uint32_t cmd_buf,\n    uint32_t src_addr,\n    uint64_t dest_addr,\n    uint32_t len_bytes,\n    uint32_t vc,\n    bool mcast,\n    bool linked,\n    uint32_t num_dests,\n    bool multicast_path_reserve)",
        "void ncrisc_noc_fast_read(\n    uint32_t noc, uint32_t cmd_buf, uint64_t src_addr, uint32_t dest_addr, uint32_t len_bytes)",
        "void dynamic_noc_local_barrier_init(\n    uint32_t noc0_status_reg, uint32_t noc1_status_reg)",
        "uint32_t get_noc_counter_val(uint32_t noc)",
        "void ncrisc_noc_fast_read_any_len(\n    uint32_t noc, uint32_t cmd_buf, uint64_t src_addr, uint32_t dest_addr, uint32_t len_bytes)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/risc_chip_specific.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint16_t op_pack_tiles_ptr_sub(uint16_t a, uint16_t b)",
        "int get_epoch_table_y(int my_x, int my_y)",
        "int get_epoch_table_x(int my_x, int my_y)",
        "uint16_t op_pack_tiles_ptr_add(uint16_t a, uint16_t b)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/stream_interface.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void stream_push_tiles(\n    uint32_t stream_id, uint32_t num_tiles, uint32_t num_words)",
        "uint32_t stream_get_buf_space_available_words(uint32_t stream_id)",
        "void stream_receiver_endpoint_single_clear_op(\n    uint32_t stream_id, uint32_t num_tiles)",
        "void stream_set_tiles_left_in_phase(uint32_t stream_id, uint32_t num_tiles)",
        "void stream_reset(uint32_t stream_id)",
        "bool stream_is_receiver_endpoint(uint32_t stream_id)",
        "void stream_get_remote_src_coord(uint32_t stream_id, uint32_t& x, uint32_t& y)",
        "bool stream_is_dram_read_opt_enabled(uint32_t stream_id)",
        "uint32_t stream_get_data_buf_size(uint32_t stream_id)",
        "uint32_t stream_tiles_outstanding(uint32_t stream_id)",
        "void stream_rec_endpoint_set_phase_tiles_count(uint32_t stream_id, uint32_t val)",
        "bool stream_phase_id_is_active(uint32_t stream_id, uint32_t phase_id)",
        "uint32_t stream_phase_advance_wait(uint32_t stream_id)",
        "uint32_t stream_rec_endpoint_get_phase_tiles_count(uint32_t stream_id)",
        "bool stream_get_push_flushed(uint32_t stream_id)",
        "void stream_signal_flushed_tiles(\n    uint32_t stream_id, uint32_t num_tiles, uint32_t num_words)",
        "uint32_t stream_get_free_words(uint32_t stream_id)",
        "uint32_t stream_get_output_noc(uint32_t stream_id)",
        "bool is_dummy_phase(uint32_t stream_id)",
        "void stream_relay_tiles(\n    uint32_t stream_id, uint32_t num_tiles, uint32_t num_words)",
        "uint32_t stream_dram_read_should_reset_pointers(uint32_t stream_id)",
        "uint32_t stream_src_endpoint_get_phase_tiles_count(uint32_t stream_id)",
        "uint32_t stream_get_input_noc(uint32_t stream_id)",
        "uint32_t stream_phase_next_recved_tile_size(uint32_t stream_id)",
        "void stream_get_remote_dest_coord(uint32_t stream_id, uint32_t& x, uint32_t& y)",
        "void check_dummy_phase(uint32_t stream_id)",
        "uint32_t NOC1_X_ID(uint32_t x)",
        "void stream_src_endpoint_set_phase_tiles_count(uint32_t stream_id, uint32_t val)",
        "uint32_t stream_get_curr_phase(uint32_t stream_id)",
        "bool stream_next_phase_src_change(uint32_t stream_id)",
        "uint32_t stream_dram_write_should_reset_pointers(uint32_t stream_id)",
        "uint32_t stream_should_packer_reset_pointers(uint32_t stream_id)",
        "uint32_t stream_get_buf_space_available(uint32_t stream_id)",
        "int stream_get_curr_phase_num_msgs(uint32_t stream_id)",
        "uint32_t NOC1_Y_ID(uint32_t y)",
        "uint32_t stream_phase_is_active(uint32_t stream_id)",
        "bool assert_check(uint32_t stream_id, bool hang)",
        "uint32_t stream_get_data_buf_addr(uint32_t stream_id)",
        "uint32_t stream_get_output_unicast_vc(uint32_t stream_id)",
        "uint32_t stream_phase_tiles_received(uint32_t stream_id, uint32_t msg_info_buf_start_addr)",
        "void stream_receiver_endpoint_tiles_clear(uint32_t stream_id, uint32_t num_tiles)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "bool stream_get_push_flushed(uint32_t stream_id)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/stream_io_map.h": {
      "classes": [],
      "constants": [
        "OPERAND_START_STREAM"
      ],
      "enums": [],
      "functions": [
        "uint32_t get_operand_stream_id(int operand)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/tdma_xmov.h": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void wait_tdma_movers_done(uint mover_busy_mask)",
        "void tdma_xmov(uint mover_number, uint source_addr, uint dest_addr, uint size, xmov_direction_t direction)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/tensix.h": {
      "classes": [],
      "constants": [],
      "enums": [
        "cnt_id_t"
      ],
      "functions": [
        "u_T u_x(x)",
        "T bitmask(unsigned int bits)",
        "typename std::make_unsigned<T>::type u_x(x)"
      ],
      "namespaces": [],
      "structs": [
        "riscv_debug_reg_dbg_l1_mem_reg2_t",
        "riscv_debug_reg_dbg_dbus_cntl_t"
      ],
      "template_functions": [
        "typename std::make_unsigned<T>::type pack_field(T x, unsigned int to_shift)",
        "typename std::make_unsigned<T>::type pack_field(\n    T x, unsigned int bits, unsigned int from_shift, unsigned int to_shift)",
        "typename std::make_unsigned<T>::type pack_field(T x, unsigned int bits, unsigned int to_shift)",
        "T bitmask(unsigned int bits)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/hw/inc/wormhole/wormhole_b0_defines/tensix_types.h": {
      "classes": [],
      "constants": [],
      "enums": [
        "math_fidelity_t",
        "tdma_mover_id_t",
        "DataFormat",
        "relu_mode_t",
        "stochastic_round_settings_t",
        "xmov_direction_t"
      ],
      "functions": [
        "TileHeader()",
        "TileHeader_u()"
      ],
      "namespaces": [],
      "structs": [
        "tile_descriptor_t",
        "fifo_ctl_t",
        "packer_config_t",
        "io_queue_pointers_t",
        "mover_config_u",
        "mover_config_t",
        "packer_config_u",
        "SectionHeader",
        "TileHeader"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/allocator/algorithms/allocator_algorithm.hpp": {
      "classes": [
        "Algorithm"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "Algorithm(\n        DeviceAddr max_size_bytes, DeviceAddr offset_bytes, DeviceAddr min_allocation_size, DeviceAddr alignment)"
      ],
      "namespaces": [
        "tt",
        "tt_metal",
        "allocator"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/allocator/algorithms/free_list.hpp": {
      "classes": [
        "FreeList"
      ],
      "constants": [],
      "enums": [
        "SearchPolicy"
      ],
      "functions": [
        "Block(\n            DeviceAddr address,\n            DeviceAddr size,\n            boost::local_shared_ptr<Block> prev_block,\n            boost::local_shared_ptr<Block> next_block,\n            boost::local_shared_ptr<Block> prev_free,\n            boost::local_shared_ptr<Block> next_free)",
        "FreeList(\n        DeviceAddr max_size_bytes,\n        DeviceAddr offset_bytes,\n        DeviceAddr min_allocation_size,\n        DeviceAddr alignment,\n        SearchPolicy search_policy)",
        "Block(DeviceAddr address, DeviceAddr size)"
      ],
      "namespaces": [
        "tt",
        "tt_metal",
        "allocator"
      ],
      "structs": [
        "Block"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/allocator/algorithms/free_list_opt.hpp": {
      "classes": [
        "FreeListOpt"
      ],
      "constants": [
        "n_alloc_table_init_bucket_size",
        "n_alloc_table_buckets",
        "size_segregated_base"
      ],
      "enums": [
        "SearchPolicy"
      ],
      "functions": [
        "FreeListOpt(\n        DeviceAddr max_size_bytes,\n        DeviceAddr offset_bytes,\n        DeviceAddr min_allocation_size,\n        DeviceAddr alignment,\n        SearchPolicy policy = SearchPolicy::BEST)"
      ],
      "namespaces": [
        "tt",
        "tt_metal",
        "allocator"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/allocator/bank_manager.hpp": {
      "classes": [
        "BankManager"
      ],
      "constants": [],
      "enums": [
        "BufferType"
      ],
      "functions": [
        "BankManager(\n        const BufferType& buffer_type,\n        const std::vector<int64_t>& bank_descriptors,\n        DeviceAddr size_bytes,\n        uint32_t alignment_bytes,\n        DeviceAddr alloc_offset = 0,\n        bool disable_interleaved = false)",
        "BankManager(\n        const BufferType& buffer_type,\n        const std::unordered_map<uint32_t, int64_t>& bank_id_to_descriptor,\n        DeviceAddr size_bytes,\n        DeviceAddr interleaved_address_limit,\n        uint32_t alignment_bytes,\n        DeviceAddr alloc_offset = 0,\n        bool disable_interleaved = false)",
        "BankManager()"
      ],
      "namespaces": [
        "tt",
        "allocator",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/allocator/l1_banking_allocator.hpp": {
      "classes": [
        "L1BankingAllocator"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "L1BankingAllocator(const AllocatorConfig& alloc_config)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/buffers/dispatch.hpp": {
      "classes": [],
      "constants": [
        "num_pages_per_bank"
      ],
      "enums": [
        "TensorMemoryLayout",
        "CoreType"
      ],
      "functions": [
        "bool are_pages_larger_than_max_prefetch_cmd_size(const Buffer& buffer)",
        "PartialPageSpec calculate_partial_page_spec(const Buffer& buffer)",
        "tt::stl::Span<const SubDeviceId> select_sub_device_ids(\n    IDevice* device, tt::stl::Span<const SubDeviceId> sub_device_ids)",
        "std::vector<CoreCoord> get_cores_for_sharded_buffer(\n    bool width_split, const std::shared_ptr<const BufferPageMapping>& buffer_page_mapping, Buffer& buffer)",
        "void copy_interleaved_buffer_to_completion_queue(\n    BufferReadDispatchParams& dispatch_params,\n    Buffer& buffer,\n    tt::stl::Span<const SubDeviceId> sub_device_ids,\n    CoreType dispatch_core_type)",
        "std::shared_ptr<::tt::tt_metal::CompletionReaderVariant> generate_interleaved_buffer_read_descriptor(\n    void* dst, BufferReadDispatchParams* dispatch_params, Buffer& buffer)",
        "ShardedBufferReadDispatchParams initialize_sharded_buf_read_dispatch_params(\n    Buffer& buffer,\n    uint32_t cq_id,\n    tt::stl::Span<const uint32_t> expected_num_workers_completed,\n    const BufferRegion& region)",
        "ReadBufferDescriptor(\n        TensorMemoryLayout buffer_layout,\n        uint32_t page_size,\n        uint32_t padded_page_size,\n        void* dst,\n        uint32_t dst_offset,\n        uint32_t num_pages_read,\n        uint32_t cur_dev_page_id,\n        uint32_t starting_host_page_id = 0,\n        const std::shared_ptr<const BufferPageMapping>& buffer_page_mapping = nullptr)",
        "BufferReadDispatchParamsVariant initialize_interleaved_buf_read_dispatch_params(\n    Buffer& buffer,\n    uint32_t cq_id,\n    tt::stl::Span<const uint32_t> expected_num_workers_completed,\n    const BufferRegion& region)",
        "std::shared_ptr<::tt::tt_metal::CompletionReaderVariant> generate_sharded_buffer_read_descriptor(\n    void* dst, ShardedBufferReadDispatchParams& dispatch_params, Buffer& buffer)",
        "void copy_sharded_buffer_from_core_to_completion_queue(\n    uint32_t core_id,\n    Buffer& buffer,\n    ShardedBufferReadDispatchParams& dispatch_params,\n    tt::stl::Span<const SubDeviceId> sub_device_ids,\n    const CoreCoord core,\n    CoreType dispatch_core_type)",
        "void copy_completion_queue_data_into_user_space(\n    const ReadBufferDescriptor& read_buffer_descriptor,\n    chip_id_t mmio_device_id,\n    uint16_t channel,\n    uint32_t cq_id,\n    SystemMemoryManager& sysmem_manager,\n    std::atomic<bool>& exit_condition)",
        "void write_to_device_buffer(\n    const void* src,\n    Buffer& buffer,\n    const BufferRegion& region,\n    uint32_t cq_id,\n    tt::stl::Span<const uint32_t> expected_num_workers_completed,\n    CoreType dispatch_core_type,\n    tt::stl::Span<const SubDeviceId> sub_device_ids)"
      ],
      "namespaces": [
        "tt",
        "buffer_dispatch",
        "tt_metal"
      ],
      "structs": [
        "BufferReadLargePageDispatchParams",
        "BufferReadDispatchParams",
        "ShardedBufferReadDispatchParams",
        "ReadBufferDescriptor",
        "PartialPageSpec"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/context/metal_context.hpp": {
      "classes": [
        "MetalContext"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "MetalContext(MetalContext&& other)",
        "MetalContext()",
        "MetalContext(const MetalContext&)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/debug/debug_helpers.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "CoreDescriptorSet GetAllCores(chip_id_t device_id)",
        "CoreDescriptorSet GetDispatchCores(chip_id_t device_id)",
        "std::string_view get_core_type_name(CoreType ct)",
        "tt::tt_metal::HalProgrammableCoreType get_programmable_core_type(CoreCoord virtual_core, chip_id_t device_id)",
        "int GetNumRiscs(chip_id_t device_id, const CoreDescriptor& core)",
        "uint64_t GetDprintBufAddr(chip_id_t device_id, const CoreCoord& virtual_core, int risc_id)"
      ],
      "namespaces": [],
      "structs": [
        "CoreDescriptorComparator"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/debug/dprint_server.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void DprintServerSetProfilerState(bool profile_device)",
        "bool DPrintServerHangDetected()",
        "void DprintServerDetach(chip_id_t device_id)",
        "bool DprintServerIsRunning()",
        "void DprintServerAttach(chip_id_t device_id)",
        "void DPrintServerClearLogFile()",
        "void DPrintServerClearSignals()",
        "bool DPrintServerReadsDispatchCores(chip_id_t device_id)",
        "void DprintServerAwait()",
        "void DprintServerSetMute(bool mute_print_server)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/debug/noc_logging.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void DumpNocData(const std::vector<chip_id_t>& device_ids)",
        "void ClearNocData(chip_id_t device_id)"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/debug/watcher_device_reader.hpp": {
      "classes": [
        "WatcherDeviceReader"
      ],
      "constants": [
        "DEBUG_SANITIZE_NOC_SENTINEL_OK_16",
        "DEBUG_SANITIZE_NOC_SENTINEL_OK_8",
        "DEBUG_SANITIZE_NOC_SENTINEL_OK_64",
        "DEBUG_SANITIZE_NOC_SENTINEL_OK_32"
      ],
      "enums": [],
      "functions": [
        "WatcherDeviceReader(\n        FILE* f,\n        chip_id_t device_id,\n        std::vector<std::string>& kernel_names,\n        void (*set_watcher_exception_message)(const std::string&))"
      ],
      "namespaces": [],
      "structs": [
        "stack_usage_info_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/debug/watcher_server.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void watcher_sanitize_host_noc_write(const metal_SocDescriptor& soc_d, CoreCoord core, uint64_t addr, uint32_t len)",
        "void watcher_read_kernel_ids_from_file()",
        "int watcher_register_kernel(const std::string& name)",
        "void watcher_dump()",
        "void watcher_register_kernel_elf_paths(int id, std::vector<std::string> paths)",
        "void watcher_attach(chip_id_t device_id)",
        "void watcher_sanitize_host_noc_read(const metal_SocDescriptor& soc_d, CoreCoord core, uint64_t addr, uint32_t len)",
        "void watcher_clear_log()",
        "std::string watcher_get_log_file_name()",
        "std::string get_watcher_exception_message()",
        "void watcher_init(chip_id_t device_id)",
        "void watcher_detach(chip_id_t device_id)",
        "int watcher_get_dump_count()",
        "void watcher_server_set_error_flag(bool val)",
        "bool watcher_server_killed_due_to_error()"
      ],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/device/device_impl.hpp": {
      "classes": [
        "Device"
      ],
      "constants": [
        "DEFAULT_NUM_SUB_DEVICES"
      ],
      "enums": [],
      "functions": [
        "Device(\n        chip_id_t device_id,\n        const uint8_t num_hw_cqs,\n        std::size_t l1_small_size,\n        std::size_t trace_region_size,\n        tt::stl::Span<const std::uint32_t> l1_bank_remap = {},\n        bool minimal = false,\n        uint32_t worker_thread_core = 0,\n        uint32_t completion_queue_reader_core = 0,\n        std::size_t worker_l1_size = DEFAULT_WORKER_L1_SIZE)",
        "Device(Device&& other)",
        "Device(const Device &other)",
        "Device()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/device/dispatch.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void read_core_data_from_completion_queue(\n    const ReadCoreDataDescriptor& read_descriptor,\n    chip_id_t mmio_device_id,\n    uint16_t channel,\n    uint8_t cq_id,\n    SystemMemoryManager& sysmem_manager,\n    std::atomic<bool>& exit_condition)",
        "void validate_core_read_write_bounds(\n    IDevice* device, const CoreCoord& virtual_core, DeviceAddr address, uint32_t size_bytes)",
        "uint32_t calculate_max_prefetch_data_size_bytes(const CoreType& dispatch_core_type)",
        "void write_to_core(\n    IDevice* device,\n    const CoreCoord& virtual_core,\n    const void* src,\n    DeviceAddr address,\n    uint32_t size_bytes,\n    uint32_t cq_id,\n    tt::stl::Span<const uint32_t> expected_num_workers_completed,\n    tt::stl::Span<const SubDeviceId> sub_device_ids = {})",
        "DeviceAddr add_bank_offset_to_address(IDevice* device, const CoreCoord& virtual_core, DeviceAddr address)",
        "void issue_core_read_command_sequence(const CoreReadDispatchParams& dispatch_params)"
      ],
      "namespaces": [
        "tt",
        "device_dispatch",
        "tt_metal"
      ],
      "structs": [
        "ReadCoreDataDescriptor",
        "CoreDispatchParams",
        "CoreReadDispatchParams"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/command_queue_common.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "CommandQueueHostAddrType",
        "CommandQueueDeviceAddrType"
      ],
      "functions": [
        "uint32_t get_cq_completion_rd_ptr(chip_id_t chip_id, uint8_t cq_id, uint32_t cq_size)",
        "uint16_t get_umd_channel(uint16_t channel)",
        "uint32_t get_relative_cq_offset(uint8_t cq_id, uint32_t cq_size)",
        "uint32_t get_cq_completion_wr_ptr(chip_id_t chip_id, uint8_t cq_id, uint32_t cq_size)",
        "uint32_t get_absolute_cq_offset(uint16_t channel, uint8_t cq_id, uint32_t cq_size)",
        "uint32_t get_cq_issue_rd_ptr(chip_id_t chip_id, uint8_t cq_id, uint32_t cq_size)",
        "uint32_t get_cq_issue_wr_ptr(chip_id_t chip_id, uint8_t cq_id, uint32_t cq_size)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "uint32_t get_cq_completion_rd_ptr(chip_id_t chip_id, uint8_t cq_id, uint32_t cq_size)",
        "uint32_t get_cq_issue_rd_ptr(chip_id_t chip_id, uint8_t cq_id, uint32_t cq_size)",
        "uint32_t get_cq_issue_wr_ptr(chip_id_t chip_id, uint8_t cq_id, uint32_t cq_size)",
        "uint32_t get_cq_completion_wr_ptr(chip_id_t chip_id, uint8_t cq_id, uint32_t cq_size)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/data_collection.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "data_collector_t",
        "CoreType"
      ],
      "functions": [
        "void RecordProgramRun(uint64_t program_id)",
        "void RecordKernelGroups(\n    tt_metal::detail::ProgramImpl& program, CoreType core_type, std::vector<tt_metal::KernelGroup>& kernel_groups)",
        "void RecordDispatchData(\n    uint64_t program_id, data_collector_t type, uint32_t transaction_size, RISCV riscv = RISCV::MAX)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/debug_tools.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void dump_cqs(\n    std::ofstream& cq_file,\n    std::ofstream& iq_file,\n    tt::tt_metal::SystemMemoryManager& sysmem_manager,\n    bool dump_raw_data = false)",
        "void wait_for_program_vector_to_arrive_and_compare_to_host_program_vector(\n    const char* DISPATCH_MAP_DUMP, tt::tt_metal::IDevice* device)",
        "void match_device_program_data_with_host_program_data(const char* host_file, const char* device_file)"
      ],
      "namespaces": [
        "tt",
        "internal",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/device_command.hpp": {
      "classes": [
        "DeviceCommand"
      ],
      "constants": [
        "PROGRAM_PAGE_SIZE",
        "no_stride",
        "LOG2_PROGRAM_PAGE_SIZE",
        "offset_idx"
      ],
      "enums": [],
      "functions": [
        "DeviceCommand(void* cmd_region, uint32_t cmd_sequence_sizeB)",
        "void zero(Command* cmd)",
        "DeviceCommand(DeviceCommand&& other)",
        "void add_dispatch_write_linear(\n        uint8_t num_mcast_dests,\n        uint32_t noc_xy_addr,\n        uint32_t addr,\n        uint32_t data_sizeB,\n        const void* data = nullptr,\n        uint32_t write_offset_index = 0)",
        "CommandPtr reserve_space(uint32_t size_to_writeB)",
        "DeviceCommand(const DeviceCommand& other)",
        "DeviceCommand(uint32_t cmd_sequence_sizeB)",
        "void add_dispatch_write_paged(\n        bool flush_prefetch,\n        uint8_t is_dram,\n        uint16_t start_page,\n        uint32_t base_addr,\n        uint32_t page_size,\n        uint32_t pages,\n        const void* data = nullptr)",
        "void add_dispatch_write_packed(\n        uint8_t type,\n        uint16_t num_sub_cmds,\n        uint32_t common_addr,\n        uint16_t packed_data_sizeB,\n        uint32_t payload_sizeB,\n        const std::vector<PackedSubCmd>& sub_cmds,\n        const std::vector<std::vector<std::tuple<const void*, uint32_t, uint32_t>>>& data_collection,\n        uint32_t packed_write_max_unicast_sub_cmds,\n        const uint32_t offset_idx = 0,\n        const bool no_stride = false,\n        uint32_t write_offset_index = 0)",
        "void add_dispatch_write_host(bool flush_prefetch, uint32_t data_sizeB, bool is_event, const void* data = nullptr)",
        "DeviceCommand()",
        "void add_dispatch_write_packed(\n        uint8_t type,\n        uint16_t num_sub_cmds,\n        uint32_t common_addr,\n        uint16_t packed_data_sizeB,\n        uint32_t payload_sizeB,\n        const std::vector<PackedSubCmd>& sub_cmds,\n        const std::vector<std::pair<const void*, uint32_t>>& data_collection,\n        uint32_t packed_write_max_unicast_sub_cmds,\n        const uint32_t offset_idx = 0,\n        const bool no_stride = false,\n        uint32_t write_offset_index = 0)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "void zero(Command* cmd)",
        "void add_dispatch_write_linear(\n        uint8_t num_mcast_dests,\n        uint32_t noc_xy_addr,\n        uint32_t addr,\n        uint32_t data_sizeB,\n        const void* data = nullptr,\n        uint32_t write_offset_index = 0)",
        "CommandPtr reserve_space(uint32_t size_to_writeB)",
        "DeviceCommand(uint32_t cmd_sequence_sizeB)",
        "void add_dispatch_write_paged(\n        bool flush_prefetch,\n        uint8_t is_dram,\n        uint16_t start_page,\n        uint32_t base_addr,\n        uint32_t page_size,\n        uint32_t pages,\n        const void* data = nullptr)",
        "void add_dispatch_write_packed(\n        uint8_t type,\n        uint16_t num_sub_cmds,\n        uint32_t common_addr,\n        uint16_t packed_data_sizeB,\n        uint32_t payload_sizeB,\n        const std::vector<PackedSubCmd>& sub_cmds,\n        const std::vector<std::vector<std::tuple<const void*, uint32_t, uint32_t>>>& data_collection,\n        uint32_t packed_write_max_unicast_sub_cmds,\n        const uint32_t offset_idx = 0,\n        const bool no_stride = false,\n        uint32_t write_offset_index = 0)",
        "void add_dispatch_write_host(bool flush_prefetch, uint32_t data_sizeB, bool is_event, const void* data = nullptr)",
        "void add_dispatch_write_packed(\n        uint8_t type,\n        uint16_t num_sub_cmds,\n        uint32_t common_addr,\n        uint16_t packed_data_sizeB,\n        uint32_t payload_sizeB,\n        const std::vector<PackedSubCmd>& sub_cmds,\n        const std::vector<std::pair<const void*, uint32_t>>& data_collection,\n        uint32_t packed_write_max_unicast_sub_cmds,\n        const uint32_t offset_idx = 0,\n        const bool no_stride = false,\n        uint32_t write_offset_index = 0)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/device_command_calculator.hpp": {
      "classes": [
        "DeviceCommandCalculator"
      ],
      "constants": [
        "no_stride"
      ],
      "enums": [],
      "functions": [
        "void add_dispatch_write_packed(\n        uint16_t num_sub_cmds,\n        uint16_t packed_data_sizeB,\n        uint32_t packed_write_max_unicast_sub_cmds,\n        const bool no_stride = false)",
        "void add_dispatch_write_linear(uint32_t data_sizeB)",
        "void add_dispatch_write_paged(uint32_t page_size, uint32_t pages)",
        "void insert_write_packed_payloads(\n        const uint32_t num_sub_cmds,\n        const uint32_t sub_cmd_sizeB,\n        const uint32_t max_prefetch_command_size,\n        const uint32_t packed_write_max_unicast_sub_cmds,\n        std::vector<std::pair<uint32_t, uint32_t>>& packed_cmd_payloads)",
        "uint32_t get_max_write_packed_sub_cmds(\n        uint32_t data_size,\n        uint32_t max_prefetch_cmd_size,\n        uint32_t packed_write_max_unicast_sub_cmds,\n        bool no_stride)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "void add_dispatch_write_packed(\n        uint16_t num_sub_cmds,\n        uint16_t packed_data_sizeB,\n        uint32_t packed_write_max_unicast_sub_cmds,\n        const bool no_stride = false)",
        "void add_dispatch_write_linear(uint32_t data_sizeB)",
        "void add_dispatch_write_paged(uint32_t page_size, uint32_t pages)",
        "void insert_write_packed_payloads(\n        const uint32_t num_sub_cmds,\n        const uint32_t sub_cmd_sizeB,\n        const uint32_t max_prefetch_command_size,\n        const uint32_t packed_write_max_unicast_sub_cmds,\n        std::vector<std::pair<uint32_t, uint32_t>>& packed_cmd_payloads)",
        "uint32_t get_max_write_packed_sub_cmds(\n        uint32_t data_size,\n        uint32_t max_prefetch_cmd_size,\n        uint32_t packed_write_max_unicast_sub_cmds,\n        bool no_stride)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/dispatch_core_manager.hpp": {
      "classes": [
        "dispatch_core_manager"
      ],
      "constants": [
        "MAX_NUM_HW_CQS"
      ],
      "enums": [],
      "functions": [
        "dispatch_core_manager(const dispatch_core_manager&)",
        "dispatch_core_manager(const DispatchCoreConfig& dispatch_core_config, uint8_t num_hw_cqs)",
        "dispatch_core_manager(dispatch_core_manager&& other)"
      ],
      "namespaces": [],
      "structs": [
        "dispatch_core_placement_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/dispatch_mem_map.hpp": {
      "classes": [
        "DispatchMemMap"
      ],
      "constants": [],
      "enums": [
        "CommandQueueDeviceAddrType"
      ],
      "functions": [
        "DispatchMemMap(DispatchMemMap&& other)",
        "DispatchMemMap(const CoreType& core_type, const uint32_t num_hw_cqs)",
        "DispatchMemMap(const DispatchMemMap&)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/dispatch_query_manager.hpp": {
      "classes": [
        "DispatchQueryManager"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "DispatchQueryManager(const DispatchQueryManager&)",
        "DispatchQueryManager(DispatchQueryManager&& other)",
        "DispatchQueryManager(uint8_t num_hw_cqs)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/dispatch_settings.hpp": {
      "classes": [
        "DispatchSettings"
      ],
      "constants": [
        "PREFETCH_Q_LOG_MINSIZE",
        "MAX_DEV_CHANNEL_SIZE",
        "DISPATCH_GO_SIGNAL_NOC_DATA_ENTRIES",
        "PREFETCH_D_BUFFER_LOG_PAGE_SIZE",
        "MAX_NUM_HW_CQS",
        "BASE_PARTIAL_PAGE_SIZE_DISPATCH",
        "TRANSFER_PAGE_SIZE",
        "PREFETCH_D_BUFFER_BLOCKS",
        "DISPATCH_BUFFER_SIZE_BLOCKS",
        "DISPATCH_BUFFER_LOG_PAGE_SIZE",
        "DISPATCH_S_BUFFER_LOG_PAGE_SIZE",
        "LOG_TRANSFER_PAGE_SIZE",
        "GO_SIGNAL_BITS_PER_TXN_TYPE",
        "EVENT_PADDED_SIZE",
        "DISPATCH_MESSAGES_MAX_OFFSET",
        "FABRIC_HEADER_RB_ENTRIES",
        "DEVICES_PER_UMD_CHANNEL",
        "MAX_HUGEPAGE_SIZE",
        "DISPATCH_MESSAGE_ENTRIES"
      ],
      "enums": [
        "CoreType"
      ],
      "functions": [],
      "namespaces": [
        "tt"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/hardware_command_queue.hpp": {
      "classes": [
        "HWCommandQueue"
      ],
      "constants": [],
      "enums": [
        "NOC"
      ],
      "functions": [
        "void enqueue_command(T& command, bool blocking, tt::stl::Span<const SubDeviceId> sub_device_ids)",
        "HWCommandQueue(\n        IDevice* device,\n        std::shared_ptr<DispatchArray<LaunchMessageRingBufferState>>& worker_launch_message_buffer_state,\n        uint32_t id,\n        NOC noc_index,\n        uint32_t completion_queue_reader_core = 0)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [
        "void enqueue_command(T& command, bool blocking, tt::stl::Span<const SubDeviceId> sub_device_ids)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/host_runtime_commands.hpp": {
      "classes": [
        "EnqueueProgramCommand",
        "Command",
        "EnqueueTerminateCommand"
      ],
      "constants": [],
      "enums": [
        "NOC",
        "EnqueueCommandType",
        "CoreType"
      ],
      "functions": [
        "Command()",
        "EnqueueProgramCommand(\n        uint32_t command_queue_id,\n        IDevice* device,\n        NOC noc_index,\n        Program& program,\n        CoreCoord& dispatch_core,\n        SystemMemoryManager& manager,\n        WorkerConfigBufferMgr& config_buffer_mgr,\n        uint32_t expected_num_workers_completed,\n        uint32_t multicast_cores_launch_message_wptr,\n        uint32_t unicast_cores_launch_message_wptr,\n        SubDeviceId sub_device_id)",
        "EnqueueTerminateCommand(uint32_t command_queue_id, IDevice* device, SystemMemoryManager& manager)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/kernel_config/demux.hpp": {
      "classes": [
        "DemuxKernel"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "DemuxKernel(\n        int node_id, chip_id_t device_id, chip_id_t servicing_device_id, uint8_t cq_id, noc_selection_t noc_selection)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "demux_dependent_config_t",
        "demux_static_config_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/kernel_config/dispatch.hpp": {
      "classes": [
        "DispatchKernel"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "DispatchKernel(\n        int node_id,\n        chip_id_t device_id,\n        chip_id_t servicing_device_id,\n        uint8_t cq_id,\n        noc_selection_t noc_selection,\n        bool h_variant,\n        bool d_variant)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "dispatch_static_config_t",
        "dispatch_dependent_config_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/kernel_config/dispatch_s.hpp": {
      "classes": [
        "DispatchSKernel"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "DispatchSKernel(\n        int node_id, chip_id_t device_id, chip_id_t servicing_device_id, uint8_t cq_id, noc_selection_t noc_selection)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "dispatch_s_dependent_config_t",
        "dispatch_s_static_config_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/kernel_config/eth_router.hpp": {
      "classes": [
        "EthRouterKernel"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "EthRouterKernel(\n        int node_id,\n        chip_id_t device_id,\n        chip_id_t servicing_device_id,\n        uint8_t cq_id,\n        noc_selection_t noc_selection,\n        bool as_mux)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "eth_router_static_config_t",
        "eth_router_dependent_config_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/kernel_config/eth_tunneler.hpp": {
      "classes": [
        "EthTunnelerKernel"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "EthTunnelerKernel(\n        int node_id,\n        chip_id_t device_id,\n        chip_id_t servicing_device_id,\n        uint8_t cq_id,\n        noc_selection_t noc_selection,\n        bool is_remote)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "eth_tunneler_static_config_t",
        "eth_tunneler_dependent_config_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/kernel_config/fd_kernel.hpp": {
      "classes": [
        "FDKernel"
      ],
      "constants": [],
      "enums": [
        "NOC",
        "DispatchWorkerType",
        "CoreType",
        "FDKernelType"
      ],
      "functions": [
        "FDKernel(\n        int node_id, chip_id_t device_id, chip_id_t servicing_device_id, uint8_t cq_id, noc_selection_t noc_selection)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "TerminationInfo",
        "noc_selection_t",
        "FDKernelEdmConnectionAttributes"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/kernel_config/mux.hpp": {
      "classes": [
        "MuxKernel"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "MuxKernel(\n        int node_id, chip_id_t device_id, chip_id_t servicing_device_id, uint8_t cq_id, noc_selection_t noc_selection)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "mux_static_config_t",
        "mux_dependent_config_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/kernel_config/prefetch.hpp": {
      "classes": [
        "PrefetchKernel"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "PrefetchKernel(\n        int node_id,\n        chip_id_t device_id,\n        chip_id_t servicing_device_id,\n        uint8_t cq_id,\n        noc_selection_t noc_selection,\n        bool h_variant,\n        bool d_variant)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "prefetch_static_config_t",
        "prefetch_dependent_config_t"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/kernel_config/relay_mux.hpp": {
      "classes": [
        "RelayMux"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "void assemble_fabric_mux_client_config_args(\n    int node_id,\n    tt::tt_fabric::FabricMuxChannelType ch_type,\n    const RelayMux* fabric_mux,\n    relay_mux_client_config& config)",
        "int get_num_hops(chip_id_t mmio_dev_id, chip_id_t downstream_dev_id)",
        "RelayMux(\n        int node_id,\n        chip_id_t device_id,\n        chip_id_t servicing_device_id,\n        uint8_t cq_id,\n        noc_selection_t noc_selection,\n        bool d2h,\n        int tunnel_index)"
      ],
      "namespaces": [],
      "structs": [
        "relay_mux_client_config",
        "relay_mux_static_config"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/launch_message_ring_buffer_state.hpp": {
      "classes": [
        "LaunchMessageRingBufferState"
      ],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/memcpy.hpp": {
      "classes": [],
      "constants": [
        "inner_loop",
        "inner_blk_size"
      ],
      "enums": [],
      "functions": [
        "void memcpy_to_device(void* __restrict dst, const void* __restrict src, size_t n)",
        "void memcpy_to_device(\n    void* __restrict dst, const void* __restrict src, size_t n)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "void memcpy_to_device(void* __restrict dst, const void* __restrict src, size_t n)",
        "void memcpy_to_device(\n    void* __restrict dst, const void* __restrict src, size_t n)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/system_memory_cq_interface.hpp": {
      "classes": [],
      "constants": [
        "default_issue_queue_split",
        "id",
        "cq_start",
        "command_issue_region_size",
        "command_completion_region_size"
      ],
      "enums": [],
      "functions": [
        "SystemMemoryCQInterface(uint16_t channel, uint8_t cq_id, uint32_t cq_size, uint32_t cq_start)"
      ],
      "namespaces": [],
      "structs": [
        "SystemMemoryCQInterface"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/system_memory_manager.hpp": {
      "classes": [
        "SystemMemoryManager"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "SystemMemoryManager(chip_id_t device_id, uint8_t num_hw_cqs)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/topology.hpp": {
      "classes": [],
      "constants": [
        "k_dispatch_downstream_noc"
      ],
      "enums": [
        "DispatchWorkerType"
      ],
      "functions": [
        "void populate_fd_kernels(const std::vector<IDevice*>& devices, uint32_t num_hw_cqs)",
        "void configure_dispatch_cores(tt::tt_metal::IDevice* device)",
        "std::unique_ptr<tt::tt_metal::Program> create_and_compile_cq_program(tt::tt_metal::IDevice* device)",
        "void populate_fd_kernels(const std::vector<DispatchKernelNode>& nodes)",
        "void populate_fd_kernels(const std::set<chip_id_t>& device_ids, uint32_t num_hw_cqs)",
        "void configure_fabric_cores(tt::tt_metal::IDevice* device)",
        "void populate_cq_static_args(IDevice* device)",
        "std::unique_ptr<tt::tt_metal::Program> create_and_compile_fabric_program(tt::tt_metal::IDevice* device)"
      ],
      "namespaces": [],
      "structs": [
        "DispatchKernelNode"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/util/size_literals.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint32_t round_size(uint32_t sz, uint32_t alignment)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/dispatch/worker_config_buffer.hpp": {
      "classes": [
        "WorkerConfigBufferMgr"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "WorkerConfigBufferMgr()"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "ConfigBufferSync",
        "ConfigBufferEntry"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/event/dispatch.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void issue_record_event_commands(\n    IDevice* device,\n    uint32_t event_id,\n    uint8_t cq_id,\n    uint32_t num_command_queues,\n    SystemMemoryManager& manager,\n    tt::stl::Span<const SubDeviceId> sub_device_ids,\n    tt::stl::Span<const uint32_t> expected_num_workers_completed,\n    bool notify_host = true,\n    bool clear_count = false)",
        "void issue_wait_for_event_commands(\n    uint8_t cq_id, uint8_t event_cq_id, SystemMemoryManager& sysmem_manager, uint32_t event_id)",
        "ReadEventDescriptor(uint32_t event)",
        "void read_events_from_completion_queue(\n    ReadEventDescriptor& event_descriptor,\n    chip_id_t mmio_device_id,\n    uint16_t channel,\n    uint8_t cq_id,\n    SystemMemoryManager& sysmem_manager)"
      ],
      "namespaces": [
        "tt",
        "event_dispatch",
        "tt_metal"
      ],
      "structs": [
        "ReadEventDescriptor"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/flatbuffer/base_types_from_flatbuffer.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "NOC_MODE from_flatbuffer(flatbuffer::NOC_MODE in)",
        "Tile from_flatbuffer(const flatbuffer::Tile& tile_fb)",
        "DataMovementProcessor from_flatbuffer(flatbuffer::DataMovementProcessor in)",
        "Eth from_flatbuffer(flatbuffer::EthMode in)",
        "NOC from_flatbuffer(flatbuffer::NOC in)",
        "MathFidelity from_flatbuffer(flatbuffer::MathFidelity input)",
        "tt::DataFormat from_flatbuffer(flatbuffer::DataFormat input)",
        "UnpackToDestMode from_flatbuffer(flatbuffer::UnpackToDestMode input)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/flatbuffer/base_types_to_flatbuffer.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "flatbuffer::DataFormat to_flatbuffer(tt::DataFormat input)",
        "flatbuffer::EthMode to_flatbuffer(Eth in)",
        "flatbuffer::NOC to_flatbuffer(NOC in)",
        "flatbuffer::DataMovementProcessor to_flatbuffer(DataMovementProcessor in)",
        "flatbuffer::MathFidelity to_flatbuffer(MathFidelity input)",
        "flatbuffer::Tile to_flatbuffer(const Tile& tile)",
        "flatbuffer::NOC_MODE to_flatbuffer(NOC_MODE in)",
        "flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffer::Tile>>> to_flatbuffer(\n    const std::array<std::optional<Tile>, NUM_CIRCULAR_BUFFERS>& tiles, flatbuffers::FlatBufferBuilder& builder)",
        "flatbuffer::UnpackToDestMode to_flatbuffer(UnpackToDestMode input)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/flatbuffer/buffer_types_from_flatbuffer.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "CircularBufferConfig from_flatbuffer(\n    const flatbuffer::CircularBufferConfig* config_fb, const Buffer* shadow_global_buffer)",
        "ShardSpec from_flatbuffer(const flatbuffer::ShardSpec* spec)",
        "BufferType from_flatbuffer(flatbuffer::BufferType type)",
        "ShardMode from_flatbuffer(flatbuffer::ShardMode mode)",
        "ShardOrientation from_flatbuffer(flatbuffer::ShardOrientation orientation)",
        "std::optional<ShardSpecBuffer> from_flatbuffer(const flatbuffer::ShardSpecBuffer* fb_shard_spec)",
        "TensorMemoryLayout from_flatbuffer(flatbuffer::TensorMemoryLayout layout)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/flatbuffer/buffer_types_to_flatbuffer.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "flatbuffers::Offset<flatbuffer::ShardSpecBuffer> to_flatbuffer(\n    const std::optional<ShardSpecBuffer>& shard_parameters, ::flatbuffers::FlatBufferBuilder& builder)",
        "flatbuffers::Offset<flatbuffer::CircularBufferConfig> to_flatbuffer(\n    const CircularBufferConfig& config, flatbuffers::FlatBufferBuilder& builder)",
        "flatbuffer::BufferType to_flatbuffer(BufferType type)",
        "flatbuffers::Offset<flatbuffer::ShardSpec> to_flatbuffer(\n    const ShardSpec& spec, flatbuffers::FlatBufferBuilder& builder)",
        "flatbuffer::TensorMemoryLayout to_flatbuffer(TensorMemoryLayout layout)",
        "flatbuffer::ShardMode to_flatbuffer(ShardMode shard_mode)",
        "flatbuffer::ShardOrientation to_flatbuffer(ShardOrientation orientation)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/flatbuffer/program_types_from_flatbuffer.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "CoreRange from_flatbuffer(const flatbuffer::CoreRange* fb_core_range)",
        "DataMovementConfig from_flatbuffer(const flatbuffer::DataMovementConfig* fb_config)",
        "EthernetConfig from_flatbuffer(const flatbuffer::EthernetConfig* fb_config)",
        "CoreCoord from_flatbuffer(const flatbuffer::CoreCoord* fb_core_coord)",
        "ComputeConfig from_flatbuffer(const flatbuffer::ComputeConfig* fb_config)",
        "std::vector<SubDeviceId> from_flatbuffer(const flatbuffers::Vector<uint8_t>* fb_sub_device_ids)",
        "std::vector<CoreCoord> from_flatbuffer(\n    const flatbuffers::Vector<flatbuffers::Offset<flatbuffer::CoreCoord>>* core_spec_fbs)",
        "std::variant<CoreCoord, CoreRange, CoreRangeSet> core_spec_from_flatbuffer(const CommandType* cmd)",
        "CoreRangeSet from_flatbuffer(const flatbuffer::CoreRangeSet* fb_core_range_set)",
        "std::variant<DataMovementConfig, ComputeConfig, EthernetConfig> kernel_config_from_flatbuffer(const CommandType* cmd)",
        "std::vector<std::vector<uint32_t>> from_flatbuffer(\n    const flatbuffers::Vector<flatbuffers::Offset<flatbuffer::UInt32Vector>>* vec_of_vec_fbs)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "std::variant<DataMovementConfig, ComputeConfig, EthernetConfig> kernel_config_from_flatbuffer(const CommandType* cmd)",
        "std::variant<CoreCoord, CoreRange, CoreRangeSet> core_spec_from_flatbuffer(const CommandType* cmd)"
      ],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/flatbuffer/program_types_to_flatbuffer.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "std::pair<flatbuffer::KernelConfig, flatbuffers::Offset<void>> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const DataMovementConfig& config)",
        "std::pair<flatbuffer::KernelConfig, flatbuffers::Offset<void>> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const ReaderDataMovementConfig& config)",
        "std::pair<flatbuffer::KernelConfig, flatbuffers::Offset<void>> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const EthernetConfig& config)",
        "flatbuffers::Offset<flatbuffer::CoreRange> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const CoreRange& range)",
        "std::pair<flatbuffer::KernelConfig, flatbuffers::Offset<void>> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const WriterDataMovementConfig& config)",
        "std::pair<flatbuffer::KernelConfig, flatbuffers::Offset<void>> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const ComputeConfig& config)",
        "flatbuffers::Offset<flatbuffer::CoreCoord> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const CoreCoord& coord)",
        "FlatbufferCoreCoordVector to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const std::vector<CoreCoord>& core_spec)",
        "flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffer::RuntimeArg>>> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const std::shared_ptr<RuntimeArgs>& runtime_args)",
        "FlatbufferUInt32VecOfVec to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const std::vector<std::vector<uint32_t>>& vec_of_vec)",
        "std::pair<flatbuffer::KernelConfig, flatbuffers::Offset<void>> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder,\n    const std::variant<DataMovementConfig, ComputeConfig, EthernetConfig>& config)",
        "flatbuffers::Offset<flatbuffers::Vector<uint8_t>> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, tt::stl::Span<const SubDeviceId> sub_device_ids)",
        "std::pair<flatbuffer::CoreSpec, ::flatbuffers::Offset<void>> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec)",
        "flatbuffers::Offset<flatbuffer::RuntimeArg> create_runtime_arg(\n    flatbuffers::FlatBufferBuilder& builder, const std::variant<Buffer*, uint32_t>& arg)",
        "flatbuffers::Offset<flatbuffer::CoreRangeSet> to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const CoreRangeSet& range_set)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/lightmetal/host_api_capture_helpers.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void CaptureBufferDeallocate(const Buffer& buffer)",
        "void CaptureEnqueueProgram(CommandQueue& cq, Program& program, bool blocking)",
        "void CaptureSetRuntimeArgs(\n    IDevice* device,\n    const std::shared_ptr<Kernel>& kernel,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    const std::shared_ptr<RuntimeArgs>& runtime_args)",
        "void CaptureEnqueueTrace(CommandQueue& cq, uint32_t tid, bool blocking)",
        "void CaptureCreateCircularBuffer(\n    CBHandle& cb_handle,\n    Program& program,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    const CircularBufferConfig& config)",
        "void CaptureLightMetalCompare(\n    CommandQueue& cq,\n    std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>> buffer,\n    void* golden_data,\n    bool is_user_data)",
        "void CaptureProgramConstructor(Program& program)",
        "void CaptureReleaseTrace(IDevice* device, uint32_t tid)",
        "void CaptureFinish(CommandQueue& cq, tt::stl::Span<const SubDeviceId> sub_device_ids)",
        "void CaptureBufferCreate(\n    const std::shared_ptr<Buffer>& buffer,\n    IDevice* device,\n    const std::optional<DeviceAddr> address,  // Made optional to share with 2 variants.\n    DeviceAddr size,\n    DeviceAddr page_size,\n    const BufferType buffer_type,\n    const TensorMemoryLayout buffer_layout,\n    const std::optional<std::variant<ShardSpecBuffer, BufferDistributionSpec>>& shard_parameters,\n    const std::optional<bool> bottom_up,\n    const std::optional<SubDeviceId> sub_device_id)",
        "TraceScope()",
        "void CaptureLoadTrace(IDevice* device, const uint8_t cq_id, const uint32_t tid)",
        "void CaptureReplayTrace(IDevice* device, uint8_t cq_id, uint32_t tid, bool blocking)",
        "void CaptureSetRuntimeArgsUint32VecPerCore(\n    const Program& program,\n    KernelHandle kernel_id,\n    const std::vector<CoreCoord>& core_spec,\n    const std::vector<std::vector<uint32_t>>& runtime_args)",
        "void CaptureEnqueueWriteBuffer(\n    CommandQueue& cq,\n    std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>> buffer,\n    HostDataType src,\n    bool blocking)",
        "void CaptureEnqueueReadBuffer(\n    CommandQueue& cq,\n    std::variant<std::reference_wrapper<Buffer>, std::shared_ptr<Buffer>> buffer,\n    void* dst,\n    bool blocking)",
        "void CaptureBufferDelete(const Buffer& buffer)",
        "void CaptureSetRuntimeArgsUint32(\n    const Program& program,\n    KernelHandle kernel_id,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    tt::stl::Span<const uint32_t> runtime_args)",
        "void CaptureCreateKernel(\n    KernelHandle kernel_id,\n    Program& program,\n    const std::string& file_name,\n    const std::variant<CoreCoord, CoreRange, CoreRangeSet>& core_spec,\n    const std::variant<DataMovementConfig, ComputeConfig, EthernetConfig>& config)"
      ],
      "namespaces": [],
      "structs": [
        "TraceScope"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/lightmetal/lightmetal_capture.hpp": {
      "classes": [
        "LightMetalCaptureContext"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "TraceDescriptorByTraceIdOffset to_flatbuffer(\n    flatbuffers::FlatBufferBuilder& builder, const TraceDescriptor& trace_desc, uint32_t trace_id)",
        "LightMetalCaptureContext()",
        "LightMetalCaptureContext(const LightMetalCaptureContext&)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/lightmetal/lightmetal_replay_impl.hpp": {
      "classes": [
        "LightMetalReplayImpl"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "LightMetalReplayImpl(LightMetalBinary&& binary, IDevice* device)"
      ],
      "namespaces": [
        "detail"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/profiler/profiler.hpp": {
      "classes": [
        "DeviceProfiler"
      ],
      "constants": [
        "state",
        "data_source",
        "UnidentifiedZoneDetails"
      ],
      "enums": [
        "ARCH"
      ],
      "functions": [
        "DeviceProfiler()",
        "DeviceProfiler(const IDevice* device, const bool new_logs)",
        "void write_control_buffer_to_core(\n    IDevice* device,\n    const CoreCoord& core,\n    const HalProgrammableCoreType core_type,\n    const ProfilerDumpState state,\n    const std::vector<uint32_t>& control_buffer)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "pair_hash",
        "ZoneDetails",
        "DisptachMetaData"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": [
        "std::chrono::steady_clock",
        "std::chrono::duration",
        "std::chrono::nanoseconds",
        "std::chrono::duration_cast"
      ]
    },
    "tt_metal/impl/profiler/profiler_paths.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "std::string get_profiler_artifacts_dir()",
        "std::string get_profiler_logs_dir()"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/profiler/profiler_state.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "bool getDeviceProfilerState()"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/program/dispatch.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "CoreType",
        "ProgramBinaryStatus"
      ],
      "functions": [
        "void update_traced_program_dispatch_commands(\n    const TraceNode& node,\n    ProgramCommandSequence& cached_program_command_sequence,\n    uint32_t multicast_cores_launch_message_wptr,\n    uint32_t unicast_cores_launch_message_wptr,\n    uint32_t expected_num_workers_completed,\n    CoreCoord dispatch_core,\n    CoreType dispatch_core_type,\n    SubDeviceId sub_device_id,\n    ProgramBinaryStatus program_binary_status,\n    std::pair<bool, int> unicast_go_signal_update = {false, -1})",
        "TraceNode create_trace_node(detail::ProgramImpl& program, IDevice* device)",
        "uint32_t finalize_rt_args(\n    std::unordered_map<KernelHandle, std::shared_ptr<Kernel>>& kernels,\n    std::vector<std::shared_ptr<KernelGroup>>& kernel_groups,\n    uint32_t base_offset,\n    uint32_t programmable_core_type_index,\n    uint32_t& rta_offset,\n    std::array<uint32_t, DISPATCH_CLASS_MAX>& crta_offsets,\n    std::array<uint32_t, DISPATCH_CLASS_MAX>& crta_sizes)",
        "void reset_worker_dispatch_state_on_device(\n    IDevice* device,\n    SystemMemoryManager& manager,\n    uint8_t cq_id,\n    CoreCoord dispatch_core,\n    const DispatchArray<uint32_t>& expected_num_workers_completed,\n    bool reset_launch_msg_state)",
        "void insert_empty_program_dispatch_preamble_cmd(ProgramCommandSequence& program_command_sequence)",
        "void initialize_worker_config_buf_mgr(WorkerConfigBufferMgr& config_buffer_mgr)",
        "void reset_config_buf_mgrs_and_expected_workers(\n    DispatchArray<WorkerConfigBufferMgr>& config_buffer_mgrs,\n    DispatchArray<uint32_t>& expected_num_workers_completed,\n    uint32_t num_entries_to_reset,\n    uint32_t worker_l1_unreserved_start)",
        "uint32_t finalize_kernel_bins(\n    IDevice* device,\n    uint32_t programmable_core_type_index,\n    const std::unordered_map<KernelHandle, std::shared_ptr<Kernel>>& kernels,\n    std::vector<std::shared_ptr<KernelGroup>>& kernel_groups,\n    uint32_t base_offset,\n    uint32_t& kernel_text_offset,\n    uint32_t& kernel_text_size)",
        "uint32_t configure_rta_offsets_for_kernel_groups(\n    uint32_t programmable_core_type_index,\n    std::unordered_map<KernelHandle, std::shared_ptr<Kernel>>& kernels,\n    std::vector<std::shared_ptr<KernelGroup>>& kernel_groups,\n    uint32_t base_offset)",
        "void insert_stall_cmds(ProgramCommandSequence& program_command_sequence, SubDeviceId sub_device_id, IDevice* device)",
        "uint32_t finalize_cbs(\n    uint32_t programmable_core_type_index,\n    std::vector<std::shared_ptr<KernelGroup>>& kernel_groups,\n    uint32_t base_offset,\n    uint32_t& cb_offset,\n    uint32_t& cb_size,\n    uint32_t& local_cb_size)",
        "uint32_t finalize_sems(\n    uint32_t programmable_core_type_index,\n    uint32_t sem_base_offset,\n    const std::vector<Semaphore>& semaphores,\n    uint32_t& semaphore_offset,\n    uint32_t& semaphore_size)",
        "void reserve_space_in_kernel_config_buffer(\n    WorkerConfigBufferMgr& config_buffer_mgr,\n    const std::vector<uint32_t>& program_config_sizes,\n    ProgramBinaryStatus program_binary_status,\n    uint32_t num_program_workers,\n    uint32_t expected_num_workers_completed,\n    ProgramDispatchMetadata& dispatch_md)",
        "KernelHandle get_device_local_kernel_handle(KernelHandle kernel_handle)",
        "void write_program_command_sequence(\n    const ProgramCommandSequence& program_command_sequence,\n    SystemMemoryManager& manager,\n    uint32_t command_queue_id,\n    CoreType dispatch_core_type,\n    bool stall_first,\n    bool stall_before_program,\n    bool send_binary = true)",
        "void update_program_dispatch_commands(\n    detail::ProgramImpl& program,\n    ProgramCommandSequence& cached_program_command_sequence,\n    uint32_t multicast_cores_launch_message_wptr,\n    uint32_t unicast_cores_launch_message_wptr,\n    uint32_t expected_num_workers_completed,\n    CoreCoord dispatch_core,\n    CoreType dispatch_core_type,\n    SubDeviceId sub_device_id,\n    const ProgramDispatchMetadata& dispatch_md,\n    ProgramBinaryStatus program_binary_status,\n    std::pair<bool, int> unicast_go_signal_update = {false, -1})",
        "void set_num_worker_sems_on_dispatch(\n    IDevice* device, SystemMemoryManager& manager, uint8_t cq_id, uint32_t num_worker_sems)",
        "void set_go_signal_noc_data_on_dispatch(\n    IDevice* device, const vector_aligned<uint32_t>& go_signal_noc_data, SystemMemoryManager& manager, uint8_t cq_id)",
        "uint32_t configure_crta_offsets_for_kernel_groups(\n    uint32_t programmable_core_type_index,\n    std::unordered_map<KernelHandle, std::shared_ptr<Kernel>>& kernels,\n    std::vector<std::shared_ptr<KernelGroup>>& kernel_groups,\n    uint32_t crta_base_offset,\n    std::array<uint32_t, DISPATCH_CLASS_MAX>& crta_offsets,\n    std::array<uint32_t, DISPATCH_CLASS_MAX>& crta_sizes)"
      ],
      "namespaces": [
        "tt",
        "program_dispatch",
        "tt_metal"
      ],
      "structs": [
        "ProgramDispatchMetadata"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/program/program_command_sequence.hpp": {
      "classes": [],
      "constants": [
        "UncachedStallSequenceIdx",
        "is_multicast",
        "CachedStallSequenceIdx"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [
        "ProgramCommandSequence",
        "RtaUpdate",
        "LaunchMsgData"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/program/program_device_map.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "std::vector<multicast_transfer_info> extract_dst_noc_multicast_info(\n    IDevice* device, const std::vector<CoreRange>& ranges, const CoreType core_type)"
      ],
      "namespaces": [],
      "structs": [
        "multicast_transfer_info",
        "transfer_info",
        "ProgramTransferInfo",
        "kernel_bins_transfer_info"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/program/program_impl.hpp": {
      "classes": [
        "ProgramImpl"
      ],
      "constants": [
        "core_to_kernel_group_invalid_index"
      ],
      "enums": [],
      "functions": [
        "ProgramImpl()",
        "std::shared_ptr<CircularBuffer> GetCircularBuffer(const Program& program, CBHandle id)",
        "KernelGroup(\n        const detail::ProgramImpl& program,\n        uint32_t programmable_core_type_index,\n        kernel_id_array_t kernel_ids,\n        bool erisc_is_idle,\n        uint32_t max_local_cb_end_index,\n        uint32_t min_remote_cb_start_index,\n        const CoreRangeSet& new_ranges)",
        "CircularBufferAllocator(const CoreRange& core_range_)",
        "ProgramImpl(ProgramImpl&& other)",
        "KernelHandle AddKernel(\n        Program& program, const std::shared_ptr<Kernel>& kernel, const HalProgrammableCoreType core_type)",
        "void assemble_device_commands(\n    ProgramCommandSequence& program_command_sequence,\n    detail::ProgramImpl& program,\n    IDevice* device,\n    SubDeviceId sub_device_id)",
        "void ValidateCircularBufferRegion(const Program& program, const IDevice* device)",
        "ProgramImpl(const ProgramImpl& other)",
        "KernelGroup()"
      ],
      "namespaces": [
        "tt",
        "detail",
        "experimental",
        "tt_metal",
        "program_dispatch"
      ],
      "structs": [
        "ProgramConfig",
        "KernelGroup",
        "CircularBufferAllocator",
        "ProgramOffsetsState"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/sub_device/sub_device_manager.hpp": {
      "classes": [
        "SubDeviceManager"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "SubDeviceManager(\n        IDevice* device, std::unique_ptr<Allocator>&& global_allocator, tt::stl::Span<const SubDevice> sub_devices)",
        "SubDeviceManager(SubDeviceManager&& other)",
        "SubDeviceManager(tt::stl::Span<const SubDevice> sub_devices, DeviceAddr local_l1_size, IDevice* device)",
        "SubDeviceManager(const SubDeviceManager& other)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/sub_device/sub_device_manager_tracker.hpp": {
      "classes": [
        "SubDeviceManagerTracker"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "SubDeviceManagerTracker(SubDeviceManagerTracker&& other)",
        "SubDeviceManagerTracker(\n        IDevice* device, std::unique_ptr<Allocator>&& global_allocator, tt::stl::Span<const SubDevice> sub_devices)",
        "SubDeviceManagerTracker(const SubDeviceManagerTracker& other)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/trace/dispatch.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "uint32_t compute_trace_cmd_size(uint32_t num_sub_devices)",
        "void update_worker_state_post_trace_execution(\n    const std::unordered_map<SubDeviceId, TraceWorkerDescriptor>& trace_worker_descriptors,\n    DispatchArray<LaunchMessageRingBufferState>& worker_launch_message_buffer_state,\n    DispatchArray<WorkerConfigBufferMgr>& config_buffer_mgr,\n    DispatchArray<uint32_t>& expected_num_workers_completed)",
        "TraceDispatchMetadata(\n        uint32_t cmd_size,\n        std::unordered_map<SubDeviceId, TraceWorkerDescriptor>& descriptors,\n        std::vector<SubDeviceId>& sub_devices,\n        uint32_t buf_page_size,\n        uint32_t buf_num_pages,\n        uint32_t buf_address)",
        "void issue_trace_commands(\n    IDevice* device,\n    SystemMemoryManager& sysmem_manager,\n    const TraceDispatchMetadata& dispatch_md,\n    uint8_t cq_id,\n    const DispatchArray<uint32_t>& expected_num_workers_completed,\n    CoreCoord dispatch_core)",
        "std::size_t compute_interleaved_trace_buf_page_size(uint32_t buf_size, const uint32_t num_banks)",
        "void reset_host_dispatch_state_for_trace(\n    uint32_t num_sub_devices,\n    DispatchArray<LaunchMessageRingBufferState>& worker_launch_message_buffer_state,\n    DispatchArray<uint32_t>& expected_num_workers_completed,\n    DispatchArray<WorkerConfigBufferMgr>& config_buffer_mgr,\n    DispatchArray<LaunchMessageRingBufferState>& worker_launch_message_buffer_state_reset,\n    DispatchArray<uint32_t>& expected_num_workers_completed_reset,\n    DispatchArray<WorkerConfigBufferMgr>& config_buffer_mgr_reset)",
        "void load_host_dispatch_state(\n    uint32_t num_sub_devices,\n    DispatchArray<LaunchMessageRingBufferState>& worker_launch_message_buffer_state,\n    DispatchArray<uint32_t>& expected_num_workers_completed,\n    DispatchArray<WorkerConfigBufferMgr>& config_buffer_mgr,\n    DispatchArray<LaunchMessageRingBufferState>& worker_launch_message_buffer_state_reset,\n    DispatchArray<uint32_t>& expected_num_workers_completed_reset,\n    DispatchArray<WorkerConfigBufferMgr>& config_buffer_mgr_reset)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "TraceDispatchMetadata"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/trace/trace.hpp": {
      "classes": [
        "Trace"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "Trace()"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/trace/trace_buffer.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "TraceBuffer(std::shared_ptr<TraceDescriptor> desc, std::shared_ptr<Buffer> buffer)"
      ],
      "namespaces": [],
      "structs": [
        "TraceDescriptor",
        "TraceWorkerDescriptor",
        "TraceBuffer"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "tt_metal/impl/trace/trace_node.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [
        "TraceDispatchMetadata",
        "TraceNode"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/async_runtime.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void wait_for_event(tt::tt_metal::CommandQueue& cq, const std::shared_ptr<tt::tt_metal::Event>& event)",
        "void queue_synchronize(tt::tt_metal::distributed::MeshCommandQueue& cq)",
        "void record_event(tt::tt_metal::CommandQueue& cq, const std::shared_ptr<tt::tt_metal::Event>& event)",
        "void event_synchronize(const tt::tt_metal::distributed::MeshEvent& event)",
        "void wait_for_event(tt::tt_metal::distributed::MeshCommandQueue& cq, const tt::tt_metal::distributed::MeshEvent& event)",
        "void queue_synchronize(tt::tt_metal::CommandQueue& cq)",
        "void read_buffer(\n    QueueId cq_id,\n    Tensor& src,\n    std::vector<std::shared_ptr<void>> dst,\n    const std::optional<tt::tt_metal::BufferRegion>& region = std::nullopt,\n    size_t src_offset = 0,\n    bool blocking = true)",
        "void write_buffer(\n    QueueId cq_id,\n    Tensor& dst,\n    std::vector<std::shared_ptr<void>> src,\n    const std::optional<tt::tt_metal::BufferRegion>& region = std::nullopt)",
        "tt::tt_metal::distributed::MeshEvent record_event_to_host(tt::tt_metal::distributed::MeshCommandQueue& cq)",
        "tt::tt_metal::distributed::MeshEvent record_event(tt::tt_metal::distributed::MeshCommandQueue& cq)",
        "void event_synchronize(const std::shared_ptr<tt::tt_metal::Event>& event)"
      ],
      "namespaces": [
        "ttnn"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/cluster.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "std::string serialize_cluster_descriptor()"
      ],
      "namespaces": [
        "cluster",
        "ttnn"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/common/queue_id.hpp": {
      "classes": [],
      "constants": [
        "DefaultQueueId"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [
        "ttnn"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/config.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "std::optional<std::filesystem::path> get()",
        "Config(auto&&... args)",
        "auto get()",
        "void set(const T& value)"
      ],
      "namespaces": [
        "core",
        "ttnn"
      ],
      "structs": [
        "Config",
        "attributes_t"
      ],
      "template_functions": [
        "std::optional<std::filesystem::path> get()",
        "auto get()",
        "void set(const T& value)"
      ],
      "typedefs": [],
      "usings": [
        "core::CONFIG",
        "core::Config"
      ]
    },
    "ttnn/api/ttnn/core.hpp": {
      "classes": [
        "CoreIDs"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "void segfault_handler(int sig)",
        "void dump_stack_trace_on_segfault()",
        "void set_printoptions(const std::string& profile)",
        "CoreIDs()",
        "std::optional<ttnn::MemoryConfig> get_memory_config(const ttnn::Tensor& tensor)",
        "bool has_storage_type_of(const ttnn::Tensor& tensor, const ttnn::StorageType& storage_type)"
      ],
      "namespaces": [
        "core",
        "ttnn"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": [
        "core::get_memory_config",
        "core::has_storage_type_of",
        "core::set_printoptions"
      ]
    },
    "ttnn/api/ttnn/decorators.hpp": {
      "classes": [],
      "constants": [
        "namespace_substring",
        "operation",
        "is_primitive"
      ],
      "enums": [],
      "functions": [
        "std::string base_name(const std::string& cpp_fully_qualified_name)",
        "auto get(operation_key_t<operation_t>)",
        "auto traced_invoke(args_t&&... args)",
        "auto invoke(args_t&&... args)",
        "auto invoke_composite(args_t&&... args)",
        "std::string class_name(const std::string& cpp_fully_qualified_name)",
        "auto register_operation_impl()",
        "auto register_operation()",
        "auto get(operation_name_key_t<cpp_fully_qualified_name>)",
        "void log(const std::string& prefix, args_t&&... args)",
        "void assert_operation_in_correct_namespace()",
        "std::string python_fully_qualified_name(const std::string& cpp_fully_qualified_name)",
        "auto invoke(QueueId queue_id, args_t&&... args)"
      ],
      "namespaces": [
        "detail",
        "ttnn",
        "decorators"
      ],
      "structs": [
        "operation_name_key_t",
        "registered_operation_t",
        "set_operation_t",
        "operation_key_t"
      ],
      "template_functions": [
        "auto traced_invoke(args_t&&... args)",
        "auto invoke(args_t&&... args)",
        "auto invoke_composite(args_t&&... args)",
        "auto register_operation_impl()",
        "auto register_operation()",
        "void log(const std::string& prefix, args_t&&... args)",
        "void assert_operation_in_correct_namespace()",
        "auto invoke(QueueId queue_id, args_t&&... args)"
      ],
      "typedefs": [],
      "usings": [
        "ttnn::decorators::register_operation"
      ]
    },
    "ttnn/api/ttnn/device.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void deallocate_buffers(IDevice* device)",
        "void enable_program_cache(IDevice& device)",
        "void close_device(IDevice& device)",
        "bool is_wormhole_or_blackhole(tt::ARCH arch)",
        "std::shared_ptr<MeshDevice> open_mesh_device(\n    int device_id,\n    size_t l1_small_size = DEFAULT_L1_SMALL_SIZE,\n    size_t trace_region_size = DEFAULT_TRACE_REGION_SIZE,\n    const tt::tt_metal::DispatchCoreConfig& dispatch_core_config = tt::tt_metal::DispatchCoreConfig{},\n    size_t worker_l1_size = DEFAULT_WORKER_L1_SIZE)",
        "void disable_and_clear_program_cache(IDevice& device)"
      ],
      "namespaces": [
        "ttnn",
        "device"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/device_operation.hpp": {
      "classes": [],
      "constants": [
        "USE_FAST_DISPATCH"
      ],
      "enums": [],
      "functions": [
        "auto get_operation_name(const typename device_operation_t::operation_attributes_t& operation_attributes)",
        "void dispatch_to_mesh_workload_factory(const ProgramFactory& program_factory, const Fn& fn)",
        "typename device_operation_t::tensor_return_value_t invoke(\n    QueueId cq_id,\n    const typename device_operation_t::operation_attributes_t& operation_attributes,\n    const typename device_operation_t::tensor_args_t& tensor_args)",
        "void launch_operation_with_adapter(\n    QueueId cq_id,\n    const typename mesh_device_operation_t::operation_attributes_t& operation_attributes,\n    const typename mesh_device_operation_t::tensor_args_t& tensor_args,\n    typename mesh_device_operation_t::tensor_return_value_t& tensor_return_value,\n    ttnn::MeshDevice* mesh_device)",
        "void create_and_cache_mesh_workload(\n    QueueId cq_id,\n    const typename mesh_device_operation_t::operation_attributes_t& operation_attributes,\n    const typename mesh_device_operation_t::tensor_args_t& tensor_args,\n    typename mesh_device_operation_t::tensor_return_value_t& tensor_return_value,\n    ttnn::MeshDevice* mesh_device,\n    tt::tt_metal::program_cache::detail::ProgramCache& program_cache,\n    tt::stl::hash::hash_t program_hash)",
        "void enqueue_mesh_workload(\n    QueueId cq_id,\n    const typename mesh_device_operation_t::operation_attributes_t& operation_attributes,\n    const typename mesh_device_operation_t::tensor_args_t& tensor_args,\n    typename mesh_device_operation_t::tensor_return_value_t& tensor_return_value,\n    distributed::MeshDevice* mesh_device,\n    tt::tt_metal::distributed::MeshWorkload& workload)",
        "void handle_mesh_adapter_cache_hit(\n    QueueId cq_id,\n    const typename mesh_device_operation_t::operation_attributes_t& operation_attributes,\n    const typename mesh_device_operation_t::tensor_args_t& tensor_args,\n    typename mesh_device_operation_t::tensor_return_value_t& tensor_return_value,\n    ttnn::MeshDevice* mesh_device,\n    tt::tt_metal::program_cache::detail::ProgramCache& program_cache,\n    tt::stl::hash::hash_t program_hash)",
        "typename device_operation_t::tensor_return_value_t launch_on_single_device(\n    QueueId cq_id,\n    const typename device_operation_t::operation_attributes_t& operation_attributes,\n    const typename device_operation_t::tensor_args_t& tensor_args)",
        "auto compute_program_hash(\n    const typename device_operation_t::operation_attributes_t& operation_attributes,\n    const typename device_operation_t::tensor_args_t& tensor_args)",
        "void log_operation(\n    std::size_t device_id,\n    const typename device_operation_t::operation_attributes_t& operation_attributes,\n    const typename device_operation_t::tensor_args_t& tensor_args,\n    tt::stl::hash::hash_t program_hash,\n    bool program_cache_hit)",
        "std::variant<Ts...> map_index_to_variant(std::size_t i, std::variant<Ts...>)",
        "void launch_on_worker_thread(\n    ttnn::QueueId cq_id,\n    const typename device_operation_t::operation_attributes_t& operation_attributes,\n    const typename device_operation_t::tensor_args_t& tensor_args,\n    typename device_operation_t::tensor_return_value_t& tensor_return_value,\n    tt::tt_metal::IDevice* device)"
      ],
      "namespaces": [
        "detail",
        "ttnn",
        "device_operation"
      ],
      "structs": [
        "CheckDeviceBufferIsAllocated"
      ],
      "template_functions": [
        "auto get_operation_name(const typename device_operation_t::operation_attributes_t& operation_attributes)",
        "void dispatch_to_mesh_workload_factory(const ProgramFactory& program_factory, const Fn& fn)",
        "typename device_operation_t::tensor_return_value_t invoke(\n    QueueId cq_id,\n    const typename device_operation_t::operation_attributes_t& operation_attributes,\n    const typename device_operation_t::tensor_args_t& tensor_args)",
        "void launch_operation_with_adapter(\n    QueueId cq_id,\n    const typename mesh_device_operation_t::operation_attributes_t& operation_attributes,\n    const typename mesh_device_operation_t::tensor_args_t& tensor_args,\n    typename mesh_device_operation_t::tensor_return_value_t& tensor_return_value,\n    ttnn::MeshDevice* mesh_device)",
        "void create_and_cache_mesh_workload(\n    QueueId cq_id,\n    const typename mesh_device_operation_t::operation_attributes_t& operation_attributes,\n    const typename mesh_device_operation_t::tensor_args_t& tensor_args,\n    typename mesh_device_operation_t::tensor_return_value_t& tensor_return_value,\n    ttnn::MeshDevice* mesh_device,\n    tt::tt_metal::program_cache::detail::ProgramCache& program_cache,\n    tt::stl::hash::hash_t program_hash)",
        "void enqueue_mesh_workload(\n    QueueId cq_id,\n    const typename mesh_device_operation_t::operation_attributes_t& operation_attributes,\n    const typename mesh_device_operation_t::tensor_args_t& tensor_args,\n    typename mesh_device_operation_t::tensor_return_value_t& tensor_return_value,\n    distributed::MeshDevice* mesh_device,\n    tt::tt_metal::distributed::MeshWorkload& workload)",
        "void handle_mesh_adapter_cache_hit(\n    QueueId cq_id,\n    const typename mesh_device_operation_t::operation_attributes_t& operation_attributes,\n    const typename mesh_device_operation_t::tensor_args_t& tensor_args,\n    typename mesh_device_operation_t::tensor_return_value_t& tensor_return_value,\n    ttnn::MeshDevice* mesh_device,\n    tt::tt_metal::program_cache::detail::ProgramCache& program_cache,\n    tt::stl::hash::hash_t program_hash)",
        "typename device_operation_t::tensor_return_value_t launch_on_single_device(\n    QueueId cq_id,\n    const typename device_operation_t::operation_attributes_t& operation_attributes,\n    const typename device_operation_t::tensor_args_t& tensor_args)",
        "auto compute_program_hash(\n    const typename device_operation_t::operation_attributes_t& operation_attributes,\n    const typename device_operation_t::tensor_args_t& tensor_args)",
        "void log_operation(\n    std::size_t device_id,\n    const typename device_operation_t::operation_attributes_t& operation_attributes,\n    const typename device_operation_t::tensor_args_t& tensor_args,\n    tt::stl::hash::hash_t program_hash,\n    bool program_cache_hit)",
        "std::variant<Ts...> map_index_to_variant(std::size_t i, std::variant<Ts...>)",
        "void launch_on_worker_thread(\n    ttnn::QueueId cq_id,\n    const typename device_operation_t::operation_attributes_t& operation_attributes,\n    const typename device_operation_t::tensor_args_t& tensor_args,\n    typename device_operation_t::tensor_return_value_t& tensor_return_value,\n    tt::tt_metal::IDevice* device)"
      ],
      "typedefs": [],
      "usings": [
        "::tt::tt_metal::program_cache::detail::CachedProgramFactory"
      ]
    },
    "ttnn/api/ttnn/distributed/api.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "std::vector<Tensor> get_device_tensors(const Tensor& tensor)",
        "Tensor aggregate_as_tensor(\n    const std::vector<Tensor>& tensor_shards, const tt::tt_metal::DistributedTensorConfig& config)",
        "void close_mesh_device(const std::shared_ptr<MeshDevice>& mesh_device)",
        "std::shared_ptr<MeshDevice> open_mesh_device(\n    const MeshShape& mesh_shape,\n    size_t l1_small_size,\n    size_t trace_region_size,\n    size_t num_command_queues,\n    const tt::tt_metal::DispatchCoreConfig& dispatch_core_config,\n    const std::optional<MeshCoordinate>& offset = std::nullopt,\n    const std::vector<int>& physical_device_ids = {},\n    size_t worker_l1_size = DEFAULT_WORKER_L1_SIZE)",
        "std::vector<int> get_t3k_physical_device_ids_ring()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/distributed/distributed_pybind.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void py_module(py::module& module)",
        "void py_module_types(py::module& module)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/distributed/distributed_tensor.hpp": {
      "classes": [
        "TensorToMesh",
        "MeshToTensor"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "Tensor aggregate_tensor(const Tensor& tensor, const MeshToTensor& composer)",
        "Tensor distribute_tensor(\n    const Tensor& tensor,\n    const TensorToMesh& mapper,\n    std::optional<std::reference_wrapper<MeshDevice>> mesh_device = std::nullopt)",
        "std::unique_ptr<TensorToMesh> replicate_tensor_to_mesh_mapper(MeshDevice& mesh_device)",
        "std::unique_ptr<MeshToTensor> concat_mesh_to_tensor_composer(MeshDevice& mesh_device, int dim)",
        "std::unique_ptr<TensorToMesh> create_mesh_mapper(\n    MeshDevice& mesh_device,\n    const MeshMapperConfig& config,\n    const std::optional<ttnn::MeshShape>& shape = std::nullopt)",
        "std::unique_ptr<TensorToMesh> shard_tensor_to_mesh_mapper(MeshDevice& mesh_device, int dim)",
        "std::unique_ptr<MeshToTensor> create_mesh_composer(\n    MeshDevice& mesh_device,\n    const MeshComposerConfig& config,\n    const std::optional<ttnn::MeshShape>& shape = std::nullopt)"
      ],
      "namespaces": [],
      "structs": [
        "Replicate",
        "MeshComposerConfig",
        "MeshMapperConfig",
        "Shard"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/distributed/distributed_tensor_config.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "ReplicateTensor(int replication_factor)",
        "ShardTensor2D(ShardMesh mesh)",
        "DistributedTensorConfig get_distributed_tensor_config(const std::unordered_map<std::string, std::string>& metadata)",
        "ShardTensor(int shard_dimension)",
        "ReplicateTensor()"
      ],
      "namespaces": [],
      "structs": [
        "ShardMesh",
        "ReplicateTensor",
        "ShardTensor",
        "ShardTensor2D",
        "AllGatherTensor"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/distributed/types.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [
        "ttnn"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": [
        "ttnn::distributed::MeshCoordinateRange",
        "ttnn::distributed::MeshCoordinateRangeSet",
        "ttnn::distributed::MeshDeviceConfig",
        "ttnn::distributed::MeshShape",
        "ttnn::distributed::MeshDevice",
        "ttnn::distributed::MeshCoordinate",
        "ttnn::distributed::SystemMesh",
        "ttnn::distributed::MeshDeviceView"
      ]
    },
    "ttnn/api/ttnn/events.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "std::shared_ptr<tt::tt_metal::Event> record_event(\n    tt::tt_metal::IDevice* device, QueueId cq_id, const std::vector<tt::tt_metal::SubDeviceId>& sub_device_ids = {})",
        "void event_synchronize(const MeshEvent& event)",
        "void wait_for_event(QueueId cq_id, const MultiDeviceEvent& event)",
        "MeshEvent record_mesh_event(\n    MeshDevice* mesh_device,\n    QueueId cq_id,\n    const std::vector<tt::tt_metal::SubDeviceId>& sub_device_ids = {},\n    const std::optional<ttnn::MeshCoordinateRange>& device_range = std::nullopt)",
        "void wait_for_event(QueueId cq_id, const std::shared_ptr<tt::tt_metal::Event>& event)",
        "MultiDeviceEvent record_event(\n    MeshDevice* mesh_device, QueueId cq_id, const std::vector<tt::tt_metal::SubDeviceId>& sub_device_ids = {})",
        "void wait_for_mesh_event(QueueId cq_id, const MeshEvent& event)"
      ],
      "namespaces": [
        "ttnn",
        "events"
      ],
      "structs": [
        "MultiDeviceEvent"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/global_circular_buffer.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "GlobalCircularBuffer create_global_circular_buffer(\n    MeshDevice* mesh_device,\n    const std::vector<std::pair<CoreCoord, CoreRangeSet>>& sender_receiver_core_mapping,\n    uint32_t size,\n    BufferType buffer_type = BufferType::L1)",
        "GlobalCircularBuffer create_global_circular_buffer(\n    IDevice* device,\n    const std::vector<std::pair<CoreCoord, CoreRangeSet>>& sender_receiver_core_mapping,\n    uint32_t size,\n    BufferType buffer_type = BufferType::L1)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/global_semaphore.hpp": {
      "classes": [],
      "constants": [
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "GlobalSemaphore create_global_semaphore(\n    IDevice* device, const CoreRangeSet& cores, uint32_t initial_value, BufferType buffer_type = BufferType::L1)",
        "MultiDeviceGlobalSemaphore create_global_semaphore(\n    const std::vector<IDevice*>& devices,\n    const CoreRangeSet& cores,\n    uint32_t initial_value,\n    BufferType buffer_type = BufferType::L1)",
        "void reset_global_semaphore_value(const MultiDeviceGlobalSemaphore& global_semaphore, uint32_t reset_value)",
        "void reset_global_semaphore_value(const GlobalSemaphore& global_semaphore, uint32_t reset_value)",
        "MultiDeviceGlobalSemaphore create_global_semaphore_with_same_address(\n    const std::vector<IDevice*>& devices,\n    const CoreRangeSet& cores,\n    uint32_t initial_value,\n    BufferType buffer_type,\n    uint32_t attempts,\n    bool search_max = false)",
        "GlobalSemaphore create_global_semaphore(\n    MeshDevice* mesh_device,\n    const CoreRangeSet& cores,\n    uint32_t initial_value,\n    BufferType buffer_type = BufferType::L1)",
        "MultiDeviceGlobalSemaphore(size_t num_devices)",
        "std::vector<tt::tt_metal::DeviceAddr> get_global_semaphore_address(const MultiDeviceGlobalSemaphore& global_semaphore)",
        "tt::tt_metal::DeviceAddr get_global_semaphore_address(const GlobalSemaphore& global_semaphore)"
      ],
      "namespaces": [],
      "structs": [
        "MultiDeviceGlobalSemaphore"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/graph/graph_argument_serializer.hpp": {
      "classes": [
        "GraphArgumentSerializer"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "std::string graph_demangle(const std::string_view name)",
        "void register_optional_type()",
        "void register_small_vector()",
        "void register_type()",
        "GraphArgumentSerializer()"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "void register_optional_type()",
        "void register_type()",
        "void register_small_vector()"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/graph/graph_consts.hpp": {
      "classes": [],
      "constants": [
        "kArguments",
        "kType",
        "kNodeCaptureStart",
        "kNodeCBDeallocateAll",
        "kNodeFunctionStart",
        "kTensorId",
        "kSize",
        "kNodeBufferAllocate",
        "kAddress",
        "kShape",
        "kNodeCBAllocate",
        "kNodeFunctionEnd",
        "kNodeBuffer",
        "kPageSize",
        "kNodeBufferDeallocate",
        "kDeviceId",
        "kName",
        "kLayout",
        "kParams",
        "kInputs",
        "kNodeTensor",
        "kGloballyAllocated",
        "kCounter",
        "kCoreRangeSet",
        "kNodeType",
        "kNodeCaptureEnd",
        "kNumCores",
        "kConnections"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/graph/graph_operation_queries.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "auto query_output_info(Callable&& callable)",
        "auto query_peak_L1_memory_usage(Callable&& callable)",
        "auto query_trace(Callable&& callable)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "auto query_output_info(Callable&& callable)",
        "auto query_peak_L1_memory_usage(Callable&& callable)",
        "auto query_trace(Callable&& callable)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/graph/graph_processor.hpp": {
      "classes": [
        "GraphProcessor",
        "ProcessorHooks",
        "ScopedGraphCapture"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "ScopedGraphCapture(GraphProcessor::RunMode mode)",
        "ProcessorHooks()",
        "ScopedGraphCapture(ScopedGraphCapture&&)",
        "ScopedGraphCapture(const ScopedGraphCapture&)",
        "GraphProcessor(tt::tt_metal::IGraphProcessor::RunMode mode)"
      ],
      "namespaces": [],
      "structs": [
        "Vertex"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/graph/graph_pybind.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void py_graph_module_types(pybind11::module& m)",
        "void py_graph_module(pybind11::module& m)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/graph/graph_query_op_constraints.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "Tensor extract_output_tensor(const std::variant<\n                             ttnn::Tensor,\n                             std::tuple<ttnn::Tensor, Args1...>,\n                             std::tuple<ttnn::Tensor, Args2...>,\n                             std::tuple<ttnn::Tensor, Args1..., Args2...>>& result)",
        "auto query_op_constraints(Op op, IDevice* device, Args&&... args)",
        "Tensor extract_output_tensor(const Tensor& result)"
      ],
      "namespaces": [
        "detail"
      ],
      "structs": [
        "ResourceUsage",
        "ConstraintQueryResponse"
      ],
      "template_functions": [
        "Tensor extract_output_tensor(const std::variant<\n                             ttnn::Tensor,\n                             std::tuple<ttnn::Tensor, Args1...>,\n                             std::tuple<ttnn::Tensor, Args2...>,\n                             std::tuple<ttnn::Tensor, Args1..., Args2...>>& result)",
        "auto query_op_constraints(Op op, IDevice* device, Args&&... args)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/graph/graph_query_op_runtime.hpp": {
      "classes": [],
      "constants": [
        "NUM_TRACE_EXECUTIONS"
      ],
      "enums": [],
      "functions": [
        "auto capture_op_trace(Op op, MeshDevice* device, Args&&... args)",
        "uint64_t execute_time_and_release_trace(TraceID trace_id, MeshDevice* device)",
        "auto query_op_runtime(Op op, MeshDevice* device, Args&&... args)"
      ],
      "namespaces": [],
      "structs": [
        "RuntimeQueryResponse"
      ],
      "template_functions": [
        "auto capture_op_trace(Op op, MeshDevice* device, Args&&... args)",
        "uint64_t execute_time_and_release_trace(TraceID trace_id, MeshDevice* device)",
        "auto query_op_runtime(Op op, MeshDevice* device, Args&&... args)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/graph/graph_trace_utils.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "ExecutionStatus"
      ],
      "functions": [
        "uint32_t extract_l1_output_buffer_allocation_size_per_core(\n    const ttnn::Tensor& output_tensor, size_t interleaved_storage_cores)",
        "std::vector<OperationInfo> extract_arguments(const nlohmann::json& trace)",
        "uint32_t extract_peak_L1_memory_usage(const nlohmann::json& trace)",
        "std::vector<std::string> extract_calltrace(const nlohmann::json& trace)",
        "std::vector<TensorInfo> extract_output_info(const nlohmann::json& trace)",
        "std::unordered_set<uint32_t> extract_output_tensors(const nlohmann::json& trace)",
        "uint32_t extract_l1_buffer_allocation_peak_size_per_core(const nlohmann::json& trace, size_t interleaved_storage_cores)",
        "uint32_t extract_circular_buffers_peak_size_per_core(const nlohmann::json& trace)",
        "std::pair<uint32_t, uint32_t> count_intermediate_and_output_tensors(const nlohmann::json& trace)"
      ],
      "namespaces": [],
      "structs": [
        "TensorInfo",
        "OperationInfo"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/mesh_device_operation_adapter.hpp": {
      "classes": [],
      "constants": [
        "is_mesh_device_operation_adapter_v"
      ],
      "enums": [],
      "functions": [
        "auto invoke(Args&&... args)"
      ],
      "namespaces": [],
      "structs": [
        "is_mesh_device_operation_adapter",
        "MeshWorkloadFactoryAdapter",
        "MeshDeviceOperationAdapter"
      ],
      "template_functions": [
        "auto invoke(Args&&... args)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/mesh_device_operation_utils.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "void apply_override_runtime_arguments(\n    const ProgramFactory& factory,\n    tt::tt_metal::Program& program,\n    typename ProgramFactory::shared_variables_t& shared_vars,\n    const OperationAttributes& attrs,\n    const ttnn::MeshCoordinate& coord,\n    const TensorArgs& tensor_args,\n    TensorReturnValue& return_value)",
        "std::vector<ttnn::MeshCoordinate> extract_tensor_coordinates(const TensorArgs& tensor_args)",
        "bool track_workload(tt::tt_metal::distributed::MeshWorkload& workload, ttnn::MeshDevice* mesh_device)",
        "bool is_subset_of(const std::vector<MeshCoordinate>& a, const std::vector<MeshCoordinate>& b)",
        "void filter_tensor_shards(\n    const std::vector<ttnn::MeshCoordinate>& tensor_coordinates, TensorReturnValue& tensor_return_value)",
        "void set_runtime_id(tt::tt_metal::distributed::MeshWorkload& workload)",
        "bool all_tensors_have_uniform_storage(const TensorArgs& tensor_args)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "bool all_tensors_have_uniform_storage(const TensorArgs& tensor_args)",
        "std::vector<ttnn::MeshCoordinate> extract_tensor_coordinates(const TensorArgs& tensor_args)",
        "void filter_tensor_shards(\n    const std::vector<ttnn::MeshCoordinate>& tensor_coordinates, TensorReturnValue& tensor_return_value)",
        "void apply_override_runtime_arguments(\n    const ProgramFactory& factory,\n    tt::tt_metal::Program& program,\n    typename ProgramFactory::shared_variables_t& shared_vars,\n    const OperationAttributes& attrs,\n    const ttnn::MeshCoordinate& coord,\n    const TensorArgs& tensor_args,\n    TensorReturnValue& return_value)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/old_infra_device_operation.hpp": {
      "classes": [],
      "constants": [
        "old_infra_device_operation_with_optional_output_tensors",
        "old_infra_device_operation"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [
        "tensor_args_t",
        "OldInfraDeviceOperation",
        "shared_variables_t",
        "MeshWorkloadFactory",
        "ProgramFactory"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/operation.hpp": {
      "classes": [
        "NotImplemented",
        "DeviceOperation"
      ],
      "constants": [
        "arch"
      ],
      "enums": [],
      "functions": [
        "bool implements_compute_program_hash_with_optional_input_tensors()",
        "bool implements_get_parallelization_strategy()",
        "bool implements_compute_output_specs_with_optional_output_tensors()",
        "bool implements_create_op_performance_model()",
        "bool implements_validate_with_optional_input_tensors()",
        "bool implements_create_mesh_workload()",
        "bool implements_create_program_with_optional_input_tensors()",
        "bool implements_create_mesh_workload_with_optional_input_tensors()",
        "DeviceOperation(const DeviceOperation& other)",
        "void set_default_operation_output_memory_config(const MemoryConfig& memory_config)",
        "auto default_create_output_tensors(\n    const ConcreteOperation& operation, const Tensors& input_tensors, const OptionalTensors& optional_output_tensors)",
        "bool implements_compute_program_hash()",
        "bool implements_compute_output_specs()",
        "OpPerformanceModelGeneral(Tensors input_tensors, OutputTensors output_tensors, int ideal_compute_cycles)",
        "bool implements_validate()",
        "bool implements_create_output_tensors_with_optional_output_tensors()",
        "DeviceOperation(DeviceOperation&& other)",
        "bool implements_validate_with_output_tensors()",
        "bool implements_get_type_name()",
        "Hash hash_operation(const Types&... objects)",
        "bool implements_create_output_tensors()",
        "NotImplemented(const std::string& message)",
        "OpPerformanceModelGeneral()",
        "bool implements_validate_with_output_tensors_and_optional_input_tensors()",
        "DeviceOperation(T&& operation)",
        "bool implements_create_program()",
        "bool is_device_operation()"
      ],
      "namespaces": [
        "tt",
        "detail",
        "operation",
        "tt_metal"
      ],
      "structs": [
        "CacheableMeshWorkload",
        "ProfilerInfo",
        "ExternalOperation",
        "has_create_program",
        "OpPerformanceModelGeneral",
        "CacheableProgram"
      ],
      "template_functions": [
        "bool implements_compute_program_hash_with_optional_input_tensors()",
        "bool implements_get_parallelization_strategy()",
        "bool implements_compute_output_specs_with_optional_output_tensors()",
        "bool implements_validate_with_optional_input_tensors()",
        "bool implements_create_op_performance_model()",
        "bool implements_create_mesh_workload()",
        "bool implements_create_program_with_optional_input_tensors()",
        "bool implements_create_mesh_workload_with_optional_input_tensors()",
        "bool implements_compute_program_hash()",
        "auto default_create_output_tensors(\n    const ConcreteOperation& operation, const Tensors& input_tensors, const OptionalTensors& optional_output_tensors)",
        "bool implements_compute_output_specs()",
        "bool implements_validate()",
        "bool implements_create_output_tensors_with_optional_output_tensors()",
        "bool implements_validate_with_output_tensors()",
        "bool implements_get_type_name()",
        "Hash hash_operation(const Types&... objects)",
        "bool implements_create_output_tensors()",
        "bool implements_validate_with_output_tensors_and_optional_input_tensors()",
        "DeviceOperation(T&& operation)",
        "bool implements_create_program()",
        "bool is_device_operation()"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/operation_concepts.hpp": {
      "classes": [],
      "constants": [
        "program_factory"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/reports.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "DeviceInfo get_device_info(tt::tt_metal::distributed::MeshDevice* device)",
        "std::vector<BufferInfo> get_buffers(const std::vector<tt::tt_metal::distributed::MeshDevice*>& devices)",
        "std::vector<BufferPageInfo> get_buffer_pages(const std::vector<tt::tt_metal::distributed::MeshDevice*>& devices)"
      ],
      "namespaces": [],
      "structs": [
        "DeviceInfo",
        "BufferPageInfo",
        "BufferInfo"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/run_operation.hpp": {
      "classes": [],
      "constants": [
        "pad_value"
      ],
      "enums": [],
      "functions": [
        "auto run_without_autoformat(\n    ConcreteOperation&& concrete_op,\n    const std::vector<Tensor>& input_tensors,\n    const std::vector<std::optional<const Tensor>>& optional_input_tensors = {},\n    const std::vector<std::optional<Tensor>>& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "auto run_with_autoformat(\n    ConcreteOperation&& concrete_op,\n    const std::vector<Tensor>& input_tensors,\n    const std::vector<FormatParams>& input_formatting,\n    const std::vector<Layout>& output_layouts,\n    const std::vector<std::optional<const Tensor>>& optional_input_tensors = {},\n    const std::vector<std::optional<FormatParams>>& optional_input_formatting = {},\n    const OptionalTensors& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "Tensors run_with_autoformat(\n    DeviceOperation<Tensors>&& operation,\n    const Tensors& input_tensors,\n    const OptionalConstTensors& optional_input_tensors = {},\n    const OptionalTensors& optional_output_tensors = {},\n    const float pad_value = 0,\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "auto run_with_autoformat(\n    ConcreteOperation&& concrete_op,\n    const std::vector<Tensor>& input_tensors,\n    const std::vector<std::optional<const Tensor>>& optional_input_tensors = {},\n    const std::vector<std::optional<Tensor>>& optional_output_tensors = {},\n    const float pad_value = 0,\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "auto run(\n    ConcreteOperation&& concrete_op,\n    const Tensors& input_tensors,\n    const OptionalConstTensors& optional_input_tensors = {},\n    const OptionalTensors& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "OutputTensors run(\n    DeviceOperation<OutputTensors>&& operation,\n    const Tensors& input_tensors,\n    const OptionalConstTensors& optional_input_tensors = {},\n    const OptionalTensors& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "OutputTensors run_without_autoformat(\n    DeviceOperation<OutputTensors>&& operation,\n    const Tensors& input_tensors,\n    const OptionalConstTensors& optional_input_tensors = {},\n    const OptionalTensors& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "Tensors run_with_autoformat(\n    DeviceOperation<Tensors>&& operation,\n    const Tensors& input_tensors,\n    const std::vector<FormatParams>& input_formatting,\n    const std::vector<Layout>& output_layouts,\n    const OptionalConstTensors& optional_input_tensors = {},\n    const std::vector<std::optional<FormatParams>>& optional_input_formatting = {},\n    const OptionalTensors& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)"
      ],
      "namespaces": [
        "detail",
        "operation"
      ],
      "structs": [],
      "template_functions": [
        "auto run_without_autoformat(\n    ConcreteOperation&& concrete_op,\n    const std::vector<Tensor>& input_tensors,\n    const std::vector<std::optional<const Tensor>>& optional_input_tensors = {},\n    const std::vector<std::optional<Tensor>>& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "auto run_with_autoformat(\n    ConcreteOperation&& concrete_op,\n    const std::vector<Tensor>& input_tensors,\n    const std::vector<FormatParams>& input_formatting,\n    const std::vector<Layout>& output_layouts,\n    const std::vector<std::optional<const Tensor>>& optional_input_tensors = {},\n    const std::vector<std::optional<FormatParams>>& optional_input_formatting = {},\n    const OptionalTensors& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "auto run_with_autoformat(\n    ConcreteOperation&& concrete_op,\n    const std::vector<Tensor>& input_tensors,\n    const std::vector<std::optional<const Tensor>>& optional_input_tensors = {},\n    const std::vector<std::optional<Tensor>>& optional_output_tensors = {},\n    const float pad_value = 0,\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "auto run(\n    ConcreteOperation&& concrete_op,\n    const Tensors& input_tensors,\n    const OptionalConstTensors& optional_input_tensors = {},\n    const OptionalTensors& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "OutputTensors run(\n    DeviceOperation<OutputTensors>&& operation,\n    const Tensors& input_tensors,\n    const OptionalConstTensors& optional_input_tensors = {},\n    const OptionalTensors& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "OutputTensors run_without_autoformat(\n    DeviceOperation<OutputTensors>&& operation,\n    const Tensors& input_tensors,\n    const OptionalConstTensors& optional_input_tensors = {},\n    const OptionalTensors& optional_output_tensors = {},\n    ttnn::QueueId cq_id = ttnn::DefaultQueueId)"
      ],
      "typedefs": [],
      "usings": [
        "ttnn::operations::experimental::auto_format::FormatParams"
      ]
    },
    "ttnn/api/ttnn/tensor/enum_types.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "Layout"
      ],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/host_buffer/functions.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "tt::stl::Span<const T> get_as(const HostBuffer& buffer)",
        "tt::stl::Span<T> get_as(Tensor& tensor)",
        "void validate_datatype(const Tensor& tensor)",
        "tt::stl::Span<T> get_as(HostBuffer& buffer)",
        "tt::stl::Span<const T> get_as(const Tensor& tensor)",
        "HostBuffer get_host_buffer(const Tensor& tensor)"
      ],
      "namespaces": [
        "host_buffer"
      ],
      "structs": [],
      "template_functions": [
        "tt::stl::Span<const T> get_as(const HostBuffer& buffer)",
        "tt::stl::Span<T> get_as(Tensor& tensor)",
        "void validate_datatype(const Tensor& tensor)",
        "tt::stl::Span<T> get_as(HostBuffer& buffer)",
        "tt::stl::Span<const T> get_as(const Tensor& tensor)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/layout/alignment.hpp": {
      "classes": [
        "Alignment"
      ],
      "constants": [
        "sameSize",
        "attribute_names"
      ],
      "enums": [],
      "functions": [],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": [
        "ShapeBase::cend",
        "ShapeBase::cbegin",
        "ShapeBase::empty",
        "ShapeBase::view",
        "ShapeBase::ShapeBase",
        "ShapeBase::size",
        "ShapeBase::operator[]"
      ]
    },
    "ttnn/api/ttnn/tensor/layout/page_config.hpp": {
      "classes": [
        "PageConfig",
        "TilePageConfig",
        "RowMajorPageConfig"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "RowMajorPageConfig(const Tile& tile = Tile())",
        "PageConfig(Layout layout, const std::optional<Tile>& tile)",
        "TilePageConfig(const Tile& tile = Tile())",
        "PageConfig(Layout layout)",
        "PageConfig(const Config& config)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/layout/tensor_layout.hpp": {
      "classes": [
        "TensorLayout"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "TensorLayout(\n        DataType dtype, const PageConfig& page_config, const MemoryConfig& memory_config, const Alignment& alignment)",
        "TensorLayout(DataType dtype, const PageConfig& page_config, const MemoryConfig& memory_config)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/serialization.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "Tensor load_tensor(const std::string& file_name, distributed::MeshDevice* device = nullptr)",
        "void dump_memory_config(FILE* output_file, const MemoryConfig& memory_config)",
        "MemoryConfig load_memory_config(const std::string& file_name)",
        "Tensor load_tensor_flatbuffer(const std::string& file_name, distributed::MeshDevice* device = nullptr)",
        "void dump_memory_config(const std::string& file_name, const MemoryConfig& memory_config)",
        "MemoryConfig load_memory_config(FILE* input_file)",
        "void dump_tensor(\n    const std::string& file_name, const Tensor& tensor, const std::unordered_map<std::string, std::string>& strategy)",
        "void dump_tensor_flatbuffer(const std::string& file_name, const Tensor& tensor)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/shape/shape.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [],
      "namespaces": [
        "ttnn"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": [
        "tt::tt_metal::Shape"
      ]
    },
    "ttnn/api/ttnn/tensor/storage.hpp": {
      "classes": [
        "MultiDeviceHostStorage"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "DeviceStorage(std::shared_ptr<Buffer> buffer_)",
        "MultiDeviceHostStorage(std::vector<HostBuffer> buffers)",
        "DeviceStorage()",
        "HostStorage(HostBuffer buffer_)",
        "HostStorage()",
        "DeviceStorage(\n        std::shared_ptr<distributed::MeshBuffer> mesh_buffer_, std::vector<distributed::MeshCoordinate> coords_)"
      ],
      "namespaces": [],
      "structs": [
        "HostStorage",
        "DeviceStorage"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/tensor.hpp": {
      "classes": [
        "Tensor"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "std::vector<T> to_vector(ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "void memcpy(\n    void* dst, const Tensor& src, const std::optional<BufferRegion>& region = std::nullopt, bool blocking = true)",
        "Tensor set_tensor_id(const Tensor& tensor)",
        "void write_tensor(const Tensor& host_tensor, Tensor device_tensor, ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "void memcpy(\n    distributed::MeshCommandQueue& queue,\n    Tensor& dst,\n    const Tensor& src,\n    const std::optional<BufferRegion>& region = std::nullopt)",
        "Tensor from_span(\n        tt::stl::Span<const T> buffer,\n        const TensorSpec& spec,\n        distributed::MeshDevice* device = nullptr,\n        ttnn::QueueId cq_id = ttnn::DefaultQueueId,\n        T pad_value = 0)",
        "void memcpy(\n    distributed::MeshCommandQueue& queue,\n    void* dst,\n    const Tensor& src,\n    const std::optional<BufferRegion>& region = std::nullopt,\n    bool blocking = true)",
        "void memcpy(\n    CommandQueue& queue, Tensor& dst, const Tensor& src, const std::optional<BufferRegion>& region = std::nullopt)",
        "Tensor()",
        "void memcpy(\n    CommandQueue& queue, Tensor& dst, const void* src, const std::optional<BufferRegion>& region = std::nullopt)",
        "Tensor from_vector(\n        std::vector<T>&& buffer,\n        const TensorSpec& spec,\n        distributed::MeshDevice* device = nullptr,\n        ttnn::QueueId cq_id = ttnn::DefaultQueueId,\n        T pad_value = 0)",
        "Tensor(const Tensor& other)",
        "void memcpy(\n    CommandQueue& queue,\n    void* dst,\n    const Tensor& src,\n    const std::optional<BufferRegion>& region = std::nullopt,\n    bool blocking = true)",
        "Tensor create_device_tensor(const TensorSpec& tensor_spec, IDevice* device)",
        "Tensor(Storage storage, TensorSpec tensor_spec, DistributedTensorConfig distributed_tensor_config)",
        "void memcpy(\n    distributed::MeshCommandQueue& queue,\n    Tensor& dst,\n    const void* src,\n    const std::optional<BufferRegion>& region = std::nullopt)",
        "Tensor(\n        HostBuffer buffer,\n        const ttnn::Shape& logical_shape,\n        const ttnn::Shape& padded_shape,\n        DataType dtype,\n        Layout layout,\n        const std::optional<Tile>& tile = std::nullopt)",
        "Tensor(HostBuffer buffer, TensorSpec tensor_spec)",
        "Tensor(Tensor&& other)",
        "Tensor(\n        HostBuffer buffer,\n        const ttnn::Shape& shape,\n        DataType dtype,\n        Layout layout,\n        const std::optional<Tile>& tile = std::nullopt)",
        "Tensor allocate_tensor_on_mesh(const TensorSpec& tensor_spec, distributed::MeshDevice* mesh_device)",
        "Tensor from_borrowed_data(\n        tt::stl::Span<T> buffer,\n        const ttnn::Shape& shape,\n        const std::function<void()>& on_creation_callback,\n        const std::function<void()>& on_destruction_callback,\n        const std::optional<Tile>& tile = std::nullopt)",
        "Tensor from_vector(\n        const std::vector<T>& buffer,\n        const TensorSpec& spec,\n        distributed::MeshDevice* device = nullptr,\n        ttnn::QueueId cq_id = ttnn::DefaultQueueId,\n        T pad_value = 0)",
        "void memcpy(Tensor& dst, const void* src, const std::optional<BufferRegion>& region = std::nullopt)",
        "void memcpy(Tensor& dst, const Tensor& src, const std::optional<BufferRegion>& region = std::nullopt)",
        "Tensor create_device_tensor(\n    const ttnn::Shape& shape,\n    DataType dtype,\n    Layout layout,\n    IDevice* device,\n    const MemoryConfig& memory_config = MemoryConfig{},\n    const std::optional<Tile>& tile = std::nullopt)"
      ],
      "namespaces": [
        "tt",
        "ttnn",
        "distributed",
        "tt_metal"
      ],
      "structs": [],
      "template_functions": [
        "std::vector<T> to_vector(ttnn::QueueId cq_id = ttnn::DefaultQueueId)",
        "Tensor from_vector(\n        std::vector<T>&& buffer,\n        const TensorSpec& spec,\n        distributed::MeshDevice* device = nullptr,\n        ttnn::QueueId cq_id = ttnn::DefaultQueueId,\n        T pad_value = 0)",
        "Tensor from_span(\n        tt::stl::Span<const T> buffer,\n        const TensorSpec& spec,\n        distributed::MeshDevice* device = nullptr,\n        ttnn::QueueId cq_id = ttnn::DefaultQueueId,\n        T pad_value = 0)",
        "Tensor from_borrowed_data(\n        tt::stl::Span<T> buffer,\n        const ttnn::Shape& shape,\n        const std::function<void()>& on_creation_callback,\n        const std::function<void()>& on_destruction_callback,\n        const std::optional<Tile>& tile = std::nullopt)",
        "Tensor from_vector(\n        const std::vector<T>& buffer,\n        const TensorSpec& spec,\n        distributed::MeshDevice* device = nullptr,\n        ttnn::QueueId cq_id = ttnn::DefaultQueueId,\n        T pad_value = 0)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/tensor_attributes.hpp": {
      "classes": [
        "TensorAttributes"
      ],
      "constants": [],
      "enums": [],
      "functions": [
        "TensorAttributes(Storage storage, TensorSpec tensor_spec, DistributedTensorConfig distributed_tensor_config)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/tensor_impl.hpp": {
      "classes": [],
      "constants": [],
      "enums": [
        "TensorPrintProfile"
      ],
      "functions": [
        "std::vector<OutputDataType> cast_vec(tt::stl::Span<const InputDataType> data_to_convert)",
        "Tensor to_device_mesh_tensor(\n    const Tensor& tensor,\n    distributed::MeshDevice* mesh_device,\n    const MemoryConfig& memory_config,\n    QueueId cq_id = ttnn::DefaultQueueId)",
        "Tensor to_layout(const Tensor& tensor, Layout target_layout)",
        "Tensor to_host(const Tensor& tensor, bool blocking = true, QueueId cq_id = ttnn::DefaultQueueId)",
        "Tensor pad(\n    const Tensor& tensor,\n    const ttnn::Shape& output_padded_shape,\n    const ttnn::Shape& input_tensor_start,\n    float pad_value)",
        "Tensor to_layout_bfloat(const Tensor& tensor, Layout target_layout)",
        "Tensor to_device(\n    const Tensor& tensor,\n    IDevice* target_device,\n    const MemoryConfig& memory_config,\n    QueueId cq_id = ttnn::DefaultQueueId)",
        "size_t packed_buffer_size_bytes(size_t volume_unpacked_data)",
        "std::vector<T> convert_layout_tile_to_row_major(\n    const Shape2D& shape, const Tile& tile, tt::stl::Span<const T> data_to_convert)",
        "uint32_t element_size_bytes(DataType dtype)",
        "Tensor extract_shard(const Tensor& tensor, const uint32_t& core_id)",
        "std::vector<T> encode_tensor_data(std::vector<T>&& logical_data, const TensorSpec& tensor_spec, T pad_value = 0)",
        "Tensor to_host_mesh_tensor(const Tensor& tensor, bool blocking = true, QueueId cq_id = ttnn::DefaultQueueId)",
        "std::shared_ptr<Buffer> allocate_buffer_on_device(IDevice* device, const TensorSpec& tensor_spec)",
        "void read_data_from_device_buffer(CommandQueue& cq, Buffer& device_buffer, void* host_buffer_data, bool blocking)",
        "std::vector<T> decode_tensor_data(std::vector<T>&& physical_data, const TensorSpec& tensor_spec)",
        "void read_data_from_device_buffer(Buffer& device_buffer, std::vector<T>& host_buffer)",
        "std::string to_string(\n    const Tensor& tensor,\n    std::optional<DataType> original_dtype = std::nullopt,\n    std::optional<Layout> original_layout = std::nullopt)",
        "std::vector<T> convert_layout_row_major_to_tile(\n    const Shape2D& shape, const Tile& tile, tt::stl::Span<const T> data_to_convert)",
        "Tensor unpad(const Tensor& tensor, const ttnn::Shape& output_tensor_start, const ttnn::Shape& output_tensor_end)",
        "std::shared_ptr<distributed::MeshBuffer> allocate_mesh_buffer_on_device(\n    distributed::MeshDevice* mesh_device, const TensorSpec& tensor_spec)",
        "void copy_to_mesh_tensor(const Tensor& host_tensor, Tensor& mesh_tensor, QueueId cq_id = ttnn::DefaultQueueId)"
      ],
      "namespaces": [
        "tt",
        "tensor_impl",
        "tt_metal"
      ],
      "structs": [
        "bfloat8_b",
        "bfloat4_b"
      ],
      "template_functions": [
        "std::vector<OutputDataType> cast_vec(tt::stl::Span<const InputDataType> data_to_convert)",
        "Tensor to_device_mesh_tensor(\n    const Tensor& tensor,\n    distributed::MeshDevice* mesh_device,\n    const MemoryConfig& memory_config,\n    QueueId cq_id = ttnn::DefaultQueueId)",
        "Tensor to_layout(const Tensor& tensor, Layout target_layout)",
        "Tensor to_host(const Tensor& tensor, bool blocking = true, QueueId cq_id = ttnn::DefaultQueueId)",
        "Tensor pad(\n    const Tensor& tensor,\n    const ttnn::Shape& output_padded_shape,\n    const ttnn::Shape& input_tensor_start,\n    float pad_value)",
        "Tensor to_layout_bfloat(const Tensor& tensor, Layout target_layout)",
        "Tensor to_device(\n    const Tensor& tensor,\n    IDevice* target_device,\n    const MemoryConfig& memory_config,\n    QueueId cq_id = ttnn::DefaultQueueId)",
        "size_t packed_buffer_size_bytes(size_t volume_unpacked_data)",
        "std::vector<T> convert_layout_tile_to_row_major(\n    const Shape2D& shape, const Tile& tile, tt::stl::Span<const T> data_to_convert)",
        "Tensor extract_shard(const Tensor& tensor, const uint32_t& core_id)",
        "std::vector<T> encode_tensor_data(std::vector<T>&& logical_data, const TensorSpec& tensor_spec, T pad_value = 0)",
        "Tensor to_host_mesh_tensor(const Tensor& tensor, bool blocking = true, QueueId cq_id = ttnn::DefaultQueueId)",
        "void read_data_from_device_buffer(CommandQueue& cq, Buffer& device_buffer, void* host_buffer_data, bool blocking)",
        "std::vector<T> decode_tensor_data(std::vector<T>&& physical_data, const TensorSpec& tensor_spec)",
        "void read_data_from_device_buffer(Buffer& device_buffer, std::vector<T>& host_buffer)",
        "std::string to_string(\n    const Tensor& tensor,\n    std::optional<DataType> original_dtype = std::nullopt,\n    std::optional<Layout> original_layout = std::nullopt)",
        "std::vector<T> convert_layout_row_major_to_tile(\n    const Shape2D& shape, const Tile& tile, tt::stl::Span<const T> data_to_convert)",
        "Tensor unpad(const Tensor& tensor, const ttnn::Shape& output_tensor_start, const ttnn::Shape& output_tensor_end)",
        "void copy_to_mesh_tensor(const Tensor& host_tensor, Tensor& mesh_tensor, QueueId cq_id = ttnn::DefaultQueueId)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/tensor_impl_wrapper.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "auto dispatch(DataType dtype, Func&& func, Args&&... args)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "auto dispatch(DataType dtype, Func&& func, Args&&... args)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/tensor_ops.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "Tensor tensor_unpad_from_tile(const Tensor& input_tensor, const ttnn::Shape& output_tensor_shape)",
        "Tensor tensor_pad_to_tile(const Tensor& input_tensor, float pad_value)",
        "void tensor_print(const Tensor& input_tensor)",
        "Tensor tensor_to_device(\n    const Tensor& input_tensor, distributed::MeshDevice* mesh_device, const MemoryConfig& mem_config, QueueId cq_id)",
        "Tensor tensor_reshape(const Tensor& input_tensor, const ttnn::Shape& new_shape)",
        "Tensor tensor_unpad(\n    const Tensor& input_tensor, const ttnn::Shape& output_tensor_start, const ttnn::Shape& output_tensor_end)",
        "Tensor tensor_to_layout(const Tensor& input_tensor, Layout target_layout, IDevice* worker)",
        "Tensor tensor_cpu(const Tensor& input_tensor, bool blocking, QueueId cq_id)",
        "Tensor tensor_to_layout(const Tensor& input_tensor, Layout target_layout, distributed::MeshDevice* mesh_device)",
        "Tensor tensor_to_device(\n    const Tensor& input_tensor, IDevice* target_device, const MemoryConfig& mem_config, QueueId cq_id)",
        "Tensor tensor_pad(\n    const Tensor& input_tensor,\n    const ttnn::Shape& output_padded_shape,\n    const ttnn::Shape& input_tensor_start,\n    float pad_value)",
        "Tensor tensor_reshape(\n    const Tensor& input_tensor, const ttnn::Shape& new_logical_shape, const ttnn::Shape& new_padded_shape)"
      ],
      "namespaces": [
        "distributed"
      ],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/tensor_spec.hpp": {
      "classes": [
        "TensorSpec"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [],
      "functions": [
        "TensorSpec(const TensorSpec&)",
        "TensorSpec(TensorSpec&&)",
        "TensorSpec(ttnn::Shape logical_shape, TensorLayout tensor_layout)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/tensor_utils.hpp": {
      "classes": [],
      "constants": [
        "compute_flat_input_index"
      ],
      "enums": [],
      "functions": [
        "Tensor transform(const Tensor& tensor, const std::function<Tensor(const Tensor&)>& transform_func)",
        "bool is_cpu_tensor(const Tensor& tensor)",
        "bool is_device_tensor(const Tensor& tensor)",
        "int compute_flat_indices(tt::stl::Span<const int> indices, tt::stl::Span<const uint32_t> strides)",
        "bool is_arch_whb0(const tt::ARCH& arch)",
        "ttnn::Shape infer_dims_for_reshape(const Tensor& tensor, tt::stl::Span<const int32_t> shape)",
        "void apply(const Tensor& tensor, const std::function<void(const Tensor&)>& callable)",
        "uint32_t get_batch_size(const T& shape)",
        "ShardDivisionSpec compute_shard_division_spec(const Shape2D& shape, const Shape2D& shard_shape)",
        "bool is_arch_gs(const tt::ARCH& arch)",
        "bool is_multi_device_host_tensor(const Tensor& tensor)",
        "std::size_t compute_buffer_size(const ttnn::Shape& shape, DataType data_type, const Tile& tile)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "ShardDivisionSpec"
      ],
      "template_functions": [
        "uint32_t get_batch_size(const T& shape)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/types.hpp": {
      "classes": [
        "MemoryConfig"
      ],
      "constants": [
        "attribute_names"
      ],
      "enums": [
        "DataType",
        "StorageType"
      ],
      "functions": [
        "MemoryConfig(BufferType buffer_type,\n        NdShardSpec nd_shard_spec)",
        "bool is_block_float(DataType dtype)",
        "MemoryConfig(\n        TensorMemoryLayout memory_layout,\n        BufferType buffer_type,\n        std::optional<ShardSpec> shard_spec,\n        std::optional<NdShardSpec> nd_shard_spec,\n        bool created_with_nd_shard_spec)",
        "MemoryConfig(\n        TensorMemoryLayout memory_layout,\n        BufferType buffer_type = BufferType::DRAM,\n        std::optional<ShardSpec> shard_spec = std::nullopt)",
        "MemoryConfig(MemoryConfig&& other)",
        "MemoryConfig()",
        "DataType convert_to_data_type()",
        "MemoryConfig(const MemoryConfig& other)",
        "bool is_floating_point(DataType dtype)",
        "tt::DataFormat datatype_to_dataformat_converter(DataType datatype)"
      ],
      "namespaces": [
        "tt",
        "tt_metal"
      ],
      "structs": [
        "NdShardSpec"
      ],
      "template_functions": [
        "DataType convert_to_data_type()"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/xtensor/conversion_utils.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "xt::xarray<T> span_to_xtensor_view(std::span<T> buffer, const ttnn::Shape& shape)",
        "tt::tt_metal::Tensor from_xtensor(const xt::xarray<T>& buffer, const TensorSpec& spec)",
        "auto xtensor_to_span(const xt::xarray<T>& xtensor)",
        "xt::xarray<T> to_xtensor(const tt::tt_metal::Tensor& tensor)",
        "ttnn::Shape get_shape_from_xarray(const E& xarr)",
        "xt::xarray<T> span_to_xtensor_view(tt::stl::Span<const T> buffer, const ttnn::Shape& shape)"
      ],
      "namespaces": [],
      "structs": [],
      "template_functions": [
        "ttnn::Shape get_shape_from_xarray(const E& xarr)",
        "xt::xarray<T> span_to_xtensor_view(std::span<T> buffer, const ttnn::Shape& shape)",
        "tt::tt_metal::Tensor from_xtensor(const xt::xarray<T>& buffer, const TensorSpec& spec)",
        "auto xtensor_to_span(const xt::xarray<T>& xtensor)",
        "xt::xarray<T> to_xtensor(const tt::tt_metal::Tensor& tensor)",
        "xt::xarray<T> span_to_xtensor_view(tt::stl::Span<const T> buffer, const ttnn::Shape& shape)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/tensor/xtensor/partition.hpp": {
      "classes": [],
      "constants": [],
      "enums": [],
      "functions": [
        "tt::tt_metal::Tensor concat(const std::vector<tt::tt_metal::Tensor>& tensors, int dim = 0)",
        "StridedViews<T> chunk_ndim(\n    const xt::xexpression<T>& expr, tt::stl::SmallVector<int> num_chunks, tt::stl::SmallVector<int> dims)",
        "StridedViews<T> chunk(const xt::xexpression<T>& expr, int num_chunks, int dim = 0)",
        "auto compute_strided_view()",
        "xt::xarray<T> concat(const std::vector<xt::xarray<T>>& v, int dim = 0)"
      ],
      "namespaces": [
        "detail"
      ],
      "structs": [],
      "template_functions": [
        "StridedViews<T> chunk(const xt::xexpression<T>& expr, int num_chunks, int dim = 0)",
        "auto compute_strided_view()",
        "StridedViews<T> chunk_ndim(\n    const xt::xexpression<T>& expr, tt::stl::SmallVector<int> num_chunks, tt::stl::SmallVector<int> dims)",
        "xt::xarray<T> concat(const std::vector<xt::xarray<T>>& v, int dim = 0)"
      ],
      "typedefs": [],
      "usings": []
    },
    "ttnn/api/ttnn/types.hpp": {
      "classes": [],
      "constants": [
        "L1_MEMORY_CONFIG",
        "TILE_SIZE",
        "L1_HEIGHT_SHARDED_MEMORY_CONFIG",
        "DEVICE_STORAGE_TYPE",
        "DRAM_MEMORY_CONFIG",
        "ROW_MAJOR_LAYOUT",
        "L1_BLOCK_SHARDED_MEMORY_CONFIG",
        "L1_WIDTH_SHARDED_MEMORY_CONFIG",
        "TILE_LAYOUT"
      ],
      "enums": [],
      "functions": [
        "CoreGrid(std::size_t x, std::size_t y)"
      ],
      "namespaces": [
        "ttnn",
        "types"
      ],
      "structs": [
        "CoreGrid"
      ],
      "template_functions": [],
      "typedefs": [],
      "usings": [
        "tt::tt_metal::BufferType",
        "tt::tt_metal::GlobalSemaphore",
        "tt::tt_metal::CoreRange",
        "tt::tt_metal::ShardMode",
        "tt::tt_metal::CoreCoord",
        "tt::tt_metal::TensorMemoryLayout",
        "tt::tt_metal::experimental::GlobalCircularBuffer",
        "tt::tt_metal::MemoryConfig",
        "tt::tt_metal::SubDeviceManagerId",
        "tt::tt_metal::Layout",
        "tt::tt_metal::CoreRangeSet",
        "tt::tt_metal::DataType",
        "tt::tt_metal::StorageType",
        "tt::tt_metal::SubDevice",
        "tt::tt_metal::ShardOrientation"
      ]
    }
  },
  "metadata": {
    "created": "2025-07-01 20:37:43",
    "tt_metal_path": "/home/user/tt-metal",
    "updated": "2025-07-01 20:38:22",
    "version": "2.0"
  }
}